<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AcWing 103. 电影</title>
    <url>/AcWing/acwing-103-%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, tot, a[N], b[N], c[N], cnt[<span class="number">3</span> * N], langs[<span class="number">3</span> * N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(langs + <span class="number">1</span>, langs + <span class="number">1</span> + k, x) - langs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), langs[++tot] = a[i];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), langs[++tot] = b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]), langs[++tot] = c[i];</span><br><span class="line">    <span class="built_in">sort</span>(langs + <span class="number">1</span>, langs + <span class="number">1</span> + tot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        langs[++k] = langs[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; tot &amp;&amp; langs[i + <span class="number">1</span>] == langs[i]) ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ++cnt[<span class="built_in">find</span>(a[i])];</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, m1 = <span class="number">0</span>, m2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> v1 = cnt[<span class="built_in">find</span>(b[i])], v2 = cnt[<span class="built_in">find</span>(c[i])];</span><br><span class="line">        <span class="keyword">if</span> (v1 &gt; m1 || (v1 == m1 &amp;&amp; v2 &gt; m2)) &#123;</span><br><span class="line">            ans = i, m1 = v1, m2 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans ? ans : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 121. 赶牛入圈</title>
    <url>/AcWing/acwing-121-%E8%B5%B6%E7%89%9B%E5%85%A5%E5%9C%88/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> c, n, x, y, sum[N][N];</span><br><span class="line">PII points[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; numbers;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), x) - numbers.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x1 = <span class="number">0</span>, x2 = <span class="number">1</span>; x2 &lt; numbers.<span class="built_in">size</span>(); ++x2) &#123;</span><br><span class="line">        <span class="keyword">while</span> (numbers[x2] - numbers[x1 + <span class="number">1</span>] + <span class="number">1</span> &gt; len) ++x1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y1 = <span class="number">0</span>, y2 = <span class="number">1</span>; y2 &lt; numbers.<span class="built_in">size</span>(); ++y2) &#123;</span><br><span class="line">            <span class="keyword">while</span> (numbers[y2] - numbers[y1 + <span class="number">1</span>] + <span class="number">1</span> &gt; len) ++y1;</span><br><span class="line">            <span class="keyword">if</span> (sum[x2][y2] - sum[x1][y2] - sum[x2][y1] + sum[x1][y1] &gt;= c)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;c, &amp;n);</span><br><span class="line">    numbers.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        points[i] = &#123;x, y&#125;;</span><br><span class="line">        numbers.<span class="built_in">push_back</span>(x);</span><br><span class="line">        numbers.<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>());</span><br><span class="line">    numbers.<span class="built_in">erase</span>(<span class="built_in">unique</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>()), numbers.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">get</span>(points[i].first), y = <span class="built_in">get</span>(points[i].second);</span><br><span class="line">        ++sum[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numbers.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; numbers.<span class="built_in">size</span>(); ++j)</span><br><span class="line">            sum[i][j] += sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>二分</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3544. 寻找变化前的01序列</title>
    <url>/AcWing/acwing-3544-%E5%AF%BB%E6%89%BE%E5%8F%98%E5%8C%96%E5%89%8D%E7%9A%8401%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">string S;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; S;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> t = cnt;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (t == <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; S[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
  </entry>
  <entry>
    <title>AcWing 3115. 疯狂的馒头</title>
    <url>/AcWing/acwing-3115-%E7%96%AF%E7%8B%82%E7%9A%84%E9%A6%92%E5%A4%B4/</url>
    <content><![CDATA[<div class="tabs" id="acwing-3115-solution"><ul class="nav-tabs"><li class="tab active"><a href="#acwing-3115-solution-1">Union Find</a></li><li class="tab"><a href="#acwing-3115-solution-2">Segment Tree</a></li></ul><div class="tab-content"><div class="tab-pane active" id="acwing-3115-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, p, q, f[N], color[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] != x) f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) f[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="type">int</span> l = (i * p + q) % n + <span class="number">1</span>,</span><br><span class="line">            r = (i * q + p) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(l);</span><br><span class="line">        <span class="keyword">while</span> (pa &lt;= r) &#123;</span><br><span class="line">            color[pa] = i;</span><br><span class="line">            f[pa] = <span class="built_in">find</span>(pa + <span class="number">1</span>);</span><br><span class="line">            pa = <span class="built_in">find</span>(pa);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, color[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="acwing-3115-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, v;</span><br><span class="line">&#125; t[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, m, p, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[u] = &#123;l, r, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u].v) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (t[u].l == t[u].r) t[u].v = v;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = t[u].l + t[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (t[u &lt;&lt; <span class="number">1</span>].v &amp;&amp; t[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v) t[u].v = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u].l == t[u].r) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t[u].v);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">output</span>(u &lt;&lt; <span class="number">1</span>), <span class="built_in">output</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p, &amp;q);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m; i; --i) &#123;</span><br><span class="line">        <span class="type">int</span> l = (i * p + q) % n + <span class="number">1</span>, r = (i * q + p) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, l, r, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">output</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3547. 特殊数字</title>
    <url>/AcWing/acwing-3547-%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        ans += n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % <span class="number">4</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">check</span>(n)) ++n;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
  </entry>
  <entry>
    <title>AcWing 3546. 复制、剪切、粘贴</title>
    <url>/AcWing/acwing-3546-%E5%A4%8D%E5%88%B6%E3%80%81%E5%89%AA%E5%88%87%E3%80%81%E7%B2%98%E8%B4%B4/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s, t, op;</span><br><span class="line"><span class="type">int</span> m, l, r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;PASTE&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; l;</span><br><span class="line">            s.<span class="built_in">insert</span>(l + <span class="number">1</span>, t);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="string">&quot;CUT&quot;</span>) &#123;</span><br><span class="line">                t = s.<span class="built_in">substr</span>(l, r - l + <span class="number">1</span>);</span><br><span class="line">                s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>() + l, s.<span class="built_in">begin</span>() + r + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = s.<span class="built_in">substr</span>(l, r - l + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
  </entry>
  <entry>
    <title>AcWing 3545. 寻找奇特的数</title>
    <url>/AcWing/acwing-3545-%E5%AF%BB%E6%89%BE%E5%A5%87%E7%89%B9%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T, n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            <span class="keyword">if</span> (m % i == <span class="number">0</span> &amp;&amp; m / i &lt;= n)</span><br><span class="line">                ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
  </entry>
  <entry>
    <title>AcWing 3548. 双端队列</title>
    <url>/AcWing/acwing-3548-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; c &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;L&#x27;</span>) p[x] = --l;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;R&#x27;</span>) p[x] = ++r;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">min</span>(r - p[x], p[x] - l) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
  </entry>
  <entry>
    <title>AcWing 3549. 最长非递减子序列</title>
    <url>/AcWing/acwing-3549-%E6%9C%80%E9%95%BF%E9%9D%9E%E9%80%92%E5%87%8F%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> s1 = <span class="number">0</span>, s2 = <span class="number">0</span>, s3 = <span class="number">0</span>, s4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            s1 = s1 + <span class="number">1</span>;</span><br><span class="line">            s3 = <span class="built_in">max</span>(s3 + <span class="number">1</span>, s2 + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s2 = <span class="built_in">max</span>(s2 + <span class="number">1</span>, s1 + <span class="number">1</span>);</span><br><span class="line">            s4 = <span class="built_in">max</span>(s4 + <span class="number">1</span>, s3 + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(s3, s4));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3578. 最大中位数</title>
    <url>/AcWing/acwing-3578-%E6%9C%80%E5%A4%A7%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">    LL cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; mid)</span><br><span class="line">            cnt += mid - a[i];</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (LL) l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3577. 选择数字</title>
    <url>/AcWing/acwing-3577-%E9%80%89%E6%8B%A9%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, t;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        x = <span class="built_in">max</span>(x, t);</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        y = <span class="built_in">max</span>(y, t);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3579. 数字移动</title>
    <url>/AcWing/acwing-3579-%E6%95%B0%E5%AD%97%E7%A7%BB%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="type">int</span> p[N], s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] = i, s[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;j);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(i) != <span class="built_in">find</span>(j)) &#123;</span><br><span class="line">                s[<span class="built_in">find</span>(j)] += s[<span class="built_in">find</span>(i)];</span><br><span class="line">                p[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s[<span class="built_in">find</span>(i)]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3617. 子矩形计数</title>
    <url>/AcWing/acwing-3617-%E5%AD%90%E7%9F%A9%E5%BD%A2%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40001</span>;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> s1[N], s2[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> w[], <span class="type">int</span> s[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (w[i]) &#123;</span><br><span class="line">            ++j;</span><br><span class="line">            ++s[<span class="number">1</span>], --s[j + <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) cin &gt;&gt; b[i];</span><br><span class="line">    <span class="built_in">work</span>(a, s1, n);</span><br><span class="line">    <span class="built_in">work</span>(b, s2, m);</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k % i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> j = k / i;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; m) <span class="keyword">break</span>;</span><br><span class="line">        ans += s1[i] * s2[j];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
  </entry>
  <entry>
    <title>AcWing 3629. 同心圆涂色</title>
    <url>/AcWing/acwing-3629-%E5%90%8C%E5%BF%83%E5%9C%86%E6%B6%82%E8%89%B2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> r[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r[i]);</span><br><span class="line">    <span class="built_in">sort</span>(r, r + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">        ans += PI * (r[i] * r[i] - r[i + <span class="number">1</span>] * r[i + <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3624. 三值字符串</title>
    <url>/AcWing/acwing-3624-%E4%B8%89%E5%80%BC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="type">int</span> ans = n + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            ++cnt[s[j] - <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line">            <span class="keyword">while</span> (cnt[s[i] - <span class="string">&#x27;1&#x27;</span>] &gt; <span class="number">1</span>)</span><br><span class="line">                --cnt[s[i++] - <span class="string">&#x27;1&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (cnt[<span class="number">0</span>] &amp;&amp; cnt[<span class="number">1</span>] &amp;&amp; cnt[<span class="number">2</span>])</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans == n + <span class="number">1</span> ? <span class="number">0</span> : ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3646. 分水果</title>
    <url>/AcWing/acwing-3646-%E5%88%86%E6%B0%B4%E6%9E%9C/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="type">int</span> s[<span class="number">7</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">7</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> sa = <span class="number">0</span>, sb = <span class="number">0</span>, sc = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    sa += s[j][<span class="number">0</span>];</span><br><span class="line">                    sb += s[j][<span class="number">1</span>];</span><br><span class="line">                    sc += s[j][<span class="number">2</span>];</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sa &lt;= a &amp;&amp; sb &lt;= b &amp;&amp; sc &lt;= c)</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>打表</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3655. 楼层</title>
    <url>/AcWing/acwing-3655-%E6%A5%BC%E5%B1%82/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T, n, x;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; (n &lt;= <span class="number">2</span> ? <span class="number">1</span> : (n - <span class="number">3</span> + x) / x + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3661. 重置数列</title>
    <url>/AcWing/acwing-3661-%E9%87%8D%E7%BD%AE%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000000</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="type">int</span> ans = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;)</span><br><span class="line">                <span class="keyword">if</span> (a[j] != i) &#123;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                    j += k;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++j;</span><br><span class="line">                &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, cnt);</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3663. 打印数字菱形</title>
    <url>/AcWing/acwing-3663-%E6%89%93%E5%8D%B0%E6%95%B0%E5%AD%97%E8%8F%B1%E5%BD%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; <span class="number">2</span> * n + <span class="number">1</span>; ++r) &#123;</span><br><span class="line">        <span class="type">int</span> d = <span class="built_in">abs</span>(r - n);</span><br><span class="line">        <span class="keyword">if</span> (d)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%*s&quot;</span>, <span class="number">2</span> * d, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &lt; n - d)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, c++);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c--);</span><br><span class="line">        <span class="keyword">while</span> (c &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, c--);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3660. 最短时间</title>
    <url>/AcWing/acwing-3660-%E6%9C%80%E7%9F%AD%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, m, r, c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(&#123;r + c - <span class="number">2</span>, n - r + c - <span class="number">1</span>, r + m - c - <span class="number">1</span>, n - r + m - c&#125;) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>思维题</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3662. 最大上升子序列和</title>
    <url>/AcWing/acwing-3662-%E6%9C%80%E5%A4%A7%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, w[N];</span><br><span class="line">LL tr[N], f[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; xs;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(xs.<span class="built_in">begin</span>(), xs.<span class="built_in">end</span>(), x) - xs.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        tr[i] = <span class="built_in">max</span>(tr[i], v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        res = <span class="built_in">max</span>(res, tr[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">        xs.<span class="built_in">push_back</span>(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(xs.<span class="built_in">begin</span>(), xs.<span class="built_in">end</span>());</span><br><span class="line">    xs.<span class="built_in">erase</span>(<span class="built_in">unique</span>(xs.<span class="built_in">begin</span>(), xs.<span class="built_in">end</span>()), xs.<span class="built_in">end</span>());</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">get</span>(w[i]);</span><br><span class="line">        f[i] = <span class="built_in">query</span>(k) + w[i];</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[i]);</span><br><span class="line">        <span class="built_in">add</span>(k + <span class="number">1</span>, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>线段树</tag>
        <tag>DP</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3664. 数组补全</title>
    <url>/AcWing/acwing-3664-%E6%95%B0%E7%BB%84%E8%A1%A5%E5%85%A8/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, k, p, x, y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; p &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    x -= sum;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; n - k) cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> mid = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), y) - a.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="type">int</span> s1 = <span class="built_in">min</span>(n / <span class="number">2</span> - mid, n - k);</span><br><span class="line">        <span class="type">int</span> s2 = n - s1 - k;</span><br><span class="line">        <span class="keyword">if</span> (s1 + s2 * y &gt; x || (s2 &amp;&amp; y &gt; p)) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1; ++i) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s2; ++i) &#123;</span><br><span class="line">                cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3672. 数组重排</title>
    <url>/AcWing/acwing-3672-%E6%95%B0%E7%BB%84%E9%87%8D%E6%8E%92/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">sort</span>(a, a + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3679. 素数矩阵</title>
    <url>/AcWing/acwing-3679-%E7%B4%A0%E6%95%B0%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; n; ++c) &#123;</span><br><span class="line">                cout &lt;&lt; (r == c || c == r + <span class="number">1</span> || (r == n - <span class="number">1</span> &amp;&amp; c == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3694. A还是B</title>
    <url>/AcWing/acwing-3694-a%E8%BF%98%E6%98%AFb/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> n, a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;A&#x27;</span>) a++;</span><br><span class="line">        <span class="keyword">else</span> b++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (a == b ? <span class="string">&quot;T&quot;</span> : (a &gt; b ? <span class="string">&quot;A&quot;</span> : <span class="string">&quot;B&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3695. 扩充序列</title>
    <url>/AcWing/acwing-3695-%E6%89%A9%E5%85%85%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<div class="tabs" id="acwing-3695-solution"><ul class="nav-tabs"><li class="tab"><a href="#acwing-3695-solution-1">Solution 1</a></li><li class="tab active"><a href="#acwing-3695-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane" id="acwing-3695-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL k;</span><br><span class="line">vector&lt;LL&gt; v&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> r, LL k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>() + r, k);</span><br><span class="line">    <span class="type">int</span> idx = it - v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">if</span> (*it == k) <span class="keyword">return</span> idx;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(idx, v[idx - <span class="number">1</span>] * <span class="number">2</span> - k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) v.<span class="built_in">emplace_back</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i));</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">dfs</span>(n + <span class="number">1</span>, k);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="acwing-3695-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n, LL k)</span> </span>&#123;</span><br><span class="line">    LL mid = <span class="number">1ll</span> &lt;&lt; n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == mid) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; mid) <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>, k - mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dfs</span>(n, k) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3686. 移动序列</title>
    <url>/AcWing/acwing-3686-%E7%A7%BB%E5%8A%A8%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>, cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) ++flag;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans += cnt;</span><br><span class="line">                    cnt = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3696. 构造有向无环图</title>
    <url>/AcWing/acwing-3696-%E6%9E%84%E9%80%A0%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>, M = <span class="number">200001</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> d[N], q[N];</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125; edge[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q[++tt] = i;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (--d[j] == <span class="number">0</span>)</span><br><span class="line">                q[++tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">-1</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        idx = k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="type">int</span> t, a, b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (!t) edge[k++] = &#123;a, b&#125;;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">add</span>(a, b);</span><br><span class="line">                ++d[b];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">topsort</span>()) <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = h[i]; ~j; j = ne[j])</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, e[j]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) pos[q[i]] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> a = edge[i].a, b = edge[i].b;</span><br><span class="line">                <span class="keyword">if</span> (pos[a] &gt; pos[b]) <span class="built_in">swap</span>(a, b);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a, b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3697. 回文子序列</title>
    <url>/AcWing/acwing-3697-%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5001</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">bool</span> ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ans = <span class="literal">false</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (p[x]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - p[x] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    ans = <span class="literal">true</span>;</span><br><span class="line">                    cin.<span class="built_in">ignore</span>(numeric_limits&lt;streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p[x] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (ans ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>思维题</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3733. 去掉一个元素</title>
    <url>/AcWing/acwing-3733-%E5%8E%BB%E6%8E%89%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>, o = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &amp; <span class="number">1</span>) ++o;</span><br><span class="line">        <span class="keyword">else</span> ++p;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (o &amp; <span class="number">1</span> ? o : p) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3734. 求和</title>
    <url>/AcWing/acwing-3734-%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL l, r, ans;</span><br><span class="line">vector&lt;LL&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> c, LL x)</span> </span>&#123;</span><br><span class="line">    s.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">10</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(c + <span class="number">1</span>, <span class="number">10</span> * x + <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(c + <span class="number">1</span>, <span class="number">10</span> * x + <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        LL a = s[i - <span class="number">1</span>] + <span class="number">1</span>, b = s[i];</span><br><span class="line">        ans += s[i] * <span class="built_in">max</span>(<span class="number">0ll</span>, <span class="built_in">min</span>(r, b) - <span class="built_in">max</span>(l, a) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>枚举</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3759. 第k个字符串</title>
    <url>/AcWing/acwing-3759-%E7%AC%ACk%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> T, n, k;</span><br><span class="line">LL l, r, s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">        s =  (LL) k * <span class="number">2</span>;</span><br><span class="line">        l = <span class="built_in">sqrt</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (l * (l + <span class="number">1</span>) &lt; s) ++l;</span><br><span class="line">        r = k - (l * (l - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span> - l; ++i) <span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - l; i &lt; n - <span class="number">1</span> - r; ++i) <span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - r; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3760. 最大剩余油量</title>
    <url>/AcWing/acwing-3760-%E6%9C%80%E5%A4%A7%E5%89%A9%E4%BD%99%E6%B2%B9%E9%87%8F/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300001</span>, M = <span class="number">600002</span>;</span><br><span class="line"><span class="type">int</span> n, u, v, cc, w[N], h[N], c[M], e[M], ne[M], idx;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> cc)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, c[idx] = cc, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    LL d1 = <span class="number">0</span>, d2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        LL d = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        <span class="keyword">if</span> (d &lt; c[i]) <span class="keyword">continue</span>;</span><br><span class="line">        d -= c[i];</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= d1) d2 = d1, d1 = d;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d &gt; d2) d2 = d;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, d1 + d2 + w[u]);</span><br><span class="line">    <span class="keyword">return</span> d1 + w[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;cc);</span><br><span class="line">        <span class="built_in">add</span>(u, v, cc), <span class="built_in">add</span>(v, u, cc);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>树形 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3758. 距离零点的时刻</title>
    <url>/AcWing/acwing-3758-%E8%B7%9D%E7%A6%BB%E9%9B%B6%E7%82%B9%E7%9A%84%E6%97%B6%E5%88%BB/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T, h, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; h &gt;&gt; m;</span><br><span class="line">        <span class="type">int</span> ans = (<span class="number">24</span> - h) * <span class="number">60</span> - m;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3779. 相等的和</title>
    <url>/AcWing/acwing-3779-%E7%9B%B8%E7%AD%89%E7%9A%84%E5%92%8C/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="type">int</span> k, n, a[N], s;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, PII&gt; m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[j]);</span><br><span class="line">            s += a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> t = s - a[j];</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(t) &amp;&amp; m[t].first != i) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, m[t].first, m[t].second);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, j);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m[t] = &#123;i, j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 3778. 平衡数组</title>
    <url>/AcWing/acwing-3778-%E5%B9%B3%E8%A1%A1%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>;) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ++i);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 4340. 我讨厌它</title>
    <url>/AcWing/acwing-4340-%E6%88%91%E8%AE%A8%E5%8E%8C%E5%AE%83/</url>
    <content><![CDATA[<p>原题为 HDU 1754 I Hate It。</p>
<div class="tabs" id="acwing-4340-solution"><ul class="nav-tabs"><li class="tab"><a href="#acwing-4340-solution-1">Binary Indexed Tree</a></li><li class="tab active"><a href="#acwing-4340-solution-2">Segment Tree</a></li><li class="tab"><a href="#acwing-4340-solution-3">Segment Tree (vector)</a></li></ul><div class="tab-content"><div class="tab-pane" id="acwing-4340-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, w[N], tr[N];</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        tr[i] = w[i];</span><br><span class="line">        <span class="type">int</span> li = <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; li; j &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            tr[i] = <span class="built_in">max</span>(tr[i], tr[i - j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &gt;= l) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, w[r]);</span><br><span class="line">        <span class="keyword">for</span> (--r; r - <span class="built_in">lowbit</span>(r) &gt; l; r -= <span class="built_in">lowbit</span>(r))</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, tr[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="built_in">sizeof</span>(tr));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">            <span class="built_in">update</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (*op == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(a, b));</span><br><span class="line">            <span class="keyword">else</span> w[a] = b, <span class="built_in">update</span>(a);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="acwing-4340-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>, INF = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b;</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, max_val;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].max_val = <span class="built_in">max</span>(tr[u &lt;&lt; <span class="number">1</span>].max_val, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max_val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a), tr[u].max_val = a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].max_val;</span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>, ans = INF;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == tr[u].r) tr[u].max_val = k;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, x, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (*op == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, a, b));</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">update</span>(<span class="number">1</span>, a, b);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="acwing-4340-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>, INF = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, _n, m, a, b;</span><br><span class="line"><span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tr;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (R &lt; l || L &gt; r) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ans = INF;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = _n + x;</span><br><span class="line">    tr[i] = k;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        i &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        tr[i] = <span class="built_in">max</span>(tr[i &lt;&lt; <span class="number">1</span>], tr[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        _n = n;</span><br><span class="line">        <span class="keyword">while</span> (__builtin_popcount(_n) != <span class="number">1</span>) _n++;</span><br><span class="line">        tr = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span> * _n, INF);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tr[_n + i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = _n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) tr[i] = <span class="built_in">max</span>(tr[i &lt;&lt; <span class="number">1</span>], tr[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">if</span> (*op == <span class="string">&#x27;Q&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, _n - <span class="number">1</span>, a - <span class="number">1</span>, b - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">update</span>(a - <span class="number">1</span>, b);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 4412. 构造数组</title>
    <url>/AcWing/acwing-4412-%E6%9E%84%E9%80%A0%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<div class="tabs" id="acwing-4412-solution"><ul class="nav-tabs"><li class="tab"><a href="#acwing-4412-solution-1">区间合并</a></li><li class="tab"><a href="#acwing-4412-solution-2">差分 + 离散化</a></li><li class="tab active"><a href="#acwing-4412-solution-3">并查集</a></li></ul><div class="tab-content"><div class="tab-pane" id="acwing-4412-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">unordered_map&lt;<span class="type">int</span>, PII&gt; <span class="title">m</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> n, a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">count</span>(a)) &#123;</span><br><span class="line">            m[a].second = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m[a] = &#123;i, i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;PII&gt; <span class="title">v</span><span class="params">(m.size())</span></span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[_, p] : m) v[i++] = p;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> cnt = v.<span class="built_in">size</span>(), pr = v[<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[l, r] = v[i];</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= pr) pr = <span class="built_in">max</span>(pr, r), --cnt;</span><br><span class="line">        <span class="keyword">else</span> pr = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; ++i) ans = ans * <span class="number">2</span> % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="acwing-4412-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">unordered_map&lt;<span class="type">int</span>, PII&gt; <span class="title">m</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> n, a, sub[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">count</span>(a)) &#123;</span><br><span class="line">            m[a].second = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m[a] = &#123;i, i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[_, p] : m) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[l, r] = p;</span><br><span class="line">        ++sub[l &lt;&lt; <span class="number">1</span>], --sub[r &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        sub[i] += sub[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!sub[i - <span class="number">1</span>] &amp;&amp; sub[i]) ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; ++i) ans = ans * <span class="number">2</span> % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="acwing-4412-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">unordered_map&lt;<span class="type">int</span>, PII&gt; <span class="title">m</span><span class="params">(N)</span></span>;</span><br><span class="line"><span class="type">int</span> n, a, f[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] != x) f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">count</span>(a)) &#123;</span><br><span class="line">            m[a].second = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m[a] = &#123;i, i&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) f[i] = i;</span><br><span class="line">    <span class="type">int</span> cnt = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[_, p] : m) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[l, r] = p;</span><br><span class="line">        <span class="type">int</span> pa = <span class="built_in">find</span>(l);</span><br><span class="line">        <span class="keyword">while</span> (pa &lt; r) &#123;</span><br><span class="line">            f[pa] = <span class="built_in">find</span>(pa + <span class="number">1</span>);</span><br><span class="line">            pa = <span class="built_in">find</span>(pa);</span><br><span class="line">            --cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; ++i) ans = ans * <span class="number">2</span> % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>并查集</tag>
        <tag>区间合并</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 4481. 方格探索</title>
    <url>/AcWing/acwing-4481-%E6%96%B9%E6%A0%BC%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2002</span>;</span><br><span class="line"><span class="type">int</span> n, m, r, c, x, y, dist[N][N], ans, ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line">deque&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;r, &amp;c, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[r][c] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">emplace_back</span>(r, c);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [r, c] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> nr = r + ds[i], nc = c + ds[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nr &lt;= <span class="number">0</span> || nr &gt; n || nc &lt;= <span class="number">0</span> || nc &gt; m || s[nr][nc] == <span class="string">&#x27;*&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> w = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) w = <span class="number">1</span>; <span class="comment">// when r + 0 and c + 1.</span></span><br><span class="line">            <span class="keyword">if</span> (dist[nr][nc] &gt; dist[r][c] + w) &#123;</span><br><span class="line">                dist[nr][nc] = dist[r][c] + w;</span><br><span class="line">                <span class="keyword">if</span> (w) q.<span class="built_in">emplace_back</span>(nr, nc);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">emplace_front</span>(nr, nc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> b = dist[i][j];</span><br><span class="line">            <span class="keyword">if</span> (b &lt;= y &amp;&amp; b + c - j &lt;= x)</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>双端队列BFS</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 4868. 数字替换</title>
    <url>/AcWing/acwing-4868-%E6%95%B0%E5%AD%97%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> n, ans = INF;</span><br><span class="line">LL x;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(LL x, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> st[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (LL y = x; y; y /= <span class="number">10</span>) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        st[y % <span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d + n - cnt &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt == n) &#123;</span><br><span class="line">        ans = d;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">2</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (st[i])</span><br><span class="line">            <span class="built_in">dfs</span>(x * i, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;n, &amp;x);</span><br><span class="line">    <span class="built_in">dfs</span>(x, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ans == INF) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>剪枝</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 1228D Complete Tripartite</title>
    <url>/CodeForces/codeforces-1228d-complete-tripartite/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">1</span>, M = <span class="number">3e5</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, h[N], e[M], ne[M], idx, color[N], cnt[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[idx] = v, ne[idx] = h[u], h[u] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in">sizeof</span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        a &lt; b ? <span class="built_in">add</span>(a, b) : <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> invalid = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">fill</span>(color + <span class="number">1</span>, color + <span class="number">1</span> + n, <span class="number">1</span>);</span><br><span class="line">    cnt[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cu = color[u], i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i], &amp;cv = color[v];</span><br><span class="line">            <span class="keyword">if</span> (cv == cu) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cv == <span class="number">1</span>) cv = <span class="number">2</span>, --cnt[<span class="number">0</span>], ++cnt[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cv == <span class="number">2</span>) cv = <span class="number">3</span>, --cnt[<span class="number">1</span>], ++cnt[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    invalid = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invalid) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (invalid ||</span><br><span class="line">        cnt[<span class="number">0</span>] * cnt[<span class="number">1</span>] + cnt[<span class="number">0</span>] * cnt[<span class="number">2</span>] + cnt[<span class="number">1</span>] * cnt[<span class="number">2</span>] != m ||</span><br><span class="line">        !cnt[<span class="number">0</span>] || !cnt[<span class="number">1</span>] || !cnt[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, color[i], i &lt; n ? <span class="string">&#x27; &#x27;</span> : <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 1594D The Number of Imposters</title>
    <url>/CodeForces/codeforces-1594d-the-number-of-imposters/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, i, j, p[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">bool</span> valid, vis[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> c[<span class="number">9</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    p[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calculate the cnt (s1, s2) of vertex of each disjoint set in a bipartite graph.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> &amp;s1, <span class="type">int</span> &amp;s2)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= n) ++s1;</span><br><span class="line">    <span class="keyword">else</span> ++s2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : g[u])</span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            <span class="built_in">dfs</span>(v, s1, s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            p[i] = i, vis[i] = <span class="literal">false</span>;</span><br><span class="line">            g[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>, &amp;i, &amp;j, c);</span><br><span class="line">            <span class="keyword">if</span> (*c == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i + n, j);</span><br><span class="line">                <span class="built_in">merge</span>(i, j + n);</span><br><span class="line">                g[i].<span class="built_in">emplace_back</span>(j + n);</span><br><span class="line">                g[i + n].<span class="built_in">emplace_back</span>(j);</span><br><span class="line">                g[j].<span class="built_in">emplace_back</span>(i + n);</span><br><span class="line">                g[j + n].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, j);</span><br><span class="line">                <span class="built_in">merge</span>(i + n, j + n);</span><br><span class="line">                g[i].<span class="built_in">emplace_back</span>(j);</span><br><span class="line">                g[j].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">                g[i + n].<span class="built_in">emplace_back</span>(j + n);</span><br><span class="line">                g[j + n].<span class="built_in">emplace_back</span>(i + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(i) == <span class="built_in">find</span>(i + n)) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!valid) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, s1 = <span class="number">0</span>, s2 = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (!vis[i] &amp;&amp; !vis[i + n])</span><br><span class="line">                    s1 = <span class="number">0</span>, s2 = <span class="number">0</span>, <span class="built_in">dfs</span>(i, s1, s2), ans += <span class="built_in">max</span>(s1, s2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 1324F Maximum White Subtree</title>
    <url>/CodeForces/codeforces-1324f-maximum-white-subtree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">1</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> n, u, v;</span><br><span class="line"><span class="type">int</span> a[N], h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">        dp[u] = a[u] ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u);</span><br><span class="line">                <span class="keyword">if</span> (dp[v] &gt; <span class="number">0</span>) dp[u] += dp[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; reroot = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="type">int</span> from = dp[u], to = dp[v];</span><br><span class="line">                <span class="keyword">if</span> (to &gt; <span class="number">0</span>) from -= to;</span><br><span class="line">                <span class="keyword">if</span> (from &gt; <span class="number">0</span>) to += from;</span><br><span class="line">                dp[v] = to;</span><br><span class="line">                <span class="built_in">reroot</span>(v, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">reroot</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>换根 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 1691E Number of Groups</title>
    <url>/CodeForces/codeforces-1691e-number-of-groups/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">int</span> t, n, c[N], l[N], r[N], order[N], p[N], sz[N], cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Cmp</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">int</span> y)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r[x] != r[y] ? r[x] &lt; r[y] : x &lt; y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> px = <span class="built_in">find</span>(x), py = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (px != py) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        p[px] = py;</span><br><span class="line">        sz[y] += sz[x];</span><br><span class="line">        --cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        cnt = n;</span><br><span class="line">        vector&lt;set&lt;<span class="type">int</span>, Cmp&gt;&gt; <span class="built_in">open</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c[i], &amp;l[i], &amp;r[i]);</span><br><span class="line">            p[i] = order[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(order, order + n, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> l[x] != l[y] ? l[x] &lt; l[y] : </span><br><span class="line">                (r[x] != r[y] ? r[x] &lt; r[y] : x &lt; y);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> o = order[i];</span><br><span class="line">            <span class="type">int</span> lo = l[o], ro = r[o], co = c[o], xc = co ^ <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> &amp;cs = open[co], &amp;xs = open[xc];</span><br><span class="line">            <span class="keyword">while</span> (cs.<span class="built_in">size</span>() &amp;&amp; r[*cs.<span class="built_in">begin</span>()] &lt; lo) cs.<span class="built_in">erase</span>(cs.<span class="built_in">begin</span>());</span><br><span class="line">            <span class="keyword">while</span> (xs.<span class="built_in">size</span>() &amp;&amp; r[*xs.<span class="built_in">begin</span>()] &lt; lo) xs.<span class="built_in">erase</span>(xs.<span class="built_in">begin</span>());</span><br><span class="line">            cs.<span class="built_in">insert</span>(o);</span><br><span class="line">            <span class="keyword">while</span> (xs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = xs.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="built_in">connect</span>(o, *it);</span><br><span class="line">                <span class="keyword">if</span> (xs.<span class="built_in">size</span>() &gt; <span class="number">1</span>) xs.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Greedy</tag>
        <tag>Graph</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 1691D Max GEQ Sum</title>
    <url>/CodeForces/codeforces-1691d-max-geq-sum/</url>
    <content><![CDATA[<div class="tabs" id="codeforces-1691d-solution"><ul class="nav-tabs"><li class="tab active"><a href="#codeforces-1691d-solution-1">Segment Tree</a></li><li class="tab"><a href="#codeforces-1691d-solution-2">Sparse Table</a></li></ul><div class="tab-content"><div class="tab-pane active" id="codeforces-1691d-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">-1e15</span>;</span><br><span class="line"><span class="type">int</span> t, n, a[N], pg[N], ng[N];</span><br><span class="line">LL ps[N], ss[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextGreater</span><span class="params">()</span> </span>&#123; <span class="comment">// Get and save index of next gerater number into ng[].</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ng[i] = n;</span><br><span class="line">        <span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &lt; a[i]) &#123;</span><br><span class="line">            ng[s.<span class="built_in">top</span>()] = i;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prevGreater</span><span class="params">()</span> </span>&#123; <span class="comment">// Get and save index of previous gerater number into pg[].</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        pg[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &lt; a[i]) &#123;</span><br><span class="line">            pg[s.<span class="built_in">top</span>()] = i;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Query segment tree to get maximum prefix/suffix sum within a[L, R].</span></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(vector&lt;LL&gt; &amp;tree, <span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (R &lt; l || L &gt; r) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tree[u];</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL ans = INF;</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(tree, u &lt;&lt; <span class="number">1</span>, l, mid, L, R));</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(tree, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        ps[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) ps[i] = ps[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        ss[n - <span class="number">1</span>] = a[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) ss[i] = ss[i + <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="comment">// Round off n to next power of 2.</span></span><br><span class="line">        <span class="type">int</span> _n = n;</span><br><span class="line">        <span class="keyword">while</span> (__builtin_popcount(_n) != <span class="number">1</span>) _n++;</span><br><span class="line">        <span class="comment">// Two segment trees to store maximum prefix/suffix sum.</span></span><br><span class="line">        <span class="function">vector&lt;LL&gt; <span class="title">pt</span><span class="params">(<span class="number">2</span> * _n, INF)</span>, <span class="title">st</span><span class="params">(<span class="number">2</span> * _n, INF)</span></span>;</span><br><span class="line">        <span class="comment">// Initiate value of root nodes.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) pt[_n + i] = ps[i], st[_n + i] = ss[i];</span><br><span class="line">        <span class="comment">// Push up.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = _n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            pt[i] = <span class="built_in">max</span>(pt[i &lt;&lt; <span class="number">1</span>], pt[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">            st[i] = <span class="built_in">max</span>(st[i &lt;&lt; <span class="number">1</span>], st[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">nextGreater</span>();</span><br><span class="line">        <span class="built_in">prevGreater</span>();</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            LL rightMax = <span class="built_in">query</span>(pt, <span class="number">1</span>, <span class="number">0</span>, _n - <span class="number">1</span>, i + <span class="number">1</span>, ng[i] - <span class="number">1</span>) - ps[i];</span><br><span class="line">            <span class="keyword">if</span> (rightMax &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            LL leftMax = <span class="built_in">query</span>(st, <span class="number">1</span>, <span class="number">0</span>, _n - <span class="number">1</span>, pg[i] + <span class="number">1</span>, i - <span class="number">1</span>) - ss[i];</span><br><span class="line">            <span class="keyword">if</span> (leftMax &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(flag ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="codeforces-1691d-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>, M = <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">-1e15</span>;</span><br><span class="line"><span class="type">int</span> t, n, a[N], pg[N], ng[N];</span><br><span class="line">LL ps[N], ss[N], f[<span class="number">2</span>][N][M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextGreater</span><span class="params">()</span> </span>&#123; <span class="comment">// Get and save index of next gerater number into ng[].</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ng[i] = n;</span><br><span class="line">        <span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &lt; a[i]) &#123;</span><br><span class="line">            ng[s.<span class="built_in">top</span>()] = i;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prevGreater</span><span class="params">()</span> </span>&#123; <span class="comment">// Get and save index of previous gerater number into pg[].</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        pg[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &lt; a[i]) &#123;</span><br><span class="line">            pg[s.<span class="built_in">top</span>()] = i;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!j) f[<span class="number">0</span>][i][j] = ps[i - <span class="number">1</span>], f[<span class="number">1</span>][i][j] = ss[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f[<span class="number">0</span>][i][j] = <span class="built_in">max</span>(f[<span class="number">0</span>][i][j - <span class="number">1</span>], f[<span class="number">0</span>][i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]),</span><br><span class="line">                f[<span class="number">1</span>][i][j] = <span class="built_in">max</span>(f[<span class="number">1</span>][i][j - <span class="number">1</span>], f[<span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> t, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f[t][l][k], f[t][r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        ps[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) ps[i] = ps[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        ss[n - <span class="number">1</span>] = a[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) ss[i] = ss[i + <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="built_in">nextGreater</span>();</span><br><span class="line">        <span class="built_in">prevGreater</span>();</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            LL rightMax = <span class="built_in">query</span>(<span class="number">0</span>, i + <span class="number">2</span>, ng[i]) - ps[i];</span><br><span class="line">            <span class="keyword">if</span> (rightMax &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            LL leftMax = <span class="built_in">query</span>(<span class="number">1</span>, pg[i] + <span class="number">2</span>, i) - ss[i];</span><br><span class="line">            <span class="keyword">if</span> (leftMax &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(flag ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Data Structures</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 438D The Child and Sequence</title>
    <url>/CodeForces/codeforces-438d-the-child-and-sequence/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, m, t, l, r, x, a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, maxn;</span><br><span class="line">    LL sum;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].maxn = <span class="built_in">max</span>(tr[u &lt;&lt; <span class="number">1</span>].maxn, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxn);</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[u].sum = a[l], tr[u].maxn = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].maxn &lt; x) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == tr[u].r) &#123;</span><br><span class="line">        tr[u].maxn %= x, tr[u].sum = tr[u].maxn;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, x);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == tr[u].r) &#123;</span><br><span class="line">        tr[u].maxn = tr[u].sum = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, k, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, k, v);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;x);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, l, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>势能线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 431E Chemistry Experiment</title>
    <url>/CodeForces/codeforces-431e-chemistry-experiment/</url>
    <content><![CDATA[<div class="tabs" id="codeforces-431e-solution"><ul class="nav-tabs"><li class="tab"><a href="#codeforces-431e-solution-1">线段树</a></li><li class="tab active"><a href="#codeforces-431e-solution-2">线段树(动态开点)</a></li></ul><div class="tab-content"><div class="tab-pane" id="codeforces-431e-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> EPS = <span class="number">1e-5</span>;</span><br><span class="line"><span class="type">int</span> n, m, op, x, a[N];</span><br><span class="line">LL val;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt; nums;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, cnt;</span><br><span class="line">    LL sum;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span> &#123;</span><br><span class="line">    <span class="type">int</span> op, x;</span><br><span class="line">    LL val;</span><br><span class="line">&#125; ques[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].cnt = tr[u &lt;&lt; <span class="number">1</span>].cnt + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cnt;</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, LL&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> &#123;tr[u].cnt, tr[u].sum&#125;;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>, mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [cnt, sum] = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        c = cnt, s = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [cnt, sum] = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        c += cnt, s += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;c, s&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> l = <span class="number">0</span>, r = INF, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= EPS) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">upper_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), mid) - nums.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">auto</span> [cnt, sum] = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, p);</span><br><span class="line">        <span class="keyword">if</span> (cnt * mid &gt;= sum + x) r = res = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.5f\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == tr[u].r) &#123;</span><br><span class="line">        tr[u].cnt += k, tr[u].sum += (nums[x - <span class="number">1</span>] * k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;x, &amp;val);</span><br><span class="line">            ques[i] = &#123;<span class="number">1</span>, x, val&#125;;</span><br><span class="line">            nums.<span class="built_in">push_back</span>(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;val);</span><br><span class="line">            ques[i] = &#123;<span class="number">0</span>, <span class="number">0</span>, val&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, nums.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">find</span>(a[i]) + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[op, x, val] = ques[i];</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">find</span>(a[x]) + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            a[x] = val;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="built_in">find</span>(a[x]) + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="built_in">solve</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="codeforces-431e-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">const</span> LL INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> EPS = <span class="number">1e-5</span>;</span><br><span class="line"><span class="type">int</span> n, m, op, x, a[N], mx = <span class="number">1e9</span> + <span class="number">10</span>, idx = <span class="number">1</span>;</span><br><span class="line">LL val;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, cnt;</span><br><span class="line">    LL sum;</span><br><span class="line">&#125; tr[N * <span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].cnt = tr[tr[u].l].cnt + tr[tr[u].r].cnt;</span><br><span class="line">    tr[u].sum = tr[tr[u].l].sum + tr[tr[u].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, LL&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">double</span> L, <span class="type">double</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> &#123;tr[u].cnt, tr[u].sum&#125;;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>, mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid &amp;&amp; tr[u].l) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [cnt, sum] = <span class="built_in">query</span>(tr[u].l, l, mid, L, R);</span><br><span class="line">        c = cnt, s = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid &amp;&amp; tr[u].r) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [cnt, sum] = <span class="built_in">query</span>(tr[u].r, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">        c += cnt, s += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;c, s&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> l = <span class="number">0</span>, r = INF;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= EPS) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid &gt;= mx) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tr[<span class="number">1</span>].cnt * mid &gt;= tr[<span class="number">1</span>].sum + x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> [cnt, sum] = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">0</span>, mx, <span class="number">0</span>, mid);</span><br><span class="line">            <span class="keyword">if</span> (cnt * mid &gt;= sum + x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.5f\n&quot;</span>, l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[u].cnt += k, tr[u].sum += x * k;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tr[u].l) tr[u].l = ++idx;</span><br><span class="line">            <span class="built_in">modify</span>(tr[u].l, l, mid, x, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tr[u].r) tr[u].r = ++idx;</span><br><span class="line">            <span class="built_in">modify</span>(tr[u].r, mid + <span class="number">1</span>, r, x, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, mx, a[i], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;x, &amp;val);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, mx, a[x], <span class="number">-1</span>);</span><br><span class="line">            a[x] = val;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">0</span>, mx, a[x], <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;val);</span><br><span class="line">            <span class="built_in">solve</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>权值线段树</tag>
        <tag>Discretization</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 522D Closest Equals</title>
    <url>/CodeForces/codeforces-522d-closest-equals/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reference: https://www.cnblogs.com/AC-Phoenix/p/4347347.html</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], l[N], r[N], order[N], ans[N], tr[N];</span><br><span class="line">unordered_map&lt;<span class="type">int</span> , <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n ,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l[i], &amp;r[i]), order[i] = i;</span><br><span class="line">    <span class="built_in">memset</span>(tr, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(tr));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    <span class="built_in">sort</span>(order + <span class="number">1</span>, order + <span class="number">1</span> + m, [&amp;] (<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        <span class="keyword">return</span> r[i] &lt; r[j]; <span class="comment">// sort queries by r.</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (i = j = <span class="number">1</span>; i &lt;= m; ++i) &#123; <span class="comment">// for each query.</span></span><br><span class="line">        <span class="type">int</span> o = order[i];</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r[o]) &#123; <span class="comment">// deal with numbers within [1, r].</span></span><br><span class="line">            <span class="keyword">if</span> (mp[a[j]]) &#123; <span class="comment">// have met a[j] before.</span></span><br><span class="line">                <span class="type">int</span> pos = mp[a[j]];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = pos; k; k -= k &amp; -k)</span><br><span class="line">                    <span class="comment">// stored the info (min value) into binary indexed tree.</span></span><br><span class="line">                    tr[k] = <span class="built_in">min</span>(tr[k], j - pos);</span><br><span class="line">            &#125;</span><br><span class="line">            mp[a[j]] = j;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = l[o]; k &lt;= r[o]; k += k &amp; -k)</span><br><span class="line">            ans[o] = <span class="built_in">min</span>(ans[o], tr[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i] == INF? <span class="number">-1</span>: ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 590C Three States</title>
    <url>/CodeForces/codeforces-590c-three-states/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, dist[<span class="number">3</span>][N][N], ds[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, ans = INF;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="string">&#x27;1&#x27;</span>; c &lt;= <span class="string">&#x27;3&#x27;</span>; ++c) &#123;</span><br><span class="line">        <span class="type">int</span> idx = c - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        deque&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == c) &#123;</span><br><span class="line">                    dist[idx][i][j] = <span class="number">0</span>;</span><br><span class="line">                    q.<span class="built_in">emplace_back</span>(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m || g[nx][ny] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> d = g[nx][ny] == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (dist[idx][nx][ny] &gt; dist[idx][x][y] + d) &#123;</span><br><span class="line">                    dist[idx][nx][ny] = dist[idx][x][y] + d;</span><br><span class="line">                    <span class="keyword">if</span> (d) q.<span class="built_in">emplace_back</span>(nx, ny);</span><br><span class="line">                    <span class="keyword">else</span> q.<span class="built_in">emplace_front</span>(nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (dist[<span class="number">0</span>][i][j] != INF &amp;&amp; dist[<span class="number">1</span>][i][j] != INF &amp;&amp; dist[<span class="number">2</span>][i][j] != INF)</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;.&#x27;</span>) ans = <span class="built_in">min</span>(ans, dist[<span class="number">0</span>][i][j] + dist[<span class="number">1</span>][i][j] + dist[<span class="number">2</span>][i][j] - <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">else</span> ans = <span class="built_in">min</span>(ans, dist[<span class="number">0</span>][i][j] + dist[<span class="number">1</span>][i][j] + dist[<span class="number">2</span>][i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans == INF ? <span class="number">-1</span> : ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>0-1 BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 915E Physical Education Lessons</title>
    <url>/CodeForces/codeforces-915e-physical-education-lessons/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> v;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v) : <span class="built_in">l</span>(l), <span class="built_in">r</span>(r), <span class="built_in">v</span>(v) &#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; o.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, q, s;</span><br><span class="line">set&lt;Node&gt; tree;</span><br><span class="line">set&lt;Node&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = tree.<span class="built_in">lower_bound</span>(&#123;pos, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span> (it != tree.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    --it;</span><br><span class="line">    <span class="keyword">auto</span> [l, r, v] = *it;</span><br><span class="line">    tree.<span class="built_in">erase</span>(it);</span><br><span class="line">    tree.<span class="built_in">insert</span>(&#123;l, pos - <span class="number">1</span>, v&#125;);</span><br><span class="line">    <span class="keyword">return</span> tree.<span class="built_in">insert</span>(&#123;pos, r, v&#125;).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">split</span>(r + <span class="number">1</span>), begin = <span class="built_in">split</span>(l);</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>, len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = begin; it != end; ++it) &#123;</span><br><span class="line">        len += (it-&gt;r - it-&gt;l + <span class="number">1</span>);</span><br><span class="line">        tot += it-&gt;v * (it-&gt;r - it-&gt;l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tree.<span class="built_in">erase</span>(begin, end);</span><br><span class="line">    tree.<span class="built_in">insert</span>(&#123;l, r, v&#125;);</span><br><span class="line">    <span class="keyword">if</span> (v) s += (len - tot);</span><br><span class="line">    <span class="keyword">else</span> s -= tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    tree.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, n, <span class="number">1</span>&#125;);</span><br><span class="line">    s = n;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">        <span class="built_in">assign</span>(l, r, k != <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Ordered Set</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 896C Willem, Chtholly and Seniorious</title>
    <url>/CodeForces/codeforces-896c-willem-chtholly-and-seniorious/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    LL l, r;</span><br><span class="line">    <span class="keyword">mutable</span> LL v;</span><br><span class="line">    <span class="built_in">Node</span>(LL l, LL r, LL v) : <span class="built_in">l</span>(l), <span class="built_in">r</span>(r), <span class="built_in">v</span>(v) &#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Node &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; o.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">LL n, m, seed, vmax;</span><br><span class="line">set&lt;Node&gt; tree;</span><br><span class="line"><span class="function">LL <span class="title">rnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL ans = seed;</span><br><span class="line">    seed = (seed * <span class="number">7</span> + <span class="number">13</span>) % <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL k, LL p)</span> </span>&#123;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if pos isn&#x27;t a range start, then split its range from pos into [l, pos - 1], [pos, r].</span></span><br><span class="line">set&lt;Node&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(LL pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = tree.<span class="built_in">lower_bound</span>(&#123;pos, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span> (it != tree.<span class="built_in">end</span>() &amp;&amp; it-&gt;l == pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    --it;</span><br><span class="line">    <span class="keyword">auto</span> [l, r, v] = *it;</span><br><span class="line">    tree.<span class="built_in">erase</span>(it);</span><br><span class="line">    tree.<span class="built_in">insert</span>(&#123;l, pos - <span class="number">1</span>, v&#125;);</span><br><span class="line">    <span class="keyword">return</span> tree.<span class="built_in">insert</span>(&#123;pos, r, v&#125;).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(LL l, LL r, LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = <span class="built_in">split</span>(l); it != end; ++it)</span><br><span class="line">        it-&gt;v += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(LL l, LL r, LL v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">split</span>(r + <span class="number">1</span>), begin = <span class="built_in">split</span>(l);</span><br><span class="line">    tree.<span class="built_in">erase</span>(begin, end);</span><br><span class="line">    tree.<span class="built_in">insert</span>(&#123;l, r, v&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">kth</span><span class="params">(LL l, LL r, LL k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">    vector&lt;pair&lt;LL, LL&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = <span class="built_in">split</span>(l); it != end; ++it)</span><br><span class="line">        v.<span class="built_in">emplace_back</span>(it-&gt;v, it-&gt;r - it-&gt;l + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        k -= v[i].second;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> v[i].first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sumOfPow</span><span class="params">(LL l, LL r, LL x, LL y)</span> </span>&#123;</span><br><span class="line">    LL tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> end = <span class="built_in">split</span>(r + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = <span class="built_in">split</span>(l); it != end; ++it)</span><br><span class="line">        tot = (tot + <span class="built_in">qpow</span>(it-&gt;v, x, y) * (it-&gt;r - it-&gt;l + <span class="number">1</span>)) % y;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;seed, &amp;vmax);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="built_in">rnd</span>();</span><br><span class="line">        tree.<span class="built_in">insert</span>(&#123;i, i, r % vmax + <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        LL op = <span class="built_in">rnd</span>() % <span class="number">4</span> + <span class="number">1</span>, l = <span class="built_in">rnd</span>() % n + <span class="number">1</span>, r = <span class="built_in">rnd</span>() % n + <span class="number">1</span>, x, y;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>) x = <span class="built_in">rnd</span>() % (r - l + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> x = <span class="built_in">rnd</span>() % vmax + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">4</span>) y = <span class="built_in">rnd</span>() % vmax + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">add</span>(l, r, x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">assign</span>(l, r, x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">kth</span>(l, r, x));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">sumOfPow</span>(l, r, x ,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>Ordered Set</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces 708C Centroids</title>
    <url>/CodeForces/codeforces-708c-centroids/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>换根 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeChef Chef and Reversing</title>
    <url>/CodeChef/codechef-chef-and-reversing/</url>
    <content><![CDATA[<div class="tabs" id="codechef-chef-and-reversing-solution"><ul class="nav-tabs"><li class="tab"><a href="#codechef-chef-and-reversing-solution-1">Dijkstra</a></li><li class="tab"><a href="#codechef-chef-and-reversing-solution-2">SPFA</a></li><li class="tab active"><a href="#codechef-chef-and-reversing-solution-3">0-1 BFS</a></li></ul><div class="tab-content"><div class="tab-pane" id="codechef-chef-and-reversing-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, m, x, y, dist[N];</span><br><span class="line">vector&lt;PII&gt; g[N];</span><br><span class="line">priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        g[x].<span class="built_in">emplace_back</span>(y, <span class="number">0</span>);</span><br><span class="line">        g[y].<span class="built_in">emplace_back</span>(x, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> d = p.first, u = p.second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : g[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = x.first, w = x.second;</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; d + w) &#123;</span><br><span class="line">                dist[v] = d + w;</span><br><span class="line">                q.<span class="built_in">emplace</span>(dist[v], v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dist[n] == <span class="number">0x3f3f3f3f</span> ? <span class="number">-1</span> : dist[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="codechef-chef-and-reversing-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, m, x, y, dist[N];</span><br><span class="line">vector&lt;PII&gt; g[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        g[x].<span class="built_in">emplace_back</span>(y, <span class="number">0</span>);</span><br><span class="line">        g[y].<span class="built_in">emplace_back</span>(x, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : g[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = x.first, w = x.second;</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v])</span><br><span class="line">                    q.<span class="built_in">emplace</span>(v), vis[v] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dist[n] == <span class="number">0x3f3f3f3f</span> ? <span class="number">-1</span> : dist[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="codechef-chef-and-reversing-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, m, x, y, dist[N];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; g[N];</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        g[x].<span class="built_in">emplace_back</span>(y, <span class="number">0</span>);</span><br><span class="line">        g[y].<span class="built_in">emplace_back</span>(x, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    q.<span class="built_in">emplace_back</span>(<span class="number">1</span>);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : g[u]) &#123;</span><br><span class="line">            <span class="type">int</span> v = x.first, w = x.second;</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</span><br><span class="line">                dist[v] = dist[u] + w;</span><br><span class="line">                <span class="keyword">if</span> (w) q.<span class="built_in">emplace_back</span>(v);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">emplace_front</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dist[n] == <span class="number">0x3f3f3f3f</span> ? <span class="number">-1</span> : dist[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>CodeChef</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Array</tag>
        <tag>Breadth-first Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Matrix</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeChef Diameter of Tree</title>
    <url>/CodeChef/codechef-diameter-of-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> T, n, u, v, h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> ans[N], down[N], f[N], up[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; a) b = a, a = x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; b) b = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b, <span class="type">int</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; a) c = b, b = a, a = x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; b) c = b, b = x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; c) c = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>; <span class="comment">// 最远、次远距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="built_in">update</span>(down[v] + <span class="number">1</span>, a, b); <span class="comment">// 向下最远距离</span></span><br><span class="line">        f[u] = <span class="built_in">max</span>(f[u], f[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    down[u] = a;</span><br><span class="line">    f[u] = <span class="built_in">max</span>(f[u], a + b); <span class="comment">// 子树直径</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lf = <span class="number">0</span>, rf = <span class="number">0</span>, ld = <span class="number">-1</span>, md = <span class="number">-1</span>, rd = <span class="number">-1</span>, res = ans[u]; <span class="comment">// 向上子树最长直径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        ans[u] = <span class="built_in">max</span>(ans[u], f[v]);</span><br><span class="line">        <span class="built_in">update</span>(f[v], lf, rf); <span class="comment">// 子树最长、次长直径</span></span><br><span class="line">        <span class="built_in">push_up</span>(down[v], ld, md, rd); <span class="comment">// 子节点向下最远距离</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        up[v] = <span class="built_in">max</span>(up[u] + <span class="number">1</span>, ld == down[v] ? md + <span class="number">2</span> : ld + <span class="number">2</span>); <span class="comment">// 向上最远距离</span></span><br><span class="line">        ans[v] = <span class="built_in">max</span>(&#123;res, lf == f[v] ? rf : lf, (ld == down[v] ? md : ld) + up[u] + <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span> (ld == down[v]) ans[v] = <span class="built_in">max</span>(ans[v], md + rd + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (md == down[v]) ans[v] = <span class="built_in">max</span>(ans[v], ld + rd + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> ans[v] = <span class="built_in">max</span>(ans[v], ld + md + <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">dfs2</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="type">int</span> s = (n + <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">0</span>, s);</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, s);</span><br><span class="line">        <span class="built_in">memset</span>(down, <span class="number">0</span>, s);</span><br><span class="line">        <span class="built_in">memset</span>(up, <span class="number">0</span>, s);</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, s);</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="built_in">add</span>(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">dfs2</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeChef</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ 1166 敌兵布阵</title>
    <url>/HDUOJ/hduoj-1166-%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50001</span>;</span><br><span class="line"><span class="type">int</span> T, n, x, y, a[N], c[N];</span><br><span class="line"><span class="type">char</span> s[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        c[i] += k;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s += c[i];</span><br><span class="line">        i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= T; ++t) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            <span class="built_in">update</span>(i, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>, t);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sum</span>(y) - <span class="built_in">sum</span>(x - <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">update</span>(x, y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">update</span>(x, -y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>HDUOJ 2844 Coins</title>
    <url>/HDUOJ/hduoj-2844-coins/</url>
    <content><![CDATA[<p>原题：<a href="http://poj.org/problem?id=1742">POJ 1742 Coins</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>, M = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], s[N], num[M], f[M], ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m), n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i]);</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="literal">false</span>, <span class="built_in">sizeof</span>(f));</span><br><span class="line">        f[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="built_in">sizeof</span>(num));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (!f[j] &amp;&amp; f[j - w[i]] &amp;&amp; num[j - w[i]] &lt; s[i]) &#123;</span><br><span class="line">                    f[j] = <span class="literal">true</span>;</span><br><span class="line">                    num[j] = num[j - w[i]] + <span class="number">1</span>;</span><br><span class="line">                    ++ans;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HDUOJ</category>
      </categories>
      <tags>
        <tag>多重背包</tag>
        <tag>男人八题</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ 130. 树状数组 1 ：单点修改，区间查询</title>
    <url>/LibreOJ/libreoj-130-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-1-%EF%BC%9A%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"><span class="type">int</span> n, q, x, y, z;</span><br><span class="line">LL c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        c[i] += k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        s += c[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        c[i] += x;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= n)</span><br><span class="line">            c[j] += c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">add</span>(y, z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(z) - <span class="built_in">getSum</span>(y - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LibreOJ</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ 131. 树状数组 2 ：区间修改，单点查询</title>
    <url>/LibreOJ/libreoj-131-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-2-%EF%BC%9A%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8D%95%E7%82%B9%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"><span class="type">int</span> n, q, x, y, z;</span><br><span class="line">LL c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        c[i] += k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        s += c[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">        c[i] += y - x;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= n)</span><br><span class="line">            c[j] += c[i];</span><br><span class="line">        x = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            <span class="built_in">add</span>(x, z);</span><br><span class="line">            <span class="built_in">add</span>(y + <span class="number">1</span>, -z);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LibreOJ</category>
      </categories>
      <tags>
        <tag>Binary Indexed Tree</tag>
        <tag>Template</tag>
        <tag>Difference</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ 132. 树状数组 3 ：区间修改，区间查询</title>
    <url>/LibreOJ/libreoj-132-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-3-%EF%BC%9A%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"><span class="type">int</span> n, q, x, y, z;</span><br><span class="line">LL s1[N], s2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, LL k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = i; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        s1[i] += k, s2[i] += k * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = i + <span class="number">1</span>; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        s += s1[i] * x - s2[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">        LL k = y - x;</span><br><span class="line">        s1[i] += k, s2[i] += k * i;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= n)</span><br><span class="line">            s1[j] += s1[i], s2[j] += s2[i];</span><br><span class="line">        x = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            <span class="built_in">add</span>(x, z);</span><br><span class="line">            <span class="built_in">add</span>(y + <span class="number">1</span>, -z);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(y) - <span class="built_in">getSum</span>(x - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LibreOJ</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
        <tag>Template</tag>
        <tag>Difference</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ 133. 二维树状数组 1：单点修改，区间查询</title>
    <url>/LibreOJ/libreoj-133-%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-1%EF%BC%9A%E5%8D%95%E7%82%B9%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4097</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, c, d;</span><br><span class="line">LL tree[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">lowbit</span>(j))</span><br><span class="line">            tree[i][j] += k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j))</span><br><span class="line">            s += tree[i][j];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            <span class="built_in">add</span>(a, b, c);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(c, d) - <span class="built_in">getSum</span>(a - <span class="number">1</span>, d) - <span class="built_in">getSum</span>(c, b - <span class="number">1</span>) + <span class="built_in">getSum</span>(a - <span class="number">1</span>, b - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LibreOJ</category>
      </categories>
      <tags>
        <tag>Binary Indexed Tree</tag>
        <tag>Template</tag>
        <tag>CDQ&#39;s Divide-and-conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ 134. 二维树状数组 2：区间修改，单点查询</title>
    <url>/LibreOJ/libreoj-134-%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-2%EF%BC%9A%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8D%95%E7%82%B9%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4097</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, c, d, k;</span><br><span class="line">LL tree[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">lowbit</span>(j))</span><br><span class="line">            tree[i][j] += k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j))</span><br><span class="line">            s += tree[i][j];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;k);</span><br><span class="line">            <span class="built_in">add</span>(a, b, k);</span><br><span class="line">            <span class="built_in">add</span>(a, d + <span class="number">1</span>, -k);</span><br><span class="line">            <span class="built_in">add</span>(c + <span class="number">1</span>, b, -k);</span><br><span class="line">            <span class="built_in">add</span>(c + <span class="number">1</span>, d + <span class="number">1</span>, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LibreOJ</category>
      </categories>
      <tags>
        <tag>Binary Indexed Tree</tag>
        <tag>Template</tag>
        <tag>Difference</tag>
        <tag>CDQ&#39;s Divide-and-conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>LibreOJ 135. 二维树状数组 3：区间修改，区间查询</title>
    <url>/LibreOJ/libreoj-135-%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-3%EF%BC%9A%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2049</span>;</span><br><span class="line"><span class="type">int</span> n, m, a, b, c, d, k;</span><br><span class="line">LL c1[N][N], c2[N][N], c3[N][N], c4[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt;= m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            c1[i][j] += k;</span><br><span class="line">            c2[i][j] += x * k;</span><br><span class="line">            c3[i][j] += y * k;</span><br><span class="line">            c4[i][j] += x * y * k;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    LL s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j))</span><br><span class="line">            s += c1[i][j] * (x + <span class="number">1</span>) * (y + <span class="number">1</span>) - c2[i][j] * (y + <span class="number">1</span>) - c3[i][j] * (x + <span class="number">1</span>) + c4[i][j];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d, &amp;k);</span><br><span class="line">            <span class="built_in">add</span>(a, b, k);</span><br><span class="line">            <span class="built_in">add</span>(a, d + <span class="number">1</span>, -k);</span><br><span class="line">            <span class="built_in">add</span>(c + <span class="number">1</span>, b, -k);</span><br><span class="line">            <span class="built_in">add</span>(c + <span class="number">1</span>, d + <span class="number">1</span>, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(c, d) - <span class="built_in">getSum</span>(a - <span class="number">1</span>, d) - <span class="built_in">getSum</span>(c, b - <span class="number">1</span>) + <span class="built_in">getSum</span>(a - <span class="number">1</span>, b - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LibreOJ</category>
      </categories>
      <tags>
        <tag>Binary Indexed Tree</tag>
        <tag>Template</tag>
        <tag>Difference</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2352 Stars</title>
    <url>/POJ/poj-2352-stars/</url>
    <content><![CDATA[<div class="tabs" id="poj-2352-solution"><ul class="nav-tabs"><li class="tab active"><a href="#poj-2352-solution-1">Binary Search</a></li><li class="tab"><a href="#poj-2352-solution-2">Segement Tree</a></li><li class="tab"><a href="#poj-2352-solution-3">Binary Indexed Tree</a></li></ul><div class="tab-content"><div class="tab-pane active" id="poj-2352-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15000</span>;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="type">int</span> n, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; xs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">upper_bound</span>(xs.<span class="built_in">begin</span>(), xs.<span class="built_in">end</span>(), x);</span><br><span class="line">        <span class="type">int</span> idx = it - xs.<span class="built_in">begin</span>();</span><br><span class="line">        ++ans[idx];</span><br><span class="line">        xs.<span class="built_in">insert</span>(it, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="poj-2352-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15000</span>, X = <span class="number">32002</span>;</span><br><span class="line"><span class="type">int</span> ans[N], tree[X &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> n, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ++tree[p];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">update</span>(p * <span class="number">2</span>, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tree[p] = tree[p * <span class="number">2</span>] + tree[p * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= l &amp;&amp; r &lt;= j) <span class="keyword">return</span> tree[p];</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= mid) sum += <span class="built_in">query</span>(p * <span class="number">2</span>, l, mid, i, j);</span><br><span class="line">    <span class="keyword">if</span> (j &gt; mid) sum += <span class="built_in">query</span>(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, i, j);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        ++x;</span><br><span class="line">        ++ans[<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, X - <span class="number">1</span>, <span class="number">1</span>, x)];</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, X - <span class="number">1</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="poj-2352-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15000</span>, X = <span class="number">32002</span>;</span><br><span class="line"><span class="type">int</span> c[X], ans[N];</span><br><span class="line"><span class="type">int</span> n, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= X) &#123;</span><br><span class="line">        c[i] += k;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s += c[i];</span><br><span class="line">        i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="built_in">add</span>(x, <span class="number">1</span>);</span><br><span class="line">        ++ans[<span class="built_in">query</span>(x) - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1151 Atlantis</title>
    <url>/POJ/poj-1151-atlantis/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> n, k, tot;</span><br><span class="line"><span class="type">double</span> ans, x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y1, y2;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Line &amp;o) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; o.x; <span class="comment">// scan from left to right.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; line[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, cnt; <span class="comment">// left, right, count of covered times.</span></span><br><span class="line">    <span class="type">double</span> len; <span class="comment">// length/height of covered range.</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">double</span> ys[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(ys + <span class="number">1</span>, ys + <span class="number">1</span> + tot, x) - ys;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pushup to the root to make sure len is maintained properly.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].cnt) tr[u].len = ys[tr[u].r + <span class="number">1</span>] - ys[tr[u].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[u].l != tr[u].r) &#123;</span><br><span class="line">        <span class="comment">// (u &lt;&lt; 1) when tr[u].t == tr[u].r (leaf node) could cause segfault.</span></span><br><span class="line">        tr[u].len = tr[u &lt;&lt; <span class="number">1</span>].len + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].len;</span><br><span class="line">    &#125; <span class="keyword">else</span> tr[u].len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// no need to pushup on building coz all cnt/len is 0.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l != r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// the query is against the whole tree every time,</span></span><br><span class="line"><span class="comment">// and update for every single range is paired and comes with +d first, -d next.</span></span><br><span class="line"><span class="comment">// so no need to push down.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line">        tr[u].cnt += d;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, l, r, d);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf%lf&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">            line[i] = &#123;x1, y1, y2, <span class="number">1</span>&#125;, line[i + n] = &#123;x2, y1, y2, <span class="number">-1</span>&#125;;</span><br><span class="line">            ys[i] = y1, ys[i + n] = y2;</span><br><span class="line">        &#125;</span><br><span class="line">        n *= <span class="number">2</span>; <span class="comment">// for convenience.</span></span><br><span class="line">        <span class="built_in">sort</span>(ys + <span class="number">1</span>, ys + <span class="number">1</span> + n);</span><br><span class="line">        tot = <span class="built_in">unique</span>(ys + <span class="number">1</span>, ys + <span class="number">1</span> + n) - ys - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, tot - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sort</span>(line + <span class="number">1</span>, line + <span class="number">1</span> + n);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="built_in">get</span>(line[<span class="number">1</span>].y1), <span class="built_in">get</span>(line[<span class="number">1</span>].y2) - <span class="number">1</span>, line[<span class="number">1</span>].d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans += tr[<span class="number">1</span>].len * (line[i].x - line[i - <span class="number">1</span>].x);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, <span class="built_in">get</span>(line[i].y1), <span class="built_in">get</span>(line[i].y2) - <span class="number">1</span>, line[i].d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Test case #%d\n&quot;</span>, ++k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Total explored area: %.2f\n\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>线段树</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3264 Balanced Lineup</title>
    <url>/POJ/poj-3264-balanced-lineup/</url>
    <content><![CDATA[<div class="tabs" id="poj-3264-solution"><ul class="nav-tabs"><li class="tab"><a href="#poj-3264-solution-1">Binary Indexed Tree</a></li><li class="tab active"><a href="#poj-3264-solution-2">Segment Tree</a></li><li class="tab"><a href="#poj-3264-solution-3">Sparse Table</a></li></ul><div class="tab-content"><div class="tab-pane" id="poj-3264-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, w[N], l, r, t1[N], t2[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        t1[i] = t2[i] = w[i];</span><br><span class="line">        <span class="type">int</span> li = <span class="built_in">lowbit</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; li; j &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            t1[i] = <span class="built_in">min</span>(t1[i], t1[i - j]), t2[i] = <span class="built_in">max</span>(t2[i], t2[i - j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_max</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &gt;= l) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, w[r]);</span><br><span class="line">        <span class="keyword">for</span> (--r; r - <span class="built_in">lowbit</span>(r) &gt; l; r -= <span class="built_in">lowbit</span>(r))</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, t2[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_min</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">while</span> (r &gt;= l) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, w[r]);</span><br><span class="line">        <span class="keyword">for</span> (--r; r - <span class="built_in">lowbit</span>(r) &gt; l; r -= <span class="built_in">lowbit</span>(r))</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, t1[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(t1, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(t1));</span><br><span class="line">    <span class="built_in">memset</span>(t2, <span class="number">-0x3f</span>, <span class="built_in">sizeof</span>(t2));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">        <span class="built_in">update</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">find_max</span>(l, r) - <span class="built_in">find_min</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="poj-3264-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, h, l, r;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, min_val, max_val;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h), tr[u].min_val = tr[u].max_val = h;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        tr[u].min_val = <span class="built_in">min</span>(tr[u &lt;&lt; <span class="number">1</span>].min_val, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].min_val);</span><br><span class="line">        tr[u].max_val = <span class="built_in">max</span>(tr[u &lt;&lt; <span class="number">1</span>].max_val, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].max_val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_max</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].max_val;</span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>, ans = -INF;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">find_max</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">find_max</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_min</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].min_val;</span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>, ans = INF;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">find_min</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">find_min</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">find_max</span>(<span class="number">1</span>, l, r) - <span class="built_in">find_min</span>(<span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="poj-3264-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>, M = <span class="number">19</span>;</span><br><span class="line"><span class="type">int</span> n, m, l, r, h[N], f1[N][M], f2[N][M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!j) f1[i][j] = f2[i][j] = h[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f1[i][j] = <span class="built_in">min</span>(f1[i][j - <span class="number">1</span>], f1[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]),</span><br><span class="line">                f2[i][j] = <span class="built_in">max</span>(f2[i][j - <span class="number">1</span>], f2[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_max</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = r - l + <span class="number">1</span>, k = <span class="built_in">log</span>(len) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f2[l][k], f2[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_min</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = r - l + <span class="number">1</span>, k = <span class="built_in">log</span>(len) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(f1[l][k], f1[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">find_max</span>(l, r) - <span class="built_in">find_min</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
        <tag>Sparse Table</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 1655 Balancing Art</title>
    <url>/POJ/poj-1655-balancing-art/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20001</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> t, n, u, v, h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">bool</span> visited[N];</span><br><span class="line"><span class="type">int</span> ans, node;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[idx] = v, ne[idx] = h[u], h[u] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="comment">// return size of the tree `u`.</span></span><br><span class="line">    visited[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, <span class="comment">// max size of connected componet.</span></span><br><span class="line">       sum = <span class="number">1</span>; <span class="comment">// size of current tree (whose root node is `u`).</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (visited[v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">dfs</span>(v);</span><br><span class="line">        res = <span class="built_in">max</span>(res, s);</span><br><span class="line">        sum += s;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res, n - sum);</span><br><span class="line">    <span class="keyword">if</span> (res &lt; ans) &#123;</span><br><span class="line">        ans = res;</span><br><span class="line">        node = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        idx = <span class="number">0</span>, ans = n;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">-1</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="literal">false</span>, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, node, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 2528 Mayor&#39;s posters</title>
    <url>/POJ/poj-2528-mayor-s-posters/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> c, n, l, r;</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pos[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), x) - s.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, lazy;</span><br><span class="line">&#125; t[N &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="comment">// segment tree, N &lt;&lt; 2;</span></span><br><span class="line"><span class="comment">// 1 &lt;= discretized(l/r) &lt;&lt; 10000, (N &lt;&lt; 2) &lt;&lt; 1.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[u] = &#123;l, r, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[u].lazy) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (t[u].l == t[u].r) <span class="keyword">return</span> t[u].lazy = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> mid = t[u].l + t[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) res |= <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) res |= <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (t[u &lt;&lt; <span class="number">1</span>].lazy &amp;&amp; t[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy) t[u].lazy = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">    <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">        s.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="built_in">sizeof</span>(t));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">            ++r;</span><br><span class="line">            pos[i] = &#123;l, r&#125;;</span><br><span class="line">            s.<span class="built_in">push_back</span>(l);</span><br><span class="line">            s.<span class="built_in">push_back</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        s.<span class="built_in">erase</span>(<span class="built_in">unique</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, s.<span class="built_in">size</span>() - <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i; --i) &#123;</span><br><span class="line">            l = <span class="built_in">get</span>(pos[i].first), r = <span class="built_in">get</span>(pos[i].second) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">update</span>(<span class="number">1</span>, l, r)) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3468 A Simple Problem with Integers</title>
    <url>/POJ/poj-3468-a-simple-problem-with-integers/</url>
    <content><![CDATA[<div class="tabs" id="poj-3468-solution"><ul class="nav-tabs"><li class="tab active"><a href="#poj-3468-solution-1">线段树</a></li><li class="tab"><a href="#poj-3468-solution-2">分块</a></li></ul><div class="tab-content"><div class="tab-pane active" id="poj-3468-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, q, l, r, c, a[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">LL d[N &lt;&lt; <span class="number">2</span>], b[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == t) &#123;</span><br><span class="line">        d[p] = a[s];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = s + t &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p * <span class="number">2</span>, s, m), <span class="built_in">build</span>(p * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, t);</span><br><span class="line">    d[p] = d[p * <span class="number">2</span>] + d[p * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, LL c, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) &#123;</span><br><span class="line">        d[p] += (t - s + <span class="number">1</span>) * c, b[p] += c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = t + s &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[p] &amp;&amp; s != t) &#123;</span><br><span class="line">        d[p * <span class="number">2</span>] += b[p] * (m - s + <span class="number">1</span>), d[p * <span class="number">2</span> + <span class="number">1</span>] += b[p] * (t - m);</span><br><span class="line">        b[p * <span class="number">2</span>] += b[p], b[p * <span class="number">2</span> + <span class="number">1</span>] += b[p];</span><br><span class="line">        b[p] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= m) <span class="built_in">update</span>(p * <span class="number">2</span>, c, l, r, s, m);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; m) <span class="built_in">update</span>(p * <span class="number">2</span> + <span class="number">1</span>, c, l, r, m + <span class="number">1</span>, t);</span><br><span class="line">    d[p] = d[p * <span class="number">2</span>] + d[p * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getSum</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="keyword">return</span> d[p];</span><br><span class="line">    <span class="type">int</span> m = s + t &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b[p]) &#123;</span><br><span class="line">        d[p * <span class="number">2</span>] += b[p] * (m - s + <span class="number">1</span>), d[p * <span class="number">2</span> + <span class="number">1</span>] += b[p] * (t - m);</span><br><span class="line">        b[p * <span class="number">2</span>] += b[p], b[p * <span class="number">2</span> + <span class="number">1</span>] += b[p];</span><br><span class="line">        b[p] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= m) sum = <span class="built_in">getSum</span>(p * <span class="number">2</span>, l, r, s, m);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; m) sum += <span class="built_in">getSum</span>(p * <span class="number">2</span> + <span class="number">1</span>, l, r, m + <span class="number">1</span>, t);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c %d %d&quot;</span>, &amp;ch, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">getSum</span>(<span class="number">1</span>, l, r, <span class="number">1</span>, n));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, c, l, r, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="poj-3468-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, q, l, r, c, a[N], L[N], R[N], pos[N];</span><br><span class="line">LL sum[N], add[N];</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">sqrt</span>(n * <span class="number">1.0</span>);</span><br><span class="line">    <span class="type">int</span> num = n / t;</span><br><span class="line">    <span class="keyword">if</span> (n % t) ++num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">        L[i] = (i - <span class="number">1</span>) * t + <span class="number">1</span>, R[i] = i * t;</span><br><span class="line">    R[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = L[i]; j &lt;= R[i]; ++j)</span><br><span class="line">            pos[j] = i, sum[i] += a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = pos[l], q = pos[r];</span><br><span class="line">    <span class="keyword">if</span> (p == q) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++i) a[i] += d;</span><br><span class="line">        sum[p] += d * (r - l + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p + <span class="number">1</span>; i &lt;= q - <span class="number">1</span>; ++i) add[i] += d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= R[p]; ++i) a[i] += d;</span><br><span class="line">        sum[p] += d * (R[p] - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = L[q]; i &lt;= r; ++i) a[i] += d;</span><br><span class="line">        sum[q] += d * (r - L[q] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = pos[l], q = pos[r];</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (p == q) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++i) ans += a[i];</span><br><span class="line">        ans += add[p] * (r - l + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p + <span class="number">1</span>; i &lt;= q - <span class="number">1</span>; ++i)</span><br><span class="line">            ans += sum[i] + add[i] * (R[i] - L[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= R[p]; ++i) ans += a[i];</span><br><span class="line">        ans += add[p] * (R[p] -l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = L[q]; i &lt;= r; ++i) ans += a[i];</span><br><span class="line">        ans += add[q] * (r - L[q] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c %d %d&quot;</span>, &amp;ch, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(l, r));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">            <span class="built_in">change</span>(l, r, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>Divide and Conquer</tag>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3107 Godfather</title>
    <url>/POJ/poj-3107-godfather/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50001</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> n, u, v, h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> results[N], k, ans = N;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[idx] = v, ne[idx] = h[u], h[u] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        res = <span class="built_in">max</span>(res, s);</span><br><span class="line">        sum += s;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res, n - sum);</span><br><span class="line">    <span class="keyword">if</span> (res &lt; ans) &#123;</span><br><span class="line">        ans = res;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        results[k++] = u;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res == ans) &#123;</span><br><span class="line">        results[k++] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(results, results + k, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">while</span> (k--) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, results[k]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3585 Accumulation Degree</title>
    <url>/POJ/poj-3585-accumulation-degree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>SPOJ - KATHTHI KATHTHI</title>
    <url>/SPOJ/spoj-kaththi-kaththi/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> t, R, C, dist[N][N], ds[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    deque&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">emplace_back</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= R || ny &lt; <span class="number">0</span> || ny &gt;= C) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> d = g[x][y] != g[nx][ny];</span><br><span class="line">            <span class="keyword">if</span> (dist[nx][ny] &gt; dist[x][y] + d) &#123;</span><br><span class="line">                dist[nx][ny] = dist[x][y] + d;</span><br><span class="line">                <span class="keyword">if</span> (d) q.<span class="built_in">emplace_back</span>(nx, ny);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">emplace_front</span>(nx, ny);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[R - <span class="number">1</span>][C - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;R, &amp;C);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; R; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>());       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SPOJ</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>0-1 BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ 3662 Telephone Lines</title>
    <url>/POJ/poj-3662-telephone-lines/</url>
    <content><![CDATA[<p>Source: USACO 2008 January Silver.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>, M = <span class="number">20002</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, u, v, ww, h[N], e[M], w[M], ne[M], idx, dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, w[idx] = ww, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> bound)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="built_in">sizeof</span>(st));</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">if</span> (st[u]) <span class="keyword">continue</span>;</span><br><span class="line">        st[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i], d = w[i] &gt; bound;</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + d) &#123;</span><br><span class="line">                dist[v] = dist[u] + d;</span><br><span class="line">                <span class="keyword">if</span> (!d) q.<span class="built_in">push_front</span>(v);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">push_back</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n] &lt;= k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;ww);</span><br><span class="line">        <span class="built_in">add</span>(u, v, ww), <span class="built_in">add</span>(v, u, ww);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">1e6</span> + <span class="number">1</span>) r = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Graph</tag>
        <tag>0-1 BFS</tag>
        <tag>USACO</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA 1640 The Counting Problem</title>
    <url>/UVA/uva-1640-the-counting-problem/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnt</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) ++res, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cnt</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, d = <span class="built_in">cnt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= d; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">pow</span>(<span class="number">10</span>, i - <span class="number">1</span>), l = n / p / <span class="number">10</span>, r = n % p, di = n / p % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (x) res += l * p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l) res += (l - <span class="number">1</span>) * p;</span><br><span class="line">        <span class="keyword">if</span> (di &gt; x &amp;&amp; (x || l)) res += p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (di == x &amp;&amp; (x || l)) res += r + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b), a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="built_in">swap</span>(a, b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, <span class="built_in">cnt</span>(b, i) - <span class="built_in">cnt</span>(a - <span class="number">1</span>, i), i == <span class="number">9</span> ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>UVA</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>NowCoder NC201613 Jelly</title>
    <url>/NowCoder/nowcoder-nc201613-jelly/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;&gt; <span class="built_in">jellies</span>(n, vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>)));</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; n; z++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++) &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; n; y++)</span><br><span class="line">                <span class="keyword">if</span> (s[y] == <span class="string">&#x27;.&#x27;</span>) jellies[z][x][y] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> ds[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, steps = <span class="number">1</span>;</span><br><span class="line">    queue&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    jellies[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">            <span class="keyword">auto</span>[z, x, y] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (z == n - <span class="number">1</span> &amp;&amp; x == n - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) &#123;</span><br><span class="line">                cout &lt;&lt; steps &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nz = z + ds[i], nx = x + ds[i + <span class="number">1</span>], ny = y + ds[i + <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (nz &lt; <span class="number">0</span> || nz &gt; n - <span class="number">1</span> || nx &lt; <span class="number">0</span> || nx &gt; n - <span class="number">1</span> || ny &lt; <span class="number">0</span> || ny &gt; n - <span class="number">1</span></span><br><span class="line">                    || !jellies[nz][nx][ny])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                jellies[nz][nx][ny] = <span class="literal">false</span>;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nz, nx, ny);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++steps;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NowCoder</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>NowCoder NC50439 tokitsukaze and Soldier</title>
    <url>/NowCoder/nowcoder-nc50439-tokitsukaze-and-soldier/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, v, s, k;</span><br><span class="line">    <span class="type">long</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">solders</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; s;</span><br><span class="line">        solders[i] = &#123;s, v&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(solders.<span class="built_in">begin</span>(), solders.<span class="built_in">end</span>());</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">auto</span>[s, v] = solders[i];</span><br><span class="line">        q.<span class="built_in">push</span>(v);</span><br><span class="line">        sum += v;</span><br><span class="line">        k = s;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; k) &#123;</span><br><span class="line">            sum -= q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NowCoder</category>
      </categories>
  </entry>
  <entry>
    <title>pintia The 2021 ICPC Asia Regionals Online Contest (II) L Euler Function</title>
    <url>/pintia/pintia-the-2021-icpc-asia-regionals-online-contest-ii-l-euler-function/</url>
    <content><![CDATA[<p><a href="https://pintia.cn/problem-sets/1441745686294945792/problems/1441745856154955787">ProblemSet Problem - L Euler Function</a></p>
<p>Given $w$ as a prime, </p>
<ol>
<li>we have $\phi\left(a * w\right) &#x3D; \phi\left(a\right) * w$ when $w$ is a fator of $a$;</li>
<li>otherwise, we have $\phi\left(a * w\right) &#x3D; \left(a\right) * \left(w - 1\right)$.</li>
</ol>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> tot, n, m, t, l, r, w, a[N], primes[<span class="number">26</span>], <span class="comment">// primes within 100.</span></span><br><span class="line">cnt[<span class="number">101</span>][<span class="number">26</span>], <span class="comment">// cnt[i][j], how many jth prime does number i contain.</span></span><br><span class="line">phi[<span class="number">101</span>]; <span class="comment">// value of Eular Function.</span></span><br><span class="line">bitset&lt;26&gt; st[<span class="number">101</span>]; <span class="comment">// st[i][j], if number i is divisible to the jth prime.</span></span><br><span class="line"><span class="type">bool</span> isComposite[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    LL mul, sum;</span><br><span class="line">    bitset&lt;26&gt; mark; <span class="comment">// cnt[i], if the ith prime is the common prime factor to a[l]~a[r].</span></span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal_phi</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL b, LL mod)</span> </span>&#123;</span><br><span class="line">    LL ans = <span class="number">1ll</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="comment">// init primes[], cnt[][], st[].</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isComposite[i]) primes[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; primes[j] &lt;= n / i; ++j) &#123;</span><br><span class="line">            isComposite[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">while</span> (tmp % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                ++cnt[i][j];</span><br><span class="line">                tmp /= primes[j];</span><br><span class="line">            &#125;</span><br><span class="line">            st[i][j] = cnt[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) phi[i] = <span class="built_in">cal_phi</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].sum = (tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum) % MOD;</span><br><span class="line">    tr[u].mark = tr[u &lt;&lt; <span class="number">1</span>].mark &amp; tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mark;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].mul != <span class="number">1</span>) &#123;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].mul = (tr[u &lt;&lt; <span class="number">1</span>].mul * tr[u].mul) % MOD;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].sum = (tr[u &lt;&lt; <span class="number">1</span>].sum * tr[u].mul) % MOD;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mul = (tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].mul * tr[u].mul) % MOD;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum = (tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum * tr[u].mul) % MOD;</span><br><span class="line">        tr[u].mul = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[u].sum = phi[a[l]], tr[u].mark = st[a[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r) % MOD;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ans = (ans + <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r)) % MOD;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [l, r] * primes[pos] % MOD for k times.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = primes[pos];</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r &amp;&amp; tr[u].mark[pos]) &#123;</span><br><span class="line">            tr[u].sum = (tr[u].sum * <span class="built_in">qmi</span>(p, k, MOD)) % MOD;</span><br><span class="line">            tr[u].mul = (tr[u].mul * <span class="built_in">qmi</span>(p, k, MOD)) % MOD;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tr[u].l == tr[u].r) &#123;</span><br><span class="line">        tr[u].sum = (tr[u].sum * (p - <span class="number">1</span>)) % MOD;</span><br><span class="line">        tr[u].mark[pos] = <span class="number">1</span>;</span><br><span class="line">        tr[u].sum = (tr[u].sum * <span class="built_in">qmi</span>(p, k - <span class="number">1</span>, MOD)) % MOD;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, pos, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, pos, k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i)</span><br><span class="line">                <span class="keyword">if</span> (cnt[w][i]) <span class="built_in">modify</span>(<span class="number">1</span>, l, r, i, cnt[w][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>pintia</category>
      </categories>
      <tags>
        <tag>势能线段树</tag>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>kuangbin 专题一 简单搜索</title>
    <url>/kuangbin/kuangbin-%E4%B8%93%E9%A2%98%E4%B8%80-%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>题目详单见 <a href="https://vjudge.net/article/187">[kuangbin带你飞]专题1-23</a>。</p>
<h3 id="POJ-1321-棋盘问题"><a href="#POJ-1321-棋盘问题" class="headerlink" title="POJ-1321 棋盘问题"></a>POJ-1321 棋盘问题</h3><p>在棋盘规定的位置摆放棋子，要求棋子不能同行&#x2F;列，求方案数。简单记录状态，遍历搜索即可。</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> n, k, ans;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">bool</span> st[N][N], row[N], col[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r == n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">        <span class="keyword">if</span> (st[r][c] &amp;&amp; row[r] &amp;&amp; col[c])</span><br><span class="line">        &#123;</span><br><span class="line">            st[r][c] = row[r] = col[c] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt + <span class="number">1</span> == k)</span><br><span class="line">                ++ans;</span><br><span class="line">            <span class="built_in">dfs</span>(r + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">            st[r][c] = row[r] = col[c] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(r + <span class="number">1</span>, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k), ~n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="built_in">memset</span>(row, <span class="number">1</span>, <span class="keyword">sizeof</span> row);</span><br><span class="line">        <span class="built_in">memset</span>(col, <span class="number">1</span>, <span class="keyword">sizeof</span> col);</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    st[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-2251-Dungeon-Master"><a href="#POJ-2251-Dungeon-Master" class="headerlink" title="POJ-2251 Dungeon Master"></a>POJ-2251 Dungeon Master</h3><p>3D 版囚笼逃脱，BFS搜索最短路即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> L, R, C, ds[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, ans;</span><br><span class="line"><span class="type">char</span> g[N][N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N][N];</span><br><span class="line"><span class="type">int</span> q[N * N * N][<span class="number">3</span>], hh, tt, w;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hh = tt = <span class="number">0</span>;</span><br><span class="line">    q[tt][<span class="number">0</span>] = i, q[tt][<span class="number">1</span>] = j, q[tt][<span class="number">2</span>] = k, ++tt;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    st[i][j][k] = <span class="number">1</span>;</span><br><span class="line">    w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tt - hh)</span><br><span class="line">    &#123;</span><br><span class="line">        ++w;</span><br><span class="line">        <span class="type">int</span> sz = tt - hh;</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l = q[hh][<span class="number">0</span>], r = q[hh][<span class="number">1</span>], c = q[hh][<span class="number">2</span>];</span><br><span class="line">            ++hh;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nl = l + ds[i], nr = r + ds[i + <span class="number">1</span>], nc = c + ds[i + <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (nl &lt; <span class="number">0</span> || nl &gt;= L || nr &lt; <span class="number">0</span> || nr &gt;= R || nc &lt; <span class="number">0</span> || nc &gt;= C || g[nl][nr][nc] == <span class="string">&#x27;#&#x27;</span> || st[nl][nr][nc])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[nl][nr][nc] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> w;</span><br><span class="line">                st[nl][nr][nc] = <span class="number">1</span>;</span><br><span class="line">                q[tt][<span class="number">0</span>] = nl, q[tt][<span class="number">1</span>] = nr, q[tt][<span class="number">2</span>] = nc, ++tt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;L, &amp;R, &amp;C), L)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; R; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i][j]);</span><br><span class="line">            <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; R; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; C; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (g[i][j][k] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                        ans = <span class="built_in">bfs</span>(i, j, k);</span><br><span class="line">        <span class="keyword">if</span> (ans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Escaped in %d minute(s).\n&quot;</span>, ans);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Trapped!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3278-Catch-That-Cow"><a href="#POJ-3278-Catch-That-Cow" class="headerlink" title="POJ-3278 Catch That Cow"></a>POJ-3278 Catch That Cow</h3><p>1D（数轴） 版最短路。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n, k, q[N], hh, tt, w;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n - k);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q[tt++] = n;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">1</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">while</span> (tt - hh)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = tt - hh;</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p = q[hh++];</span><br><span class="line">            <span class="keyword">if</span> (p + <span class="number">1</span> == k || p - <span class="number">1</span> == k || p * <span class="number">2</span> == k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, w + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p + <span class="number">1</span> &lt; N &amp;&amp; st[p + <span class="number">1</span>])</span><br><span class="line">                q[tt++] = p + <span class="number">1</span>, st[p + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (p - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; st[p - <span class="number">1</span>])</span><br><span class="line">                q[tt++] = p - <span class="number">1</span>, st[p - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (p * <span class="number">2</span> &lt; N &amp;&amp; st[p * <span class="number">2</span>])</span><br><span class="line">                q[tt++] = p * <span class="number">2</span>, st[p * <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3279-Fliptile"><a href="#POJ-3279-Fliptile" class="headerlink" title="POJ-3279 Fliptile"></a>POJ-3279 Fliptile</h3><p>如果直接枚举每头牛的状态，状态总量将高达 $2^{M \times N}$。实际上只需要枚举第一行的状态，就可以按行依次递推剩下的状态，最后检查状态合法性并记录最佳方案即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">15</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> M, N, g[MAXN][MAXN];</span><br><span class="line"><span class="type">int</span> ds[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, cnt, min_turn = INF;</span><br><span class="line"><span class="type">bool</span> turn[MAXN][MAXN], ans[MAXN][MAXN];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_color</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> color = g[x][y];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="comment">// left, right, up, center, no need to check downwards.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; M &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; N)</span><br><span class="line">            color ^= turn[nx][ny];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; M; ++i)     <span class="comment">// start from the 2nd line.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j) <span class="comment">// for each column.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">get_color</span>(i - <span class="number">1</span>, j)) <span class="comment">// if preline is of color 1(black), need to turn current line.</span></span><br><span class="line">                turn[i][j] = <span class="number">1</span>, ++cnt;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt; min_turn) <span class="comment">// pruning.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// state of the last line is now calculated.</span></span><br><span class="line">    <span class="comment">// check if it is all white.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get_color</span>(M - <span class="number">1</span>, i))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; min_turn)</span><br><span class="line">        <span class="built_in">memcpy</span>(ans, turn, <span class="keyword">sizeof</span> turn), min_turn = cnt; <span class="comment">// keep the ans.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;M, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; N; ++i) <span class="comment">// enumerate each state of the 1st line.</span></span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;                      <span class="comment">// cnt of color turned.</span></span><br><span class="line">        <span class="built_in">memset</span>(turn, <span class="number">0</span>, <span class="keyword">sizeof</span> turn); <span class="comment">// state of current line.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// start from &quot;000***&quot; to get the one with the least lexicographical ordering.</span></span><br><span class="line">            turn[<span class="number">0</span>][N - <span class="number">1</span> - j] = i &gt;&gt; j &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (turn[<span class="number">0</span>][N - <span class="number">1</span> - j])</span><br><span class="line">                ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(); <span class="comment">// since the 1st line is determined, then the rest are all determined as well.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (min_turn == INF)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-1426-Find-The-Multiple"><a href="#POJ-1426-Find-The-Multiple" class="headerlink" title="POJ-1426 Find The Multiple"></a>POJ-1426 Find The Multiple</h3><p>给定 $n (1 \le n \le 200)$，找只含 0 和 1 的 n 的倍数，将余数作为状态进行搜索即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, found;</span><br><span class="line">string dividend;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> remainder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (found)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (remainder == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        found = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, dividend.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dividend.<span class="built_in">size</span>() &lt; <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dividend += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>((remainder * <span class="number">10</span>) % n);</span><br><span class="line">        dividend.<span class="built_in">erase</span>(dividend.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line">        dividend += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>((remainder * <span class="number">10</span> + <span class="number">1</span>) % n);</span><br><span class="line">        dividend.<span class="built_in">erase</span>(dividend.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n)</span><br><span class="line">    &#123;</span><br><span class="line">        dividend = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        found = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span> % n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3126-Prime-Path"><a href="#POJ-3126-Prime-Path" class="headerlink" title="POJ-3126 Prime Path"></a>POJ-3126 Prime Path</h3><p>将一个四位的质数转为另一个四位的质数，每次转一位数，且过程中出现的转换后的数也必须是质数，求转换代价。本题只需使用线性筛列出所有四位数的质数作为搜索空间，再使用 BFS 求最短路即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">int</span> t, src, dest, st[N], q[N], hh, tt, w;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">            primes.<span class="built_in">insert</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = primes.<span class="built_in">begin</span>(); it != primes.<span class="built_in">end</span>(); ++it)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it &gt; N / i)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            st[*it * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % *it == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_nth_digit</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i--)</span><br><span class="line">        num /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">replace_nth_digit</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> i, <span class="type">int</span> digit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">    <span class="type">int</span> nth_digit = <span class="built_in">get_nth_digit</span>(num, i);</span><br><span class="line">    <span class="keyword">return</span> num - nth_digit * p + digit * p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">if</span> (src == dest)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    w = hh = tt = <span class="number">0</span>;</span><br><span class="line">    q[tt++] = src;</span><br><span class="line">    st[src] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tt - hh)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = tt - hh;</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> prime = q[hh++];</span><br><span class="line">            <span class="keyword">if</span> (prime == dest)</span><br><span class="line">                <span class="keyword">return</span> w;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">3</span> &amp;&amp; j == <span class="number">0</span> || j == <span class="built_in">get_nth_digit</span>(prime, i))</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> next_num = <span class="built_in">replace_nth_digit</span>(prime, i, j);</span><br><span class="line">                    <span class="keyword">if</span> (st[next_num])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (primes.<span class="built_in">count</span>(next_num))</span><br><span class="line">                        st[next_num] = <span class="number">1</span>, q[tt++] = next_num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;src, &amp;dest);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3087-Shuffle’m-Up"><a href="#POJ-3087-Shuffle’m-Up" class="headerlink" title="POJ-3087 Shuffle’m Up"></a>POJ-3087 Shuffle’m Up</h3><p>按题意转换状态，并记录之，DFS 搜索到目标状态即可返回转换次数。因为转换是线性的，若同一状态出现两次，可以预见题目无解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, ans;</span><br><span class="line">string s1, s2, s3;</span><br><span class="line"><span class="function">string <span class="title">shuffle</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        res += b[i], res += a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, n; i &lt;= t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;</span><br><span class="line">        set&lt;string&gt; memo;</span><br><span class="line">        string t = <span class="built_in">shuffle</span>(s1, s2);</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t == s3)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (memo.<span class="built_in">count</span>(t))</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            memo.<span class="built_in">insert</span>(t);</span><br><span class="line">            t = <span class="built_in">shuffle</span>(t.<span class="built_in">substr</span>(<span class="number">0</span>, n), t.<span class="built_in">substr</span>(n, n));</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="POJ-3414-Pots"><a href="#POJ-3414-Pots" class="headerlink" title="POJ-3414 Pots"></a>POJ-3414 Pots</h3><p>多个容器间液体倒来倒去的问题。BFS 搜索并记录最短路即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> a, b, c, w;</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line">string ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string path;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">1</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            node t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            string path = t.path;</span><br><span class="line">            <span class="type">int</span> x = t.x, y = t.y;</span><br><span class="line">            <span class="keyword">if</span> (x == c || y == c)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = path;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &quot;1&quot; =&gt; fill(1)</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; a &amp;&amp; st[a][y])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;path + <span class="string">&quot;1&quot;</span>, a, y&#125;);</span><br><span class="line">                st[a][y] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &quot;2&quot; =&gt; DROP(1)</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; st[<span class="number">0</span>][y])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;path + <span class="string">&quot;2&quot;</span>, <span class="number">0</span>, y&#125;);</span><br><span class="line">                st[<span class="number">0</span>][y] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &quot;3&quot; =&gt; POUR(1,2)</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &lt; b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> d = <span class="built_in">min</span>(b - y, x);</span><br><span class="line">                <span class="keyword">if</span> (st[x - d][y + d])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;path + <span class="string">&quot;3&quot;</span>, x - d, y + d&#125;);</span><br><span class="line">                    st[x - d][y + d] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &quot;4&quot; =&gt; fill(2)</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt; b &amp;&amp; st[x][b])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;path + <span class="string">&quot;4&quot;</span>, x, b&#125;);</span><br><span class="line">                st[x][b] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &quot;5&quot; =&gt; DROP(2)</span></span><br><span class="line">            <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; st[x][<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;path + <span class="string">&quot;5&quot;</span>, x, <span class="number">0</span>&#125;);</span><br><span class="line">                st[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &quot;6&quot; =&gt; POUR(2,1)</span></span><br><span class="line">            <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; x &lt; a)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> d = <span class="built_in">min</span>(a - x, y);</span><br><span class="line">                <span class="keyword">if</span> (st[x + d][y - d])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;path + <span class="string">&quot;6&quot;</span>, x + d, y - d&#125;);</span><br><span class="line">                    st[x + d][y - d] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; w &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; w; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> c = ans[i];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;FILL(1)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;DROP(1)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;POUR(1,2)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;FILL(2)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;DROP(2)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;POUR(2,1)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="FZU-2150-Fire-Game"><a href="#FZU-2150-Fire-Game" class="headerlink" title="FZU-2150 Fire Game"></a>FZU-2150 Fire Game</h3><p>双源 BFS。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, grass, ans, ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">bool</span> g[N][N], st[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; nodes[N * N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(Node a, Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">1</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    queue&lt;Node&gt; q;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, w = <span class="number">-1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;a.x, a.y&#125;), st[a.x][a.y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (st[b.x][b.y])</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;b.x, b.y&#125;), st[b.x][b.y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            Node t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="type">int</span> x = t.x, y = t.y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (~nx &amp;&amp; nx &lt; n &amp;&amp; ~ny &amp;&amp; ny &lt; m &amp;&amp; g[nx][ny] &amp;&amp; st[nx][ny])</span><br><span class="line">                &#123;</span><br><span class="line">                    st[nx][ny] = <span class="number">0</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;nx, ny&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++w &gt; ans)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt == grass ? w : INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        grass = <span class="number">0</span>;</span><br><span class="line">        ans = INF;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; m; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; c;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    g[j][k] = <span class="number">1</span>, nodes[grass++] = &#123;j, k&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; grass; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; grass; ++k)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">bfs</span>(nodes[j], nodes[k]));</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; (ans == INF ? <span class="number">-1</span> : ans) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UVA-11624-Fire"><a href="#UVA-11624-Fire" class="headerlink" title="UVA-11624 Fire!"></a>UVA-11624 Fire!</h3><p>多源（火和人） BFS。只要人比火快一步到达地图边缘就算作逃生成功。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> T, R, C, ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(queue&lt;node&gt; fire, queue&lt;node&gt; path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (path.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = fire.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            node t = fire.<span class="built_in">front</span>();</span><br><span class="line">            fire.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = t.x, y = t.y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (~nx &amp;&amp; nx &lt; R &amp;&amp; ~ny &amp;&amp; ny &lt; C &amp;&amp; st[nx][ny])</span><br><span class="line">                &#123;</span><br><span class="line">                    st[nx][ny] = <span class="number">0</span>;</span><br><span class="line">                    fire.<span class="built_in">push</span>(&#123;nx, ny&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sz = path.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            node t = path.<span class="built_in">front</span>();</span><br><span class="line">            path.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = t.x, y = t.y;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx == <span class="number">-1</span> || nx &gt;= R || ny == <span class="number">-1</span> || ny &gt;= C)</span><br><span class="line">                    <span class="keyword">return</span> w;</span><br><span class="line">                <span class="keyword">if</span> (st[nx][ny])</span><br><span class="line">                    st[nx][ny] = <span class="number">0</span>, path.<span class="built_in">push</span>(&#123;nx, ny&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        queue&lt;node&gt; fire;</span><br><span class="line">        queue&lt;node&gt; path;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; C; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; c;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">                    fire.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;J&#x27;</span>)</span><br><span class="line">                    path.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    st[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">bfs</span>(fire, path);</span><br><span class="line">        <span class="keyword">if</span> (ans == <span class="number">-1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POJ-3984-迷宫问题"><a href="#POJ-3984-迷宫问题" class="headerlink" title="POJ-3984 迷宫问题"></a>POJ-3984 迷宫问题</h3><p>二维地图，给定出发点和目的地，以及搜索空间（墙或者路），简单 BFS 求最短路即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> path[<span class="number">25</span>], ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, ans[<span class="number">25</span>];</span><br><span class="line"><span class="type">bool</span> st[<span class="number">25</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;st[i]);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">    st[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    path[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pos = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x = pos / <span class="number">5</span>, y = pos % <span class="number">5</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>], np = nx * <span class="number">5</span> + ny;</span><br><span class="line">            <span class="keyword">if</span> (~nx &amp;&amp; nx &lt; <span class="number">5</span> &amp;&amp; ~ny &amp;&amp; ny &lt; <span class="number">5</span> &amp;&amp; !st[np])</span><br><span class="line">            &#123;</span><br><span class="line">                st[np] = <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(np);</span><br><span class="line">                path[np] = pos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">24</span>, len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[len++] = pos;</span><br><span class="line">        pos = path[pos];</span><br><span class="line">    &#125; <span class="keyword">while</span> (~pos);</span><br><span class="line">    <span class="keyword">while</span> (--len &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pos = ans[len];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%d, %d)\n&quot;</span>, pos / <span class="number">5</span>, pos % <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-1241-Oil-Deposits"><a href="#HDU-1241-Oil-Deposits" class="headerlink" title="HDU-1241 Oil Deposits"></a>HDU-1241 Oil Deposits</h3><p>给定石油点地图，求石油块总数。DFS 搜索统计连通分量数目即可。也可以使用并查集。</p>
<div class="tabs" id="oil-deposits"><ul class="nav-tabs"><li class="tab active"><a href="#oil-deposits-1">DFS</a></li><li class="tab"><a href="#oil-deposits-2">DSU</a></li></ul><div class="tab-content"><div class="tab-pane active" id="oil-deposits-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> m, n, ans;</span><br><span class="line"><span class="type">char</span> grid[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    grid[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">-1</span>; x &lt;= <span class="number">1</span>; ++x)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">-1</span>; y &lt;= <span class="number">1</span>; ++y)</span><br><span class="line">            <span class="keyword">if</span> (x + i &gt;= <span class="number">0</span> &amp;&amp; x + i &lt; m &amp;&amp; y + j &gt;= <span class="number">0</span> &amp;&amp; y + j &lt; n &amp;&amp; grid[x + i][y + j] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x + i, y + j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (!m)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, grid[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(i, j);</span><br><span class="line">                    ++ans;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="oil-deposits-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> m, n, ans, p[N * N];</span><br><span class="line"><span class="type">char</span> grid[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">-1</span>; x &lt;= <span class="number">1</span>; ++x)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">-1</span>; y &lt;= <span class="number">1</span>; ++y)</span><br><span class="line">            <span class="keyword">if</span> (x + i &gt;= <span class="number">0</span> &amp;&amp; x + i &lt; m &amp;&amp; y + j &gt;= <span class="number">0</span> &amp;&amp; y + j &lt; n &amp;&amp; grid[x + i][y + j] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> p1 = <span class="built_in">find</span>(i * n + j), p2 = <span class="built_in">find</span>((x + i) * n + y + j);</span><br><span class="line">                <span class="keyword">if</span> (p1 != p2)</span><br><span class="line">                    p[p1] = p2;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (!m)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">iota</span>(p, p + m * n, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, grid[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                    <span class="built_in">unite</span>(i, j);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;@&#x27;</span> &amp;&amp; p[i * n + j] == i * n + j)</span><br><span class="line">                    ++ans;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="HDU-1495-非常可乐"><a href="#HDU-1495-非常可乐" class="headerlink" title="HDU-1495 非常可乐"></a>HDU-1495 非常可乐</h3><p>还是多个容器间液体倒来倒去的问题。BFS 所有最短路。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> w[<span class="number">3</span>];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">1</span>, <span class="built_in">sizeof</span>(st));</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;w[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> [a, b, c] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (a == b &amp;&amp; c == <span class="number">0</span> || a == c &amp;&amp; b == <span class="number">0</span> || b == c &amp;&amp; a == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> d[] = &#123;a, b, c&#125;;</span><br><span class="line">                    <span class="keyword">if</span> (i != j &amp;&amp; d[i] &gt; <span class="number">0</span> &amp;&amp; d[j] &lt; w[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="type">int</span> h = <span class="built_in">min</span>(w[j] - d[j], d[i]);</span><br><span class="line">                        d[j] += h, d[i] -= h;</span><br><span class="line">                        <span class="keyword">if</span> (st[d[<span class="number">1</span>]][d[<span class="number">2</span>]])</span><br><span class="line">                        &#123;</span><br><span class="line">                            q.<span class="built_in">push</span>(&#123;d[<span class="number">0</span>], d[<span class="number">1</span>], d[<span class="number">2</span>]&#125;);</span><br><span class="line">                            st[d[<span class="number">1</span>]][d[<span class="number">2</span>]] = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[<span class="number">0</span>], &amp;w[<span class="number">1</span>], &amp;w[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!w[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (w[<span class="number">0</span>] &amp; <span class="number">1</span>) <span class="comment">// can NOT be equally divided.</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">bfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-2612-Find-a-way"><a href="#HDU-2612-Find-a-way" class="headerlink" title="HDU-2612 Find a way"></a>HDU-2612 Find a way</h3><p>双源多目的地最短路。分两次搜索，叠加统计各目的地的路程。（注意：因为有禁止通行的道路，所以有些目的地是无法到达的）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> n, m, ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, d[N][N];</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    q.<span class="built_in">emplace</span>(i, j);</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    st[i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ++w;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[k], ny = y + ds[k + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m || g[nx][ny] == <span class="string">&#x27;#&#x27;</span> || st[nx][ny])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                st[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[nx][ny] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                    d[nx][ny] += w;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;Y&#x27;</span> || g[i][j] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">bfs</span>(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;@&#x27;</span> &amp;&amp; d[i][j] != <span class="number">0</span>)</span><br><span class="line">                    ans = <span class="built_in">min</span>(ans, d[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans * <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kuangbin</category>
      </categories>
      <tags>
        <tag>kuangbin</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>kuangbin 专题二 搜索进阶</title>
    <url>/kuangbin/kuangbin-%E4%B8%93%E9%A2%98%E4%BA%8C-%E6%90%9C%E7%B4%A2%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p>题目详单见 <a href="https://vjudge.net/article/187">[kuangbin带你飞]专题1-23</a>。</p>
<h3 id="HDU-1043-Eight"><a href="#HDU-1043-Eight" class="headerlink" title="HDU-1043 Eight"></a>HDU-1043 Eight</h3><p>用康托展开将状态映射成排列数的字典序下标，然后</p>
<ul>
<li>用 BFS 预处理初始状态（123456789）到其他所有状态的路径，</li>
<li>或者结合数学上八数码问题是否有解的判别方法和 A* 算法（有解时）。</li>
</ul>
<span id="more"></span>

<div class="tabs" id="eight"><ul class="nav-tabs"><li class="tab active"><a href="#eight-1">BFS</a></li><li class="tab"><a href="#eight-2">A*</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eight-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>, M = <span class="number">362880</span>;</span><br><span class="line"><span class="type">int</span> fact[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>&#125;;</span><br><span class="line"><span class="type">int</span> d[] = &#123;<span class="number">-3</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">string ds = <span class="string">&quot;drlu&quot;</span>; <span class="comment">// reversed order, which is end =&gt; start.</span></span><br><span class="line">string path[M];</span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cantor</span><span class="params">(<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">        res += cnt * fact[<span class="number">9</span> - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">123456789</span>);</span><br><span class="line">    st[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = q.<span class="built_in">front</span>(), pos_of_nine, a[<span class="number">9</span>];</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>, x = num; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="number">9</span>)</span><br><span class="line">                pos_of_nine = i;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">cantor</span>(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="comment">// drlu</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos_of_nine == <span class="number">0</span> &amp;&amp; (i == <span class="number">0</span> || i == <span class="number">1</span>)    <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">1</span> &amp;&amp; i == <span class="number">0</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">2</span> &amp;&amp; (i == <span class="number">0</span> || i == <span class="number">2</span>) <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">3</span> &amp;&amp; i == <span class="number">1</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">5</span> &amp;&amp; i == <span class="number">2</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">6</span> &amp;&amp; (i == <span class="number">1</span> || i == <span class="number">3</span>) <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">7</span> &amp;&amp; i == <span class="number">3</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">8</span> &amp;&amp; (i == <span class="number">2</span> || i == <span class="number">3</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> next_pos_of_nine = pos_of_nine + d[i];</span><br><span class="line">            <span class="built_in">swap</span>(a[pos_of_nine], a[next_pos_of_nine]);</span><br><span class="line">            <span class="type">int</span> next_idx = <span class="built_in">cantor</span>(a);</span><br><span class="line">            <span class="keyword">if</span> (!st[next_idx])</span><br><span class="line">            &#123;</span><br><span class="line">                st[next_idx] = <span class="number">1</span>;</span><br><span class="line">                path[next_idx] = path[idx] + ds[i];</span><br><span class="line">                <span class="type">int</span> next_num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">                    next_num = next_num * <span class="number">10</span> + a[j];</span><br><span class="line">                q.<span class="built_in">push</span>(next_num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(a[pos_of_nine], a[next_pos_of_nine]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">char_to_int</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">&#x27;x&#x27;</span> ? <span class="number">9</span> : ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> target[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ch)</span><br><span class="line">    &#123;</span><br><span class="line">        target[<span class="number">0</span>] = <span class="built_in">char_to_int</span>(ch);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; ch;</span><br><span class="line">            target[i] = <span class="built_in">char_to_int</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">cantor</span>(target);</span><br><span class="line">        <span class="keyword">if</span> (!st[idx])</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;unsolvable&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = path[idx].<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">                cout &lt;&lt; path[idx][i];</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="eight-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> pis = pair&lt;<span class="type">int</span>, string&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>, M = <span class="number">362880</span>;</span><br><span class="line"><span class="type">int</span> fact[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>&#125;;</span><br><span class="line"><span class="type">int</span> d[] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-3</span>&#125;;</span><br><span class="line">string ds = <span class="string">&quot;drlu&quot;</span>;</span><br><span class="line">string target = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"><span class="type">int</span> dist[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cantor</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (state[j] &lt; state[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">        res += cnt * fact[<span class="number">8</span> - i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (state[i] != <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            res += <span class="built_in">abs</span>(i / <span class="number">3</span> - (state[i] - <span class="string">&#x27;1&#x27;</span>) / <span class="number">3</span>) + <span class="built_in">abs</span>(i % <span class="number">3</span> - (state[i] - <span class="string">&#x27;1&#x27;</span>) % <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">bfs</span><span class="params">(string start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;pis, vector&lt;pis&gt;, greater&lt;pis&gt;&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    string path[M];</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="built_in">f</span>(start), start);</span><br><span class="line">    dist[<span class="built_in">cantor</span>(start)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [_, state] = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (state == target)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">cantor</span>(state), pos_of_nine;</span><br><span class="line">        <span class="keyword">if</span> (st[idx])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[idx] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (state[i] == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pos_of_nine = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="comment">// drlu</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos_of_nine == <span class="number">0</span> &amp;&amp; (i == <span class="number">2</span> || i == <span class="number">3</span>)    <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">1</span> &amp;&amp; i == <span class="number">3</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">2</span> &amp;&amp; (i == <span class="number">1</span> || i == <span class="number">3</span>) <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">3</span> &amp;&amp; i == <span class="number">2</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">5</span> &amp;&amp; i == <span class="number">1</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">6</span> &amp;&amp; (i == <span class="number">0</span> || i == <span class="number">2</span>) <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">7</span> &amp;&amp; i == <span class="number">0</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">8</span> &amp;&amp; (i == <span class="number">0</span> || i == <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> next_pos_of_nine = pos_of_nine + d[i];</span><br><span class="line">            <span class="built_in">swap</span>(state[pos_of_nine], state[next_pos_of_nine]);</span><br><span class="line">            <span class="type">int</span> next_idx = <span class="built_in">cantor</span>(state);</span><br><span class="line">            <span class="keyword">if</span> (dist[next_idx] &gt; dist[idx] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[next_idx] = dist[idx] + <span class="number">1</span>;</span><br><span class="line">                path[next_idx] = path[idx] + ds[i];</span><br><span class="line">                q.<span class="built_in">emplace</span>(<span class="built_in">f</span>(state) + dist[next_idx], state);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(state[pos_of_nine], state[next_pos_of_nine]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; ch[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">            cin &gt;&gt; ch[i];</span><br><span class="line">        string start, seq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[i] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">                start += <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                start += ch[i], seq += ch[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span> (seq[i] &gt; seq[j])</span><br><span class="line">                    ++cnt;</span><br><span class="line">        <span class="keyword">if</span> (cnt &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;unsolvable&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">bfs</span>(start) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="HDU-3567-Eight-II"><a href="#HDU-3567-Eight-II" class="headerlink" title="HDU-3567 Eight II"></a>HDU-3567 Eight II</h3><p>跟上一题相比，测试用例变多，每个用例指定了起始点和终点，对应的还是可以</p>
<ul>
<li>预处理九种基本的起始点，再将每个用例的起始点映射成基本起始点中的一个，再按照同样的映射规则将终点作映射，最后跟上一题一样用 BFS 搜索并记录方案。</li>
<li>或者，因为题目确保起始点能到达终点，所以对每个用例都可以直接用 IDA* 算法搜索路径。</li>
</ul>
<div class="tabs" id="eight-ii"><ul class="nav-tabs"><li class="tab active"><a href="#eight-ii-1">BFS</a></li><li class="tab"><a href="#eight-ii-2">IDA*</a></li></ul><div class="tab-content"><div class="tab-pane active" id="eight-ii-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>, M = <span class="number">362880</span>;</span><br><span class="line"><span class="type">int</span> t, fact[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>&#125;;</span><br><span class="line">string ds = <span class="string">&quot;dlru&quot;</span>; <span class="comment">// direction (start =&gt; end), lexicographically ordered.</span></span><br><span class="line"><span class="type">int</span> d[] = &#123;<span class="number">3</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-3</span>&#125;;</span><br><span class="line"><span class="type">int</span> st[N][M], path[N][M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cantor</span><span class="params">(<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; N; ++j)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">        res += cnt * fact[N - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">array_to_int</span><span class="params">(<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">        res = res * <span class="number">10</span> + a[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> start[], <span class="type">int</span> state_idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">array_to_int</span>(start), idx = <span class="built_in">cantor</span>(start), a[<span class="number">9</span>];</span><br><span class="line">    q.<span class="built_in">push</span>(num), st[state_idx][idx] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = q.<span class="built_in">front</span>(), pos_of_nine;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>, x = num; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == <span class="number">9</span>)</span><br><span class="line">                pos_of_nine = i;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">cantor</span>(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) <span class="comment">// dlru</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos_of_nine == <span class="number">0</span> &amp;&amp; (i == <span class="number">1</span> || i == <span class="number">3</span>)    <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">1</span> &amp;&amp; i == <span class="number">3</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">2</span> &amp;&amp; (i == <span class="number">2</span> || i == <span class="number">3</span>) <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">3</span> &amp;&amp; i == <span class="number">1</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">5</span> &amp;&amp; i == <span class="number">2</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">6</span> &amp;&amp; (i == <span class="number">1</span> || i == <span class="number">0</span>) <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">7</span> &amp;&amp; i == <span class="number">0</span>             <span class="comment">//</span></span><br><span class="line">                || pos_of_nine == <span class="number">8</span> &amp;&amp; (i == <span class="number">0</span> || i == <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> next_pos_of_nine = pos_of_nine + d[i];</span><br><span class="line">            <span class="built_in">swap</span>(a[pos_of_nine], a[next_pos_of_nine]);</span><br><span class="line">            <span class="type">int</span> next_idx = <span class="built_in">cantor</span>(a);</span><br><span class="line">            <span class="keyword">if</span> (st[state_idx][next_idx] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st[state_idx][next_idx] = i;</span><br><span class="line">                path[state_idx][next_idx] = idx;</span><br><span class="line">                <span class="type">int</span> next_num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; ++j)</span><br><span class="line">                    next_num = next_num * <span class="number">10</span> + a[j];</span><br><span class="line">                q.<span class="built_in">push</span>(next_num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(a[pos_of_nine], a[next_pos_of_nine]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> state[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">-1</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="built_in">memset</span>(path, <span class="number">-1</span>, <span class="keyword">sizeof</span> path);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &gt;= <span class="number">0</span>; --i) <span class="comment">// list all possible basic states.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bfs</span>(state, i); <span class="comment">// search all the target states that current statge can go to and record down the path.</span></span><br><span class="line">        <span class="keyword">if</span> (i)</span><br><span class="line">            <span class="built_in">swap</span>(state[i], state[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> map_to_basic_state[<span class="number">9</span>], to[<span class="number">9</span>], idx_of_basic_state;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> _ = <span class="number">1</span>; _ &lt;= t; ++_)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, cnt = <span class="number">1</span>; i &lt; <span class="number">9</span>; ++i) <span class="comment">// map state to one of the basic state.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">                idx_of_basic_state = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                map_to_basic_state[s[i] - <span class="string">&#x27;0&#x27;</span>] = cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) <span class="comment">// then map target state accordingly.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">                to[i] = <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                to[i] = map_to_basic_state[s[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> idx_of_target_state = <span class="built_in">cantor</span>(to);</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">while</span> (idx_of_target_state != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += ds[st[idx_of_basic_state][idx_of_target_state]];</span><br><span class="line">            idx_of_target_state = path[idx_of_basic_state][idx_of_target_state];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; _ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; (ans.<span class="built_in">size</span>() - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = ans.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            cout &lt;&lt; ans[i];</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="eight-ii-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> pis = pair&lt;<span class="type">int</span>, string&gt;;</span><br><span class="line"><span class="type">int</span> t, depth;</span><br><span class="line">string now, target;</span><br><span class="line"><span class="type">int</span> target_pos[<span class="number">8</span>];</span><br><span class="line">string ds = <span class="string">&quot;dlru&quot;</span>; <span class="comment">// direction (start =&gt; end), lexicographically ordered.</span></span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> path[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (now[i] != <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> target_num = now[i] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            res += <span class="built_in">abs</span>(i / <span class="number">3</span> - target_pos[target_num] / <span class="number">3</span>) + <span class="built_in">abs</span>(i % <span class="number">3</span> - target_pos[target_num] % <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">f</span>() + u &gt; depth)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (now == target)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> x_pos;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (now[i] == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x_pos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> x = x_pos / <span class="number">3</span>, y = x_pos % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> nx = x + dx[i], ny = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="number">0</span> &amp;&amp; i + path[u - <span class="number">1</span>] == <span class="number">3</span>) <span class="comment">// path[u] contradicts to path[u-1].</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= <span class="number">3</span> || ny &lt; <span class="number">0</span> || ny &gt;= <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">swap</span>(now[x * <span class="number">3</span> + y], now[nx * <span class="number">3</span> + ny]);</span><br><span class="line">        path[u] = i;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(now[x * <span class="number">3</span> + y], now[nx * <span class="number">3</span> + ny]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> _ = <span class="number">1</span>; _ &lt;= t; ++_)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; now &gt;&gt; target;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (target[i] != <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">                target_pos[target[i] - <span class="string">&#x27;1&#x27;</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (depth = <span class="number">0</span>;; ++depth)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; _ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; depth &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depth; ++i)</span><br><span class="line">            cout &lt;&lt; ds[path[i]];</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="HDU-2181-哈密顿绕行世界问题"><a href="#HDU-2181-哈密顿绕行世界问题" class="headerlink" title="HDU-2181 哈密顿绕行世界问题"></a>HDU-2181 哈密顿绕行世界问题</h3><p>按字典序将路径排序再 DFS 即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> g[<span class="number">21</span>][<span class="number">3</span>], m, path[<span class="number">21</span>], ans_cnt;</span><br><span class="line"><span class="type">bool</span> st[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> path_idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    path[path_idx] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = g[u][i];</span><br><span class="line">        <span class="keyword">if</span> (!st[v])</span><br><span class="line">            <span class="built_in">dfs</span>(v, path_idx + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v == m &amp;&amp; path_idx == <span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; ++ans_cnt &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; path[j];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; g[i][<span class="number">0</span>] &gt;&gt; g[i][<span class="number">1</span>] &gt;&gt; g[i][<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">sort</span>(g[i], g[i] + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; m, m)</span><br><span class="line">    &#123;</span><br><span class="line">        ans_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="built_in">dfs</span>(m, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-3533-Escape"><a href="#HDU-3533-Escape" class="headerlink" title="HDU-3533 Escape"></a>HDU-3533 Escape</h3><p>预处理各个位置在某一时刻是否有子弹，再使用 BFS 或者 A* (注：因为不一定有解，所以 A* 时间复杂度可能很高) 算法寻找逃跑路径。</p>
<div class="tabs" id="escape"><ul class="nav-tabs"><li class="tab active"><a href="#escape-1">BFS</a></li><li class="tab"><a href="#escape-2">A*</a></li></ul><div class="tab-content"><div class="tab-pane active" id="escape-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> m, n, k, d, ts[N], vs[N], xs[N], ys[N], ds[N];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;; <span class="comment">// N, S, E, W, N/A.</span></span><br><span class="line"><span class="type">bool</span> castle[N][N], bullet[N][N][<span class="number">1001</span>], st[N][N][<span class="number">1001</span>];</span><br><span class="line">queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(bullet, <span class="number">0</span>, <span class="keyword">sizeof</span> bullet);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) <span class="comment">// each castle.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= d; j += ts[i]) <span class="comment">// a bullet shot at each period.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;; ++k) <span class="comment">// each unit.</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x = xs[i] + dir[ds[i]][<span class="number">0</span>] * k; <span class="comment">// pos of bullet.</span></span><br><span class="line">                <span class="type">int</span> y = ys[i] + dir[ds[i]][<span class="number">1</span>] * k;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; m || y &lt; <span class="number">0</span> || y &gt; n || castle[x][y])</span><br><span class="line">                    <span class="keyword">break</span>;          <span class="comment">// out of graph, or blcoked by a castle.</span></span><br><span class="line">                <span class="keyword">if</span> (k % vs[i] == <span class="number">0</span>) <span class="comment">// position with integer coordinate.</span></span><br><span class="line">                    <span class="keyword">if</span> ((j + k / vs[i]) &lt;= d)</span><br><span class="line">                        bullet[x][y][j + k / vs[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (x == m &amp;&amp; y == n)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; d)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>], ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt; m || ny &lt; <span class="number">0</span> || ny &gt; n || st[nx][ny][t + <span class="number">1</span>] <span class="comment">//</span></span><br><span class="line">                        || castle[nx][ny] || bullet[nx][ny][t + <span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    st[nx][ny][t + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (++t &gt; d)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bad luck!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// m and n are the size of the battle ground,</span></span><br><span class="line">    <span class="comment">// k is the number of castles</span></span><br><span class="line">    <span class="comment">// and d is the units of energy Little A initially has.</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; m &gt;&gt; n &gt;&gt; k &gt;&gt; d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(castle, <span class="number">0</span>, <span class="keyword">sizeof</span> castle);</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// direction, period, velocity, location(x), location(y).</span></span><br><span class="line">            cin &gt;&gt; c &gt;&gt; ts[i] &gt;&gt; vs[i] &gt;&gt; xs[i] &gt;&gt; ys[i];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                ds[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                ds[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                ds[i] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ds[i] = <span class="number">3</span>;</span><br><span class="line">            castle[xs[i]][ys[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="escape-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> m, n, k, d, ts[N], vs[N], xs[N], ys[N], ds[N];</span><br><span class="line"><span class="type">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;; <span class="comment">// N, S, E, W, N/A.</span></span><br><span class="line"><span class="type">bool</span> castle[N][N], bullet[N][N][<span class="number">1001</span>], st[N][N][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y, g, f;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> g, <span class="type">int</span> f) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">g</span>(g), <span class="built_in">f</span>(f)&#123;&#125;;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;a) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> f &gt; a.f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(bullet, <span class="number">0</span>, <span class="keyword">sizeof</span> bullet);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) <span class="comment">// each castle.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= d; j += ts[i]) <span class="comment">// a bullet shot at each period.</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;; ++k) <span class="comment">// each unit.</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> x = xs[i] + dir[ds[i]][<span class="number">0</span>] * k; <span class="comment">// pos of bullet.</span></span><br><span class="line">                <span class="type">int</span> y = ys[i] + dir[ds[i]][<span class="number">1</span>] * k;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt; m || y &lt; <span class="number">0</span> || y &gt; n || castle[x][y])</span><br><span class="line">                    <span class="keyword">break</span>;          <span class="comment">// out of graph, or blcoked by a castle.</span></span><br><span class="line">                <span class="keyword">if</span> (k % vs[i] == <span class="number">0</span>) <span class="comment">// position with integer coordinate.</span></span><br><span class="line">                    <span class="keyword">if</span> ((j + k / vs[i]) &lt;= d)</span><br><span class="line">                        bullet[x][y][j + k / vs[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x - n) + <span class="built_in">abs</span>(y - m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [x, y, g, f] = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (x == m &amp;&amp; y == n)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (g &lt; d)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + dir[i][<span class="number">0</span>], ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt; m || ny &lt; <span class="number">0</span> || ny &gt; n || st[nx][ny][g + <span class="number">1</span>] <span class="comment">//</span></span><br><span class="line">                    || castle[nx][ny] || bullet[nx][ny][g + <span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                st[nx][ny][g + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nx, ny, g + <span class="number">1</span>, g + <span class="built_in">h</span>(nx, ny));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bad luck!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// m and n are the size of the battle ground,</span></span><br><span class="line">    <span class="comment">// k is the number of castles</span></span><br><span class="line">    <span class="comment">// and d is the units of energy Little A initially has.</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; m &gt;&gt; n &gt;&gt; k &gt;&gt; d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(castle, <span class="number">0</span>, <span class="keyword">sizeof</span> castle);</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// direction, period, velocity, location(x), location(y).</span></span><br><span class="line">            cin &gt;&gt; c &gt;&gt; ts[i] &gt;&gt; vs[i] &gt;&gt; xs[i] &gt;&gt; ys[i];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                ds[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                ds[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                ds[i] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ds[i] = <span class="number">3</span>;</span><br><span class="line">            castle[xs[i]][ys[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="HDU-1560-DNA-sequence"><a href="#HDU-1560-DNA-sequence" class="headerlink" title="HDU-1560 DNA sequence"></a>HDU-1560 DNA sequence</h3><p>这题如果单纯用 DFS ，搜索空间比较大，会 TLE。可以用 IDA* 优化搜索过程，先将最长序列的长度作为初始搜索深度，再配合启发函数加速搜索。启发函数可以是，</p>
<ul>
<li>序列中未匹配部分的最长长度，</li>
<li>或者叠加序列中未匹配的 ACGT 长度（即，至少仍需多少个 A + 至少仍需多少个 C + …）。</li>
</ul>
<div class="tabs" id="dna-sequence"><ul class="nav-tabs"><li class="tab"><a href="#dna-sequence-1">DFS(TLE)</a></li><li class="tab active"><a href="#dna-sequence-2">IDA*</a></li><li class="tab"><a href="#dna-sequence-3">IDA*(superior heuristic function)</a></li></ul><div class="tab-content"><div class="tab-pane" id="dna-sequence-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, n, ans;</span><br><span class="line">string seq[N];</span><br><span class="line"><span class="type">char</span> dna[] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;T&#x27;</span>&#125;;</span><br><span class="line"><span class="type">int</span> now[N];</span><br><span class="line"><span class="type">int</span> target[N];</span><br><span class="line"><span class="type">int</span> bck[<span class="number">40</span>][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; ans)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = u;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(bck[u], now, <span class="keyword">sizeof</span> now);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (now[j] &lt; target[j] &amp;&amp; seq[j][now[j]] == dna[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (++now[j] == target[j])</span><br><span class="line">                    ++cnt;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>, c + cnt);</span><br><span class="line">            <span class="built_in">memcpy</span>(now, bck[u], <span class="keyword">sizeof</span> now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        ans = n * <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">memset</span>(now, <span class="number">0</span>, <span class="keyword">sizeof</span> now);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; seq[i];</span><br><span class="line">            target[i] = seq[i].<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="dna-sequence-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, n;</span><br><span class="line">string seq[N];</span><br><span class="line"><span class="type">char</span> dna[] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;T&#x27;</span>&#125;;</span><br><span class="line"><span class="type">int</span> now[N], depth;</span><br><span class="line"><span class="type">int</span> target[N];</span><br><span class="line"><span class="type">int</span> bck[<span class="number">40</span>][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        res = <span class="built_in">max</span>(res, target[i] - now[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u + <span class="built_in">f</span>() &gt; depth)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(bck[u], now, <span class="keyword">sizeof</span> now);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (now[j] &lt; target[j] &amp;&amp; seq[j][now[j]] == dna[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (++now[j] == target[j])</span><br><span class="line">                    ++cnt;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, c + cnt))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(now, bck[u], <span class="keyword">sizeof</span> now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">memset</span>(now, <span class="number">0</span>, <span class="keyword">sizeof</span> now);</span><br><span class="line">        depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; seq[i];</span><br><span class="line">            target[i] = seq[i].<span class="built_in">size</span>();</span><br><span class="line">            depth = <span class="built_in">max</span>(depth, target[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            ++depth;</span><br><span class="line">        cout &lt;&lt; depth &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="dna-sequence-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t, n, seq[N][<span class="number">5</span>], cnt[N][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> now[N], target[N], depth;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> max_lack = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            max_lack = <span class="built_in">max</span>(max_lack, cnt[j][i]);</span><br><span class="line">        res += max_lack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u + <span class="built_in">f</span>() &gt; depth)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cc = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> act[n] = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (now[j] &lt; target[j] &amp;&amp; seq[j][now[j]] == i)</span><br><span class="line">            &#123;</span><br><span class="line">                --cnt[j][seq[j][now[j]]], act[j] = <span class="number">1</span>, flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (++now[j] == target[j])</span><br><span class="line">                    ++cc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, c + cc))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (act[j])</span><br><span class="line">                    now[j]--, cnt[j][seq[j][now[j]]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">memset</span>(now, <span class="number">0</span>, <span class="keyword">sizeof</span> now);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        depth = <span class="number">0</span>;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            target[i] = s.<span class="built_in">size</span>();</span><br><span class="line">            depth = <span class="built_in">max</span>(depth, target[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; target[i]; ++j)</span><br><span class="line">                <span class="keyword">if</span> (s[j] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">                    seq[i][j] = <span class="number">0</span>, cnt[i][<span class="number">0</span>]++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">                    seq[i][j] = <span class="number">1</span>, cnt[i][<span class="number">1</span>]++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">                    seq[i][j] = <span class="number">2</span>, cnt[i][<span class="number">2</span>]++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    seq[i][j] = <span class="number">3</span>, cnt[i][<span class="number">3</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            ++depth;</span><br><span class="line">        cout &lt;&lt; depth &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="ZOJ-2477-Magic-Cube"><a href="#ZOJ-2477-Magic-Cube" class="headerlink" title="ZOJ-2477 Magic Cube"></a>ZOJ-2477 Magic Cube</h3><p>题目限定五步内还原三阶魔方，可以使用 IDA* 搜索。因为每个面的中心颜色是不变的，即目标状态是确定的，又因为每次旋转最多更改同一面三个位置的颜色，所以可以找出与中心颜色差最多的一面，取(最大差值+2)&#x2F;3<br>为估价函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         0  1  2</span></span><br><span class="line"><span class="comment">         3  4  5</span></span><br><span class="line"><span class="comment">         6  7  8</span></span><br><span class="line"><span class="comment">9  10 11 12 13 14 15 16 17 18 19 20</span></span><br><span class="line"><span class="comment">21 22 23 24 25 26 27 28 29 30 31 32</span></span><br><span class="line"><span class="comment">33 34 35 36 37 38 39 40 41 42 43 44</span></span><br><span class="line"><span class="comment">         45 46 47</span></span><br><span class="line"><span class="comment">         48 49 50</span></span><br><span class="line"><span class="comment">         51 52 53</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// indexes of each points (without centre) in each face.</span></span><br><span class="line"><span class="type">int</span> idx[<span class="number">6</span>][<span class="number">8</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,         <span class="comment">//</span></span><br><span class="line">    &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>&#125;,  <span class="comment">//</span></span><br><span class="line">    &#123;<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>&#125;, <span class="comment">//</span></span><br><span class="line">    &#123;<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>&#125;, <span class="comment">//</span></span><br><span class="line">    &#123;<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>&#125;, <span class="comment">//</span></span><br><span class="line">    &#123;<span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> centre[<span class="number">6</span>] = &#123;<span class="number">4</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">49</span>&#125;; <span class="comment">// centre indexes.</span></span><br><span class="line"><span class="comment">// there are 12 = (clock-wise + counter clock-wisk) * (6 faces)</span></span><br><span class="line"><span class="comment">// kinds of rotation. For each rotation, centre remains, the other</span></span><br><span class="line"><span class="comment">// 20 = (8 cubes) + (3 cubes) * (4 faces) cubes get rotated.</span></span><br><span class="line"><span class="type">int</span> rotation[<span class="number">12</span>][<span class="number">20</span>] = &#123;</span><br><span class="line">    <span class="comment">// face 0.</span></span><br><span class="line">    <span class="comment">// 11 &lt;=&gt; 9, 23 &lt;=&gt; 10, ... , 44 &lt;=&gt; 45.</span></span><br><span class="line">    &#123;<span class="number">11</span>, <span class="number">23</span>, <span class="number">35</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">45</span>, <span class="number">36</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">44</span>&#125;, <span class="comment">// direction 1.</span></span><br><span class="line">    &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">35</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">36</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">45</span>&#125;, <span class="comment">// direction -1.</span></span><br><span class="line">    <span class="comment">// face 1.</span></span><br><span class="line">    <span class="comment">// 14 &lt;=&gt; 12, 13 &lt;=&gt; 24, ... , 35 &lt;=&gt; 47.</span></span><br><span class="line">    &#123;<span class="number">14</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">36</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">35</span>&#125;, <span class="comment">// direction 1.</span></span><br><span class="line">    &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">35</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>&#125;, <span class="comment">// direction -1.</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#123;<span class="number">17</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">47</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">38</span>&#125;, <span class="comment">// ...</span></span><br><span class="line">    &#123;<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">47</span>, <span class="number">50</span>, <span class="number">53</span>&#125;,</span><br><span class="line">    &#123;<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">29</span>, <span class="number">41</span>&#125;,</span><br><span class="line">    &#123;<span class="number">42</span>, <span class="number">30</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">33</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;,</span><br><span class="line">    &#123;<span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>&#125;,</span><br><span class="line">    &#123;<span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">36</span>, <span class="number">35</span>, <span class="number">34</span>, <span class="number">33</span>&#125;,</span><br><span class="line">    &#123;<span class="number">51</span>, <span class="number">48</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">36</span>, <span class="number">35</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> t, depth, ans[<span class="number">6</span>];</span><br><span class="line"><span class="type">char</span> ch, a[<span class="number">54</span>];</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get_in</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">f</span><span class="params">(<span class="type">char</span> *maze)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max_diff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (maze[idx[i][j]] != maze[centre[i]])</span><br><span class="line">                ++diff;</span><br><span class="line">        max_diff = <span class="built_in">max</span>(max_diff, diff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// by 1 rotation,</span></span><br><span class="line">    <span class="comment">// we can swith color of 3 (at most) cubes that are in the same face.</span></span><br><span class="line">    <span class="keyword">return</span> (max_diff + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">char</span> *a, <span class="type">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u + <span class="built_in">f</span>(a) &gt; depth)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u == depth)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i ^ pre) == <span class="number">1</span>) <span class="comment">// rotate back?</span></span><br><span class="line">            <span class="keyword">continue</span>;       <span class="comment">// no!</span></span><br><span class="line">        <span class="type">char</span> b[<span class="number">54</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(b, a, <span class="number">54</span> * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        ans[depth - u] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; ++j)</span><br><span class="line">            b[rotation[i][j]] = a[rotation[i ^ <span class="number">1</span>][j]];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, b, i))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">54</span>; ++i)</span><br><span class="line">            a[i] = <span class="built_in">get_in</span>();</span><br><span class="line">        depth = <span class="built_in">f</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; depth &lt;= <span class="number">5</span>; ++depth)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(<span class="number">0</span>, a, <span class="number">-1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, depth);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = depth; j &gt; <span class="number">0</span>; --j)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d %d%c&quot;</span>, ans[j] / <span class="number">2</span>, (ans[j] &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>, j &gt; <span class="number">1</span> ? <span class="string">&#x27; &#x27;</span> : <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-3085-Nightmare-Ⅱ"><a href="#HDU-3085-Nightmare-Ⅱ" class="headerlink" title="HDU-3085 Nightmare Ⅱ"></a>HDU-3085 Nightmare Ⅱ</h3><p>双向 BFS，M&#x2F;G 走，用与 Z 的距离判定是否会被抓到，只要双方都能走到一个不被抓到的点即成功。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">800</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, z, zs[<span class="number">2</span>][<span class="number">2</span>], step, ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line">queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q[<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> st[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">catched</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x - zs[<span class="number">0</span>][<span class="number">0</span>]) + <span class="built_in">abs</span>(y - zs[<span class="number">0</span>][<span class="number">1</span>]) &lt;= <span class="number">2</span> * step || <span class="comment">//</span></span><br><span class="line">           <span class="built_in">abs</span>(x - zs[<span class="number">1</span>][<span class="number">0</span>]) + <span class="built_in">abs</span>(y - zs[<span class="number">1</span>][<span class="number">1</span>]) &lt;= <span class="number">2</span> * step;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sz = q[p].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (sz--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [x, y] = q[p].<span class="built_in">front</span>();</span><br><span class="line">        q[p].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">catched</span>(x, y, step))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m || <span class="comment">//</span></span><br><span class="line">                g[nx][ny] == <span class="string">&#x27;X&#x27;</span> || st[p][nx][ny] || <span class="built_in">catched</span>(nx, ny, step))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            st[p][nx][ny] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (st[<span class="number">0</span>][nx][ny] &amp;&amp; st[<span class="number">1</span>][nx][ny])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            q[p].<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q[<span class="number">0</span>].<span class="built_in">size</span>() || q[<span class="number">1</span>].<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ++step;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">bfs</span>(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">bfs</span>(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">bfs</span>(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">bfs</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        z = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="keyword">while</span> (q[<span class="number">0</span>].<span class="built_in">size</span>())</span><br><span class="line">            q[<span class="number">0</span>].<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span> (q[<span class="number">1</span>].<span class="built_in">size</span>())</span><br><span class="line">            q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; g[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    zs[z][<span class="number">0</span>] = i, zs[z][<span class="number">1</span>] = j;</span><br><span class="line">                    z++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">                    q[<span class="number">0</span>].<span class="built_in">emplace</span>(i, j), st[<span class="number">0</span>][i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">                    q[<span class="number">1</span>].<span class="built_in">emplace</span>(i, j), st[<span class="number">1</span>][i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">solve</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-1067-Gap"><a href="#HDU-1067-Gap" class="headerlink" title="HDU-1067 Gap"></a>HDU-1067 Gap</h3><p>一眼 BFS，关键是状态表示。可以将数字当作 ASCII 码，转成对应字符，连接成串就是当前状态。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="function">string <span class="title">start</span><span class="params">(<span class="number">32</span>, <span class="number">1</span>)</span>, <span class="title">target</span><span class="params">(<span class="number">32</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveChar</span><span class="params">(string &amp;str, <span class="type">char</span> ch, <span class="type">int</span> new_idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; <span class="number">32</span> &amp;&amp; str[idx] != ch)</span><br><span class="line">        ++idx;</span><br><span class="line">    <span class="keyword">if</span> (idx != <span class="number">32</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str[new_idx] = ch;</span><br><span class="line">        str[idx] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;string&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    unordered_set&lt;string&gt; hash;</span><br><span class="line">    hash.<span class="built_in">insert</span>(start);</span><br><span class="line">    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            string u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (u == target)</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (u[i * <span class="number">8</span> + j] == <span class="number">1</span> &amp;&amp; u[i * <span class="number">8</span> + j - <span class="number">1</span>] != <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        string v = u;</span><br><span class="line">                        <span class="built_in">moveChar</span>(v, u[i * <span class="number">8</span> + j - <span class="number">1</span>] + <span class="number">1</span>, i * <span class="number">8</span> + j);</span><br><span class="line">                        <span class="keyword">if</span> (hash.<span class="built_in">find</span>(v) == hash.<span class="built_in">end</span>())</span><br><span class="line">                        &#123;</span><br><span class="line">                            hash.<span class="built_in">insert</span>(v);</span><br><span class="line">                            q.<span class="built_in">push</span>(v);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; ++j)</span><br><span class="line">            target[i * <span class="number">8</span> + j] = (i + <span class="number">1</span>) * <span class="number">10</span> + (j + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    start = <span class="built_in">string</span>(<span class="number">32</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, x; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">1</span>)</span><br><span class="line">                    start[(x / <span class="number">10</span> - <span class="number">1</span>) * <span class="number">8</span>] = x, start[i * <span class="number">8</span> + j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    start[i * <span class="number">8</span> + j] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-2102-A计划"><a href="#HDU-2102-A计划" class="headerlink" title="HDU-2102 A计划"></a>HDU-2102 A计划</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c, n, m, t, pz, px, py, ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> g[<span class="number">2</span>][N][N];</span><br><span class="line">queue&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="type">bool</span> st[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    st[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (sz--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> [z, x, y] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (g[z][x][y] == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>],</span><br><span class="line">                    nz = g[z][nx][ny] == <span class="string">&#x27;#&#x27;</span> ? <span class="number">1</span> - z : z;</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[z][nx][ny] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (g[z][nx][ny] == <span class="string">&#x27;#&#x27;</span> &amp;&amp; (g[nz][nx][ny] == <span class="string">&#x27;*&#x27;</span> || g[nz][nx][ny] == <span class="string">&#x27;#&#x27;</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (st[nz][nx][ny])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                st[nz][nx][ny] = <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nz, nx, ny);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (--t &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">    <span class="keyword">while</span> (c--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;t);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i][j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="built_in">bfs</span>() ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HDU-3001-Travelling"><a href="#HDU-3001-Travelling" class="headerlink" title="HDU-3001 Travelling"></a>HDU-3001 Travelling</h3><div class="tabs" id="travelling"><ul class="nav-tabs"><li class="tab"><a href="#travelling-1">DFS(TLE)</a></li><li class="tab active"><a href="#travelling-2">三进制状态压缩</a></li></ul><div class="tab-content"><div class="tab-pane" id="travelling-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">11</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> cnt, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cost &gt;= ans)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt == n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = cost;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++st[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">        <span class="keyword">if</span> (u != v &amp;&amp; g[u][v] != INF &amp;&amp; st[v] &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">dfs</span>(v, cnt + (st[v] == <span class="number">0</span>), cost + g[u][v]);</span><br><span class="line">    --st[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, a, b, c; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="built_in">dfs</span>(i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans == INF ? <span class="number">-1</span> : ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="travelling-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> pow3[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>, <span class="number">81</span>, <span class="number">243</span>, <span class="number">729</span>, <span class="number">2187</span>, <span class="number">6561</span>, <span class="number">19683</span>, <span class="number">59049</span>&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">11</span>, M = <span class="number">59049</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, ans;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> f[M][N];</span><br><span class="line"><span class="type">int</span> st[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) <span class="comment">// state i.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">10</span>; j &gt;= <span class="number">0</span>; --j) <span class="comment">// position j.</span></span><br><span class="line">            <span class="keyword">if</span> (t / pow3[j])          <span class="comment">// flagged or not.</span></span><br><span class="line">                ++st[i], t %= pow3[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">        ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, a, b, c; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            --a, --b;</span><br><span class="line">            g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            f[pow3[i]][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pow3[n]; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i / pow3[j]) % <span class="number">3</span>) <span class="comment">// if state i flagged in position j.</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">                        <span class="comment">// k =&gt; j.</span></span><br><span class="line">                        f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - pow3[j]][k] + g[k][j]);</span><br><span class="line">                <span class="keyword">if</span> (st[i] == n) <span class="comment">// valid final state.</span></span><br><span class="line">                    ans = <span class="built_in">min</span>(ans, f[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans == INF ? <span class="number">-1</span> : ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>kuangbin</category>
      </categories>
      <tags>
        <tag>kuangbin</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>kuangbin 专题三 Dancing Links</title>
    <url>/kuangbin/kuangbin-%E4%B8%93%E9%A2%98%E4%B8%89-dancing-links/</url>
    <content><![CDATA[<p>题目详单见 <a href="https://vjudge.net/article/187">[kuangbin带你飞]专题1-23</a>。</p>
<p>&#x2F;&#x2F; TODO</p>
<span id="more"></span>

<h3 id="HUST-1017-Exact-cover"><a href="#HUST-1017-Exact-cover" class="headerlink" title="HUST-1017 Exact cover"></a>HUST-1017 Exact cover</h3><!-- more -->

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ZOJ-3209-Treasure-Map"><a href="#ZOJ-3209-Treasure-Map" class="headerlink" title="ZOJ-3209 Treasure Map"></a>ZOJ-3209 Treasure Map</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HDU-2295-Radar"><a href="#HDU-2295-Radar" class="headerlink" title="HDU-2295 Radar"></a>HDU-2295 Radar</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FZU-1686-神龙的难题"><a href="#FZU-1686-神龙的难题" class="headerlink" title="FZU-1686 神龙的难题"></a>FZU-1686 神龙的难题</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="POJ-1084-Square-Destroyer"><a href="#POJ-1084-Square-Destroyer" class="headerlink" title="POJ-1084 Square Destroyer"></a>POJ-1084 Square Destroyer</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="POJ-3074-Sudoku"><a href="#POJ-3074-Sudoku" class="headerlink" title="POJ-3074 Sudoku"></a>POJ-3074 Sudoku</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ZOJ-3122-Sudoku"><a href="#ZOJ-3122-Sudoku" class="headerlink" title="ZOJ-3122 Sudoku"></a>ZOJ-3122 Sudoku</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HDU-4069-Squiggly-Sudoku"><a href="#HDU-4069-Squiggly-Sudoku" class="headerlink" title="HDU-4069 Squiggly Sudoku"></a>HDU-4069 Squiggly Sudoku</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HDU-3335-Divisibility"><a href="#HDU-3335-Divisibility" class="headerlink" title="HDU-3335 Divisibility"></a>HDU-3335 Divisibility</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HDU-4979-A-simple-math-problem"><a href="#HDU-4979-A-simple-math-problem" class="headerlink" title="HDU-4979 A simple math problem."></a>HDU-4979 A simple math problem.</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HDU-5046-Airport"><a href="#HDU-5046-Airport" class="headerlink" title="HDU-5046 Airport"></a>HDU-5046 Airport</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kuangbin</category>
      </categories>
      <tags>
        <tag>kuangbin</tag>
        <tag>Dancing Links</tag>
      </tags>
  </entry>
  <entry>
    <title>kuangbin 专题四 最短路练习</title>
    <url>/kuangbin/kuangbin-%E4%B8%93%E9%A2%98%E5%9B%9B-%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>题目详单见 <a href="https://vjudge.net/article/187">[kuangbin带你飞]专题1-23</a>。</p>
<h3 id="POJ-2387-Til-the-Cows-Come-Home"><a href="#POJ-2387-Til-the-Cows-Come-Home" class="headerlink" title="POJ-2387 Til the Cows Come Home"></a>POJ-2387 Til the Cows Come Home</h3><p>求最短路，方法参见 <a href="https://oi-wiki.org/graph/shortest-path/">最短路 - OI Wiki</a>。</p>
<span id="more"></span>

<div class="tabs" id="poj-2387"><ul class="nav-tabs"><li class="tab"><a href="#poj-2387-1">DFS(TLE)</a></li><li class="tab active"><a href="#poj-2387-2">Dijkstra</a></li></ul><div class="tab-content"><div class="tab-pane" id="poj-2387-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>, M = <span class="number">4002</span>;</span><br><span class="line"><span class="type">int</span> t, n, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], w[M], idx;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> ww)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++idx] = v, w[idx] = ww, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &gt;= ans)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = c;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (st[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[v] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, c + w[i]);</span><br><span class="line">        st[v] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, a, b, c; i &lt; t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    st[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(n, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="poj-2387-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>, M = <span class="number">4002</span>;</span><br><span class="line"><span class="type">int</span> t, n, ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], w[M], idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> d, u;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> node &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> d &gt; a.d; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> ww)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++idx] = v, w[idx] = ww, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[n] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, n&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (st[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w[i])</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dist[v] = dist[u] + w[i], v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, a, b, c; i &lt; t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    cout &lt;&lt; dist[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="POJ-2253-Frogger"><a href="#POJ-2253-Frogger" class="headerlink" title="POJ-2253 Frogger"></a>POJ-2253 Frogger</h3><p>极小化极大值，可以用最短路算法，需改更改松弛操作函数，从经典的 <code>f[x][y] = min(f[x][y], f[x][k]+f[k][y])</code> 转为 <code>f[i][j] = min(f[i][j], max(f[i][k], f[k][j]))</code>。本题也可以用<a href="https://oi-wiki.org/graph/mst/">最小生成树</a>算法。需要注意初始值大小，以及比较函数，与下一题相映照。</p>
<div class="tabs" id="poj-2253"><ul class="nav-tabs"><li class="tab"><a href="#poj-2253-1">最短路-Floyd</a></li><li class="tab active"><a href="#poj-2253-2">最短路-Dijkstra</a></li><li class="tab"><a href="#poj-2253-3">最小生成树-Kruskal</a></li></ul><div class="tab-content"><div class="tab-pane" id="poj-2253-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> t, n, x[N], y[N];</span><br><span class="line"><span class="type">double</span> dist[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                dist[i][j] = <span class="built_in">min</span>(dist[i][j], <span class="built_in">max</span>(dist[i][k], dist[k][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                dist[i][j] = dist[j][i] = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x[i] - x[j], <span class="number">2</span>) + <span class="built_in">pow</span>(y[i] - y[j], <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">floyd</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\nFrog Distance = %.3f\n\n&quot;</span>, ++t, dist[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="poj-2253-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> t, n, x[N], y[N];</span><br><span class="line"><span class="type">double</span> g[N][N], dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> w;</span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> node &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; q;</span><br><span class="line">    <span class="built_in">fill</span>(dist, dist + N, <span class="number">1e3</span>);</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (st[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; <span class="built_in">max</span>(dist[u], g[u][v]))</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dist[v] = <span class="built_in">max</span>(dist[u], g[u][v]), v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                g[i][j] = g[j][i] = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x[i] - x[j], <span class="number">2</span>) + <span class="built_in">pow</span>(y[i] - y[j], <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">dijkstra</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\nFrog Distance = %.3f\n\n&quot;</span>, ++t, dist[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="poj-2253-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> t, n, x[N], y[N], p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> w;</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> w &lt; a.w; &#125;</span><br><span class="line">&#125; e[N * N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            p[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, idx = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">double</span> w = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x[i] - x[j], <span class="number">2</span>) + <span class="built_in">pow</span>(y[i] - y[j], <span class="number">2</span>));</span><br><span class="line">                e[idx++] = &#123;w, i, j&#125;, e[idx++] = &#123;w, j, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">sort</span>(e, e + n * n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, len = n * n; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = <span class="built_in">find</span>(e[i].u), b = <span class="built_in">find</span>(e[i].v);</span><br><span class="line">            <span class="keyword">if</span> (a != b)</span><br><span class="line">                p[a] = b;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(<span class="number">1</span>) == <span class="built_in">find</span>(<span class="number">2</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d\nFrog Distance = %.3f\n\n&quot;</span>, ++t, e[i].w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="POJ-1797-Heavy-Transportation"><a href="#POJ-1797-Heavy-Transportation" class="headerlink" title="POJ-1797 Heavy Transportation"></a>POJ-1797 Heavy Transportation</h3><p>同上题，不过是反方向（极大化极小值）。此外，数据量较大不适合用 Floyd。稠密图，更适合用 Prim 而非 Kruskal。</p>
<div class="tabs" id="poj-1797"><ul class="nav-tabs"><li class="tab"><a href="#poj-1797-1">最短路-Dijkstra</a></li><li class="tab active"><a href="#poj-1797-2">最小生成树-Kruskal</a></li><li class="tab"><a href="#poj-1797-3">最小生成树-Prim</a></li></ul><div class="tab-content"><div class="tab-pane" id="poj-1797-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, g[N][N], dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> w, u;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> w &lt; a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">top</span>().u;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (st[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= n; ++v)</span><br><span class="line">            <span class="keyword">if</span> (g[u][v] &amp;&amp; dist[v] &lt; <span class="built_in">min</span>(dist[u], g[u][v]))</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dist[v] = <span class="built_in">min</span>(dist[u], g[u][v]), v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, a, b, c; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            g[a][b] = g[b][a] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dijkstra</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d:\n%d\n\n&quot;</span>, i, dist[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="poj-1797-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, p[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> w, u, v;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> w &gt; a.w; &#125;</span><br><span class="line">&#125; e[N * N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            p[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, a, b, c, idx = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            e[idx++] = &#123;c, a, b&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(e, e + m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = <span class="built_in">find</span>(e[j].u), b = <span class="built_in">find</span>(e[j].v);</span><br><span class="line">            <span class="keyword">if</span> (a != b)</span><br><span class="line">                p[a] = b;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(<span class="number">1</span>) == <span class="built_in">find</span>(n))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d:\n%d\n\n&quot;</span>, i, e[j].w);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="poj-1797-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> t, n, m, g[N][N], dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &lt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        st[t] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &lt; <span class="built_in">min</span>(dist[t], g[t][j]))</span><br><span class="line">                dist[j] = <span class="built_in">min</span>(dist[t], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, a, b, c, idx = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            g[a][b] = c, g[b][a] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d:\n%d\n\n&quot;</span>, i, <span class="built_in">prim</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="POJ-3268-Silver-Cow-Party"><a href="#POJ-3268-Silver-Cow-Party" class="headerlink" title="POJ-3268 Silver Cow Party"></a>POJ-3268 Silver Cow Party</h3><h3 id="POJ-1860-Currency-Exchange"><a href="#POJ-1860-Currency-Exchange" class="headerlink" title="POJ-1860 Currency Exchange"></a>POJ-1860 Currency Exchange</h3><h3 id="POJ-3259-Wormholes"><a href="#POJ-3259-Wormholes" class="headerlink" title="POJ-3259 Wormholes"></a>POJ-3259 Wormholes</h3><h3 id="POJ-1502-MPI-Maelstrom"><a href="#POJ-1502-MPI-Maelstrom" class="headerlink" title="POJ-1502 MPI Maelstrom"></a>POJ-1502 MPI Maelstrom</h3><h3 id="POJ-3660-Cow-Contest"><a href="#POJ-3660-Cow-Contest" class="headerlink" title="POJ-3660 Cow Contest"></a>POJ-3660 Cow Contest</h3><h3 id="POJ-2240-Arbitrage"><a href="#POJ-2240-Arbitrage" class="headerlink" title="POJ-2240 Arbitrage"></a>POJ-2240 Arbitrage</h3><h3 id="POJ-1511-Invitation-Cards"><a href="#POJ-1511-Invitation-Cards" class="headerlink" title="POJ-1511 Invitation Cards"></a>POJ-1511 Invitation Cards</h3><h3 id="POJ-3159-Candies"><a href="#POJ-3159-Candies" class="headerlink" title="POJ-3159 Candies"></a>POJ-3159 Candies</h3><h3 id="POJ-2502-Subway"><a href="#POJ-2502-Subway" class="headerlink" title="POJ-2502 Subway"></a>POJ-2502 Subway</h3><h3 id="POJ-1062-昂贵的聘礼"><a href="#POJ-1062-昂贵的聘礼" class="headerlink" title="POJ-1062 昂贵的聘礼"></a>POJ-1062 昂贵的聘礼</h3><h3 id="POJ-1847-Tram"><a href="#POJ-1847-Tram" class="headerlink" title="POJ-1847 Tram"></a>POJ-1847 Tram</h3><h3 id="LightOJ-1074-Extended-Traffic"><a href="#LightOJ-1074-Extended-Traffic" class="headerlink" title="LightOJ-1074 Extended Traffic"></a>LightOJ-1074 Extended Traffic</h3><h3 id="HDU-4725-The-Shortest-Path-in-Nya-Graph"><a href="#HDU-4725-The-Shortest-Path-in-Nya-Graph" class="headerlink" title="HDU-4725 The Shortest Path in Nya Graph"></a>HDU-4725 The Shortest Path in Nya Graph</h3><h3 id="HDU-3416-Marriage-Match-IV"><a href="#HDU-3416-Marriage-Match-IV" class="headerlink" title="HDU-3416 Marriage Match IV"></a>HDU-3416 Marriage Match IV</h3><h3 id="HDU-4370-0-or-1"><a href="#HDU-4370-0-or-1" class="headerlink" title="HDU-4370 0 or 1"></a>HDU-4370 0 or 1</h3><h3 id="POJ-3169-Layout"><a href="#POJ-3169-Layout" class="headerlink" title="POJ-3169 Layout"></a>POJ-3169 Layout</h3>]]></content>
      <categories>
        <category>kuangbin</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>kuangbin</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1004. Max Consecutive Ones III</title>
    <url>/LeetCode/leetcode-1004-max-consecutive-ones-iii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1004-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1004-solution-1">Binary Search</a></li><li class="tab"><a href="#leetcode-1004-solution-2">Sliding Window</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1004-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">P</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            P[i] = P[i - <span class="number">1</span>] + (<span class="number">1</span> - A[i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (right++ &lt; n) &#123;</span><br><span class="line">            left = <span class="built_in">lower_bound</span>(P.<span class="built_in">begin</span>(), P.<span class="built_in">end</span>(), P[right] - K) - P.<span class="built_in">begin</span>();</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1004-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[right++] == <span class="number">0</span>)</span><br><span class="line">                ++cnt;</span><br><span class="line">            <span class="keyword">while</span> (cnt &gt; K)</span><br><span class="line">                <span class="keyword">if</span> (A[left++] == <span class="number">0</span>)</span><br><span class="line">                    --cnt;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1018. Binary Prefix Divisible By 5</title>
    <url>/LeetCode/leetcode-1018-binary-prefix-divisible-by-5/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">prefixesDivBy5</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> mask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> i : A) &#123;</span><br><span class="line">            mask = ((mask &lt;&lt; <span class="number">1</span>) + i) % <span class="number">5</span>;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(mask == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1006. Clumsy Factorial</title>
    <url>/LeetCode/leetcode-1006-clumsy-factorial/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">clumsy</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>(N--);</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (N) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (idx = ++idx % <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                stk.<span class="built_in">top</span>() *= N--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                stk.<span class="built_in">top</span>() /= N--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                stk.<span class="built_in">push</span>(N--);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                stk.<span class="built_in">push</span>(-(N--));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            sum += stk.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1011. Capacity To Ship Packages Within D Days</title>
    <url>/LeetCode/leetcode-1011-capacity-to-ship-packages-within-d-days/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shipWithinDays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; weights, <span class="type">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = *<span class="built_in">max_element</span>(weights.<span class="built_in">begin</span>(), weights.<span class="built_in">end</span>()),</span><br><span class="line">            right = <span class="built_in">accumulate</span>(weights.<span class="built_in">begin</span>(), weights.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> dayCnt = <span class="number">1</span>, curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; w : weights) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curr + w &gt; mid) &#123;</span><br><span class="line">                    ++dayCnt;</span><br><span class="line">                    curr = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                curr += w;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dayCnt &lt;= D) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 103. Binary Tree Zigzag Level Order Traversal</title>
    <url>/LeetCode/leetcode-103-binary-tree-zigzag-level-order-traversal/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-103-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-103-solution-1">Recursion</a></li><li class="tab"><a href="#leetcode-103-solution-2">Iteration</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-103-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">zigzagLevelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">preorder</span>(root, <span class="number">0</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root, <span class="type">int</span> level, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (level &gt;= ans.<span class="built_in">size</span>())</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">auto</span>&amp; row = ans[level];</span><br><span class="line">        <span class="keyword">if</span> (level % <span class="number">2</span> == <span class="number">0</span>) row.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">else</span> row.<span class="built_in">insert</span>(row.<span class="built_in">begin</span>(), root-&gt;val);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left, level + <span class="number">1</span>, ans);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right, level + <span class="number">1</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-103-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">zigzagLevelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">bool</span> leftToRight = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            deque&lt;<span class="type">int</span>&gt; row;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">                <span class="keyword">auto</span> node = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (leftToRight) row.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">else</span> row.<span class="built_in">push_front</span>(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;row.<span class="built_in">begin</span>(), row.<span class="built_in">end</span>()&#125;);</span><br><span class="line">            leftToRight = !leftToRight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Breadth-first Search</tag>
        <tag>Tree</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1035. Uncrossed Lines</title>
    <url>/LeetCode/leetcode-1035-uncrossed-lines/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxUncrossedLines</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = nums1.<span class="built_in">size</span>(), n = nums2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> num1 = nums1[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> num2 = nums2[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (num1 == num2)</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1046. Last Stone Weight</title>
    <url>/LeetCode/leetcode-1046-last-stone-weight/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1046-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1046-solution-1">Cpp</a></li><li class="tab"><a href="#leetcode-1046-solution-2">Java</a></li><li class="tab"><a href="#leetcode-1046-solution-3">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1046-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeight</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s : stones)</span><br><span class="line">            q.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> y = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (y &gt; x)</span><br><span class="line">                q.<span class="built_in">push</span>(y - x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">empty</span>() ? <span class="number">0</span> : q.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1046-solution-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeight</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> stone : stones)</span><br><span class="line">            q.offer(stone);</span><br><span class="line">        <span class="keyword">while</span> (q.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="keyword">if</span> (y &gt; x) &#123;</span><br><span class="line">                q.offer(y - x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.isEmpty() ? <span class="number">0</span> : q.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1046-solution-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lastStoneWeight</span>(<span class="params">self, stones: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        q = [-stone <span class="keyword">for</span> stone <span class="keyword">in</span> stones]</span><br><span class="line">        heapq.heapify(q)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(q) &gt; <span class="number">1</span>:</span><br><span class="line">            y, x = heapq.heappop(q), heapq.heappop(q)</span><br><span class="line">            <span class="keyword">if</span> x != y:</span><br><span class="line">                heapq.heappush(q, y - x)</span><br><span class="line">        <span class="keyword">if</span> q: <span class="keyword">return</span> -q[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1047. Remove All Adjacent Duplicates In String</title>
    <url>/LeetCode/leetcode-1047-remove-all-adjacent-duplicates-in-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        string stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : S)</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">back</span>() == c)</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                stk.<span class="built_in">push_back</span>(c);</span><br><span class="line">        <span class="keyword">return</span> stk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1049. Last Stone Weight II</title>
    <url>/LeetCode/leetcode-1049-last-stone-weight-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastStoneWeightII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> stone : stones) sum += stone;</span><br><span class="line">        <span class="type">int</span> t = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(t + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = stones[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = t; j &gt;= x; --j) &#123;</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - x] + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - f[t] - f[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1052. Grumpy Bookstore Owner</title>
    <url>/LeetCode/leetcode-1052-grumpy-bookstore-owner/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSatisfied</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; customers, vector&lt;<span class="type">int</span>&gt;&amp; grumpy, <span class="type">int</span> X)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = customers.<span class="built_in">size</span>(), total = <span class="number">0</span>, increase = <span class="number">0</span>, maxIncrease;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (grumpy[i] == <span class="number">0</span>)</span><br><span class="line">                total += customers[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; X; ++i)</span><br><span class="line">            increase += customers[i] * grumpy[i];</span><br><span class="line">        maxIncrease = increase;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = X; i &lt; n; ++i) &#123;</span><br><span class="line">            increase = increase - customers[i - X] * grumpy[i - X] + customers[i] * grumpy[i];</span><br><span class="line">            maxIncrease = <span class="built_in">max</span>(maxIncrease, increase);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total + maxIncrease;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1095. Find in Mountain Array</title>
    <url>/LeetCode/leetcode-1095-find-in-mountain-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findInMountainArray</span><span class="params">(<span class="type">int</span> target, MountainArray &amp;mountainArr)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = mountainArr.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> topIndex = <span class="built_in">findTopIndex</span>(mountainArr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (mountainArr.<span class="built_in">get</span>(topIndex) == target) <span class="keyword">return</span> topIndex;</span><br><span class="line">        <span class="type">int</span> idx = <span class="built_in">findFromSortedArr</span>(mountainArr, <span class="number">0</span>, topIndex - <span class="number">1</span>, target);</span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= <span class="number">0</span>) <span class="keyword">return</span> idx;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">findFromReversedArr</span>(mountainArr, topIndex + <span class="number">1</span>, n - <span class="number">1</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTopIndex</span><span class="params">(MountainArray&amp; mountainArr, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (mountainArr.<span class="built_in">get</span>(mid) &lt; mountainArr.<span class="built_in">get</span>(mid + <span class="number">1</span>))</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findFromSortedArr</span><span class="params">(MountainArray&amp; mountainArr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (mountainArr.<span class="built_in">get</span>(mid) &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mountainArr.<span class="built_in">get</span>(left) == target ? left : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findFromReversedArr</span><span class="params">(MountainArray&amp; mountainArr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (right - left + <span class="number">1</span>) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (mountainArr.<span class="built_in">get</span>(mid) &lt; target)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mountainArr.<span class="built_in">get</span>(left) == target ? left : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1109. Corporate Flight Bookings</title>
    <url>/LeetCode/leetcode-1109-corporate-flight-bookings/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">corpFlightBookings</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; bookings, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diff</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;b : bookings) &#123;</span><br><span class="line">            <span class="type">int</span> first = b[<span class="number">0</span>], last = b[<span class="number">1</span>], seats = b[<span class="number">2</span>];</span><br><span class="line">            diff[first - <span class="number">1</span>] += seats;</span><br><span class="line">            <span class="keyword">if</span> (last &lt; n) diff[last] -= seats;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) diff[i] += diff[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1128. Number of Equivalent Domino Pairs</title>
    <url>/LeetCode/leetcode-1128-number-of-equivalent-domino-pairs/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numEquivDominoPairs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dominoes)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">numCnt</span><span class="params">(<span class="number">100</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; d : dominoes) &#123;</span><br><span class="line">            <span class="type">int</span> v = d[<span class="number">0</span>] &lt; d[<span class="number">1</span>] ? d[<span class="number">0</span>] * <span class="number">10</span> + d[<span class="number">1</span>] : d[<span class="number">1</span>] * <span class="number">10</span> + d[<span class="number">0</span>];</span><br><span class="line">            ans += numCnt[v];</span><br><span class="line">            ++numCnt[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 115. Distinct Subsequences</title>
    <url>/LeetCode/leetcode-115-distinct-subsequences/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDistinct</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = s.<span class="built_in">size</span>(), n = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">long</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">            dp[i][n] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j] + (s[i] == t[j] ? dp[i + <span class="number">1</span>][j + <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1143. Longest Common Subsequence</title>
    <url>/LeetCode/leetcode-1143-longest-common-subsequence/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = text1.<span class="built_in">size</span>(), n = text2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> dp[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                dp[i][j] = (text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>]) ? </span><br><span class="line">                    dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span> : <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1178. Number of Valid Words for Each Puzzle</title>
    <url>/LeetCode/leetcode-1178-number-of-valid-words-for-each-puzzle/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findNumOfValidWords</span><span class="params">(vector&lt;string&gt;&amp; words, vector&lt;string&gt;&amp; puzzles)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; frequency;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string&amp; word: words) &#123;</span><br><span class="line">            <span class="type">int</span> mask = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> ch: word)</span><br><span class="line">                mask |= (<span class="number">1</span> &lt;&lt; (ch - <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">            <span class="keyword">if</span> (__builtin_popcount(mask) &lt;= <span class="number">7</span>)</span><br><span class="line">                ++frequency[mask];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string&amp; puzzle: puzzles) &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> mask = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; ++i)</span><br><span class="line">                mask |= (<span class="number">1</span> &lt;&lt; (puzzle[i] - <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">            <span class="type">int</span> subset = mask;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="type">int</span> s = subset | (<span class="number">1</span> &lt;&lt; (puzzle[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                <span class="keyword">if</span> (frequency.<span class="built_in">find</span>(s) != frequency.<span class="built_in">end</span>())</span><br><span class="line">                    cnt += frequency[s];</span><br><span class="line">                subset = (subset - <span class="number">1</span>) &amp; mask;</span><br><span class="line">            &#125; <span class="keyword">while</span> (subset != mask);</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 118. Pascal&#39;s Triangle</title>
    <url>/LeetCode/leetcode-118-pascal-s-triangle/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generate</span>(<span class="type">int</span> numRows) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(numRows);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; numRows; ++row) &#123;</span><br><span class="line">            ans[row].<span class="built_in">resize</span>(row + <span class="number">1</span>);</span><br><span class="line">            ans[row][<span class="number">0</span>] = ans[row][row] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">1</span>; col &lt; row; ++col)</span><br><span class="line">                ans[row][col] = ans[row - <span class="number">1</span>][col - <span class="number">1</span>] + ans[row - <span class="number">1</span>][col];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1186. Maximum Subarray Sum with One Deletion</title>
    <url>/LeetCode/leetcode-1186-maximum-subarray-sum-with-one-deletion/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), deleted = <span class="number">0</span>, reserved = arr[<span class="number">0</span>], ans = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            deleted = <span class="built_in">max</span>(deleted + arr[i], reserved);</span><br><span class="line">            reserved = <span class="built_in">max</span>(reserved + arr[i], arr[i]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(deleted, reserved));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 119. Pascal&#39;s Triangle II</title>
    <url>/LeetCode/leetcode-119-pascal-s-triangle-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="type">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">row</span><span class="params">(rowIndex + <span class="number">1</span>)</span></span>;</span><br><span class="line">        row[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; ++i)</span><br><span class="line">            row[i] = <span class="number">1LL</span> * row[i - <span class="number">1</span>] * (rowIndex - i + <span class="number">1</span>) / i;</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 12. Integer to Roman</title>
    <url>/LeetCode/leetcode-12-integer-to-roman/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-12-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-12-solution-1">Solution 1</a></li><li class="tab active"><a href="#leetcode-12-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-12-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> pair&lt;<span class="type">int</span>, string&gt; M[] = &#123;</span><br><span class="line">    &#123;<span class="number">1000</span>, <span class="string">&quot;M&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">900</span>, <span class="string">&quot;CM&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">500</span>, <span class="string">&quot;D&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">400</span>, <span class="string">&quot;CD&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">100</span>, <span class="string">&quot;C&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">90</span>, <span class="string">&quot;XC&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">50</span>, <span class="string">&quot;L&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">40</span>, <span class="string">&quot;XL&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">10</span>, <span class="string">&quot;X&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">9</span>, <span class="string">&quot;IX&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>, <span class="string">&quot;V&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="string">&quot;IV&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="string">&quot;I&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [v, s] : M) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= v) &#123;</span><br><span class="line">                num -= v;</span><br><span class="line">                ans += s;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-12-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> string M[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;MM&quot;</span>, <span class="string">&quot;MMM&quot;</span>&#125;;</span><br><span class="line"><span class="type">const</span> string C[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;CC&quot;</span>, <span class="string">&quot;CCC&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;DC&quot;</span>, <span class="string">&quot;DCC&quot;</span>, <span class="string">&quot;DCCC&quot;</span>, <span class="string">&quot;CM&quot;</span>&#125;;</span><br><span class="line"><span class="type">const</span> string X[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;XX&quot;</span>, <span class="string">&quot;XXX&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;LX&quot;</span>, <span class="string">&quot;LXX&quot;</span>, <span class="string">&quot;LXXX&quot;</span>, <span class="string">&quot;XC&quot;</span>&#125;;</span><br><span class="line"><span class="type">const</span> string I[] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;II&quot;</span>, <span class="string">&quot;III&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;VI&quot;</span>, <span class="string">&quot;VII&quot;</span>, <span class="string">&quot;VIII&quot;</span>, <span class="string">&quot;IX&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> M[num / <span class="number">1000</span>] + C[num % <span class="number">1000</span> / <span class="number">100</span>] + X[num % <span class="number">100</span> / <span class="number">10</span>] + I[num % <span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1191. K-Concatenation Maximum Sum</title>
    <url>/LeetCode/leetcode-1191-k-concatenation-maximum-sum/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kConcatenationMaxSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), sum = arr[<span class="number">0</span>], maxSum = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int64_t</span> total = <span class="built_in">accumulate</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), <span class="number">0</span>), mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n * <span class="built_in">min</span>(k, <span class="number">2</span>); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) sum += arr[i % n];</span><br><span class="line">            <span class="keyword">else</span> sum = arr[i % n];</span><br><span class="line">            maxSum = <span class="built_in">max</span>(maxSum, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>&lt;<span class="type">int64_t</span>&gt;(&#123;<span class="number">0</span>, maxSum, total * <span class="built_in">max</span>(<span class="number">0</span>, k - <span class="number">2</span>) + maxSum&#125;) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Reference: <a href="https://leetcode.com/problems/k-concatenation-maximum-sum/discuss/382885/Short-and-concise-O(N)-C%2B%2B-solution">Short and concise O(N) C++ solution - LeetCode Discuss</a>.</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 120. Triangle</title>
    <url>/LeetCode/leetcode-120-triangle/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTotal</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = triangle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            triangle[i][<span class="number">0</span>] += triangle[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            triangle[i][i] += triangle[i - <span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">                triangle[i][j] += <span class="built_in">min</span>(triangle[i - <span class="number">1</span>][j - <span class="number">1</span>], triangle[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">min_element</span>(triangle[n - <span class="number">1</span>].<span class="built_in">begin</span>(), triangle[n - <span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1202. Smallest String With Swaps</title>
    <url>/LeetCode/leetcode-1202-smallest-string-with-swaps/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1202-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1202-solution-1">Cpp</a></li><li class="tab"><a href="#leetcode-1202-solution-2">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1202-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">smallestStringWithSwaps</span><span class="params">(string s, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(s.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">m</span>(s.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (pairs.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; p : pairs) &#123;</span><br><span class="line">            <span class="keyword">auto</span> i = <span class="built_in">find</span>(f, p[<span class="number">0</span>]), j = <span class="built_in">find</span>(f, p[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (-f[i] &lt; -f[j])</span><br><span class="line">                    <span class="built_in">swap</span>(i ,j);</span><br><span class="line">                f[i] += f[j];</span><br><span class="line">                f[j] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            m[<span class="built_in">find</span>(f, i)].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ids : m) &#123;</span><br><span class="line">            string ss = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> id : ids)</span><br><span class="line">                ss += s[id];</span><br><span class="line">            <span class="built_in">sort</span>(ss.<span class="built_in">begin</span>(), ss.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ids.<span class="built_in">size</span>(); ++i)</span><br><span class="line">                s[ids[i]] = ss[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; f, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[i] &lt; <span class="number">0</span> ? i : f[i] = <span class="built_in">find</span>(f, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1202-solution-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">smallestStringWithSwaps</span>(<span class="params">self, s: <span class="built_in">str</span>, pairs: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">UF</span>:</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>): self.p = <span class="built_in">list</span>(<span class="built_in">range</span>(n))</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self, x, y</span>): self.p[self.find(x)] = self.find(y)</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, x</span>):</span><br><span class="line">                <span class="keyword">if</span> x != self.p[x]: self.p[x] = self.find(self.p[x])</span><br><span class="line">                <span class="keyword">return</span> self.p[x]</span><br><span class="line">        uf, m, ans = UF(<span class="built_in">len</span>(s)), defaultdict(<span class="built_in">list</span>), []</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pairs: </span><br><span class="line">            uf.union(a, b)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)): </span><br><span class="line">            m[uf.find(i)].append(s[i])</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> m.keys(): </span><br><span class="line">            m[<span class="built_in">id</span>].sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)): </span><br><span class="line">            ans.append(m[uf.find(i)].pop())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(ans)</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1203. Sort Items by Groups Respecting Dependencies</title>
    <url>/LeetCode/leetcode-1203-sort-items-by-groups-respecting-dependencies/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortItems</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; group, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; beforeItems)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">groupItem</span>(n + m);</span><br><span class="line">        <span class="type">int</span> leftId = m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (group[i] == <span class="number">-1</span>)</span><br><span class="line">                group[i] = leftId++;</span><br><span class="line">            groupItem[group[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">groupGraph</span>(n + m);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">itemGraph</span>(n);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">groupDegree</span><span class="params">(n + m, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">itemDegree</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> curGroupId = group[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; item: beforeItems[i]) &#123;</span><br><span class="line">                <span class="type">int</span> beforeGroupId = group[item];</span><br><span class="line">                <span class="keyword">if</span> (beforeGroupId == curGroupId) &#123;</span><br><span class="line">                    ++itemDegree[i];</span><br><span class="line">                    itemGraph[item].<span class="built_in">emplace_back</span>(i);   </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++groupDegree[curGroupId];</span><br><span class="line">                    groupGraph[beforeGroupId].<span class="built_in">emplace_back</span>(curGroupId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; id;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n + m; ++i)</span><br><span class="line">            id.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; groupTopSort = <span class="built_in">topSort</span>(groupDegree, groupGraph, id); </span><br><span class="line">        <span class="keyword">if</span> (groupTopSort.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; curGroupId: groupTopSort) &#123;</span><br><span class="line">            <span class="type">int</span> size = groupItem[curGroupId].<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="keyword">continue</span>;    </span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; itemTopSort = <span class="built_in">topSort</span>(itemDegree, itemGraph, groupItem[curGroupId]);</span><br><span class="line">            <span class="keyword">if</span> (itemTopSort.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;&#125;;</span><br><span class="line">            ans.<span class="built_in">insert</span>(ans.<span class="built_in">end</span>(), itemTopSort.<span class="built_in">begin</span>(), itemTopSort.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; indeg, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, vector&lt;<span class="type">int</span>&gt;&amp; items)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; item: items)</span><br><span class="line">            <span class="keyword">if</span> (indeg[item] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(item);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v: graph[u])</span><br><span class="line">                <span class="keyword">if</span> (--indeg[v] == <span class="number">0</span>)</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="built_in">size</span>() == items.<span class="built_in">size</span>() ? ans : vector&lt;<span class="type">int</span>&gt;&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1208. Get Equal Substrings Within Budget</title>
    <url>/LeetCode/leetcode-1208-get-equal-substrings-within-budget/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">equalSubstring</span><span class="params">(string s, string t, <span class="type">int</span> maxCost)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, cost = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            cost += <span class="built_in">abs</span>(s[right] - t[right]);</span><br><span class="line">            ++right;</span><br><span class="line">            <span class="keyword">if</span> (cost &lt;= maxCost) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (cost &gt; maxCost &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                    cost -= <span class="built_in">abs</span>(s[left] - t[left]);</span><br><span class="line">                    ++left;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1210. Minimum Moves to Reach Target with Rotations</title>
    <url>/LeetCode/leetcode-1210-minimum-moves-to-reach-target-with-rotations/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> DIRS[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;&#125;; <span class="comment">// downward, rightward, rotate</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumMoves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">bool</span> st[n][n][<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="built_in">sizeof</span>(st));</span><br><span class="line">        st[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">emplace_back</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> step = <span class="number">1</span>; !q.<span class="built_in">empty</span>(); ++step) &#123;</span><br><span class="line">            vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; nxt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[X, Y, S] : q) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;d : DIRS) &#123;</span><br><span class="line">                    <span class="type">int</span> x = X + d[<span class="number">0</span>], y = Y + d[<span class="number">1</span>], s = S ^ d[<span class="number">2</span>]; <span class="comment">// tail</span></span><br><span class="line">                    <span class="type">int</span> x2 = x + s, y2 = y + (s ^ <span class="number">1</span>); <span class="comment">// head</span></span><br><span class="line">                    <span class="keyword">if</span> (x2 &lt; n &amp;&amp; y2 &lt; n &amp;&amp; !st[x][y][s] &amp;&amp; grid[x][y] == <span class="number">0</span> &amp;&amp; grid[x2][y2] == <span class="number">0</span></span><br><span class="line">                        &amp;&amp; (d[<span class="number">2</span>] == <span class="number">0</span> || grid[x + <span class="number">1</span>][y + <span class="number">1</span>] == <span class="number">0</span>)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (x == n - <span class="number">1</span> &amp;&amp; y == n - <span class="number">2</span>) <span class="keyword">return</span> step;</span><br><span class="line">                            st[x][y][s] = <span class="number">1</span>;</span><br><span class="line">                            nxt.<span class="built_in">emplace_back</span>(x, y, s);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            q = <span class="built_in">move</span>(nxt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Breadth-first Search</tag>
        <tag>Martix</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
    <url>/LeetCode/leetcode-121-best-time-to-buy-and-sell-stock/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min_price = INT_MAX, max_profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> price : prices) &#123;</span><br><span class="line">            max_profit = <span class="built_in">max</span>(max_profit, price - min_price);</span><br><span class="line">            min_price = <span class="built_in">min</span>(min_price, price);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 122. Best Time to Buy and Sell Stock II</title>
    <url>/LeetCode/leetcode-122-best-time-to-buy-and-sell-stock-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-122-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-122-solution-1">Greedy</a></li><li class="tab"><a href="#leetcode-122-solution-2">DP</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-122-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>() - <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            ans += <span class="built_in">max</span>(<span class="number">0</span>, prices[i + <span class="number">1</span>] - prices[i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-122-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cash = <span class="number">0</span>, hold = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            cash = <span class="built_in">max</span>(cash, hold + prices[i]);</span><br><span class="line">            hold = <span class="built_in">max</span>(hold, cash - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 123. Best Time to Buy and Sell Stock III</title>
    <url>/LeetCode/leetcode-123-best-time-to-buy-and-sell-stock-iii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> buy1 = -prices[<span class="number">0</span>], sell1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> buy2 = -prices[<span class="number">0</span>], sell2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            buy1 = <span class="built_in">max</span>(buy1, -prices[i]);</span><br><span class="line">            sell1 = <span class="built_in">max</span>(sell1, buy1 + prices[i]);</span><br><span class="line">            buy2 = <span class="built_in">max</span>(buy2, sell1 - prices[i]);</span><br><span class="line">            sell2 = <span class="built_in">max</span>(sell2, buy2 + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1232. Check If It Is a Straight Line</title>
    <url>/LeetCode/leetcode-1232-check-if-it-is-a-straight-line/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkStraightLine</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; coordinates)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = coordinates.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (coordinates[<span class="number">1</span>][<span class="number">0</span>] == coordinates[<span class="number">0</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> x = coordinates[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">if</span> (coordinates[i][<span class="number">0</span>] != x)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">double</span> k = (coordinates[<span class="number">1</span>][<span class="number">1</span>] - coordinates[<span class="number">0</span>][<span class="number">1</span>]) / (<span class="number">1.0</span> * coordinates[<span class="number">1</span>][<span class="number">0</span>] - coordinates[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">            <span class="type">double</span> b = coordinates[<span class="number">0</span>][<span class="number">1</span>] - k * coordinates[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">if</span> ((k * coordinates[i][<span class="number">0</span>] + b) != coordinates[i][<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Geometry</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1248. Count Number of Nice Subarrays</title>
    <url>/LeetCode/leetcode-1248-count-number-of-nice-subarrays/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; count = [&amp;](<span class="type">int</span> lower) &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, cnt = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[right] &amp; <span class="number">1</span>) ++cnt;</span><br><span class="line">                <span class="keyword">while</span> (cnt &gt; lower)</span><br><span class="line">                    <span class="keyword">if</span> (nums[left++] &amp; <span class="number">1</span>) --cnt;</span><br><span class="line">                res += right - left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(k) - <span class="built_in">count</span>(k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Math</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1269. Number of Ways to Stay in the Same Place After Some Steps</title>
    <url>/LeetCode/leetcode-1269-number-of-ways-to-stay-in-the-same-place-after-some-steps/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1269-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1269-solution-1">DP</a></li><li class="tab"><a href="#leetcode-1269-solution-2">DP (space optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1269-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numWays</span><span class="params">(<span class="type">int</span> steps, <span class="type">int</span> arrLen)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line">        <span class="type">int</span> maxCol = <span class="built_in">min</span>(steps / <span class="number">2</span> + <span class="number">1</span>, arrLen);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(steps + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(maxCol));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= steps; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxCol; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> &amp;x = dp[i][j];</span><br><span class="line">                x = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j)</span><br><span class="line">                    x = (x + dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; maxCol - <span class="number">1</span>)</span><br><span class="line">                    x = (x + dp[i - <span class="number">1</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[steps][<span class="number">0</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1269-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numWays</span><span class="params">(<span class="type">int</span> steps, <span class="type">int</span> arrLen)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line">        <span class="type">int</span> maxCol = <span class="built_in">min</span>(steps / <span class="number">2</span> + <span class="number">1</span>, arrLen);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(maxCol));</span><br><span class="line">        <span class="type">int</span> curr = <span class="number">0</span>, next;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= steps; ++i) &#123;</span><br><span class="line">            next = <span class="number">1</span> - curr;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxCol; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> &amp;x = dp[next][j];</span><br><span class="line">                x = dp[curr][j];</span><br><span class="line">                <span class="keyword">if</span> (j)</span><br><span class="line">                    x = (x + dp[curr][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; maxCol - <span class="number">1</span>)</span><br><span class="line">                    x = (x + dp[curr][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[curr][<span class="number">0</span>]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1293. Shortest Path in a Grid with Obstacles Elimination</title>
    <url>/LeetCode/leetcode-1293-shortest-path-in-a-grid-with-obstacles-elimination/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, c;</span><br><span class="line">    <span class="built_in">F</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> c): <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">c</span>(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ds[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= m + n - <span class="number">3</span>) <span class="keyword">return</span> m + n - <span class="number">2</span>;</span><br><span class="line">        <span class="type">bool</span> vis[m][n][k + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        queue&lt;F&gt; q;</span><br><span class="line">        q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, k);</span><br><span class="line">        vis[<span class="number">0</span>][<span class="number">0</span>][k] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ++step;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [x, y, c] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                    <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (nx == m - <span class="number">1</span> &amp;&amp; ny == n - <span class="number">1</span>) <span class="keyword">return</span> step;</span><br><span class="line">                    <span class="keyword">if</span> (grid[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (vis[nx][ny][c]) <span class="keyword">continue</span>;</span><br><span class="line">                        q.<span class="built_in">emplace</span>(nx, ny, c);</span><br><span class="line">                        vis[nx][ny][c] = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; !vis[nx][ny][c - <span class="number">1</span>]) &#123;</span><br><span class="line">                        q.<span class="built_in">emplace</span>(nx, ny, c - <span class="number">1</span>);</span><br><span class="line">                        vis[nx][ny][c - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Breadth-first Search</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 131. Palindrome Partitioning</title>
    <url>/LeetCode/leetcode-131-palindrome-partitioning/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-131-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-131-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-131-solution-2">DFS/DP(preprocessing)</a></li><li class="tab"><a href="#leetcode-131-solution-3">DFS/DP(memorized searching)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-131-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, vector&lt;string&gt;&amp;)&gt; dfs = [&amp;](<span class="type">int</span> pos, vector&lt;string&gt;&amp; cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">isPalindrome</span>(s, pos, i)) <span class="keyword">continue</span>;</span><br><span class="line">                cur.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(pos, i - pos + <span class="number">1</span>));</span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>, cur);</span><br><span class="line">                cur.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        vector&lt;string&gt; cur;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, cur);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(string s, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">            <span class="keyword">if</span> (s[i++] != s[j--]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-131-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(s.<span class="built_in">size</span>(), <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; s.<span class="built_in">size</span>(); ++right)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>; left &lt;= right; ++left)</span><br><span class="line">                <span class="keyword">if</span> (s[left] == s[right] &amp;&amp; (right - left &lt;= <span class="number">2</span> || dp[left + <span class="number">1</span>][right - <span class="number">1</span>]))</span><br><span class="line">                    dp[left][right] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, vector&lt;string&gt;&amp;)&gt; dfs = [&amp;](<span class="type">int</span> pos, vector&lt;string&gt;&amp; cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dp[pos][i]) <span class="keyword">continue</span>;</span><br><span class="line">                cur.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(pos, i - pos + <span class="number">1</span>));</span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>, cur);</span><br><span class="line">                cur.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        vector&lt;string&gt; cur;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, cur);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-131-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">partition</span>(string s) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(s.<span class="built_in">size</span>()));</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; isPalindrome = [&amp;](<span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[left][right]) <span class="comment">// 0 unsearched, 1 is palindrome, -1 is not palindrome.</span></span><br><span class="line">                <span class="keyword">return</span> dp[left][right];</span><br><span class="line">            <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">                <span class="keyword">return</span> dp[left][right] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> dp[left][right] = (s[left] == s[right] ? <span class="built_in">isPalindrome</span>(left + <span class="number">1</span>, right - <span class="number">1</span>) : <span class="number">-1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, vector&lt;string&gt;&amp;)&gt; dfs = [&amp;](<span class="type">int</span> pos, vector&lt;string&gt;&amp; cur) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = pos; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isPalindrome</span>(pos, i) == <span class="number">1</span>) &#123;</span><br><span class="line">                    cur.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(pos, i - pos + <span class="number">1</span>));</span><br><span class="line">                    <span class="built_in">dfs</span>(i + <span class="number">1</span>, cur);</span><br><span class="line">                    cur.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        vector&lt;string&gt; cur;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, cur);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Depth-first Search</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 13. Roman to Integer</title>
    <url>/LeetCode/leetcode-13-roman-to-integer/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> v = m[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; v &lt; m[s[i + <span class="number">1</span>]]) ans -= v;</span><br><span class="line">            <span class="keyword">else</span> ans += v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1310. XOR Queries of a Subarray</title>
    <url>/LeetCode/leetcode-1310-xor-queries-of-a-subarray/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">xorQueries</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (++i &lt; n) &#123;</span><br><span class="line">            prefix[i + <span class="number">1</span>] = prefix[i] ^ arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(queries.size())</span></span>;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; q : queries)</span><br><span class="line">            ans[i++] = prefix[q[<span class="number">1</span>] + <span class="number">1</span>] ^ prefix[q[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1319. Number of Operations to Make Network Connected</title>
    <url>/LeetCode/leetcode-1319-number-of-operations-to-make-network-connected/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1319-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1319-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-1319-solution-2">Union Find</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1319-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">makeConnected</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connections.<span class="built_in">size</span>() &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c : connections) &#123;</span><br><span class="line">            g[c[<span class="number">0</span>]].<span class="built_in">push_back</span>(c[<span class="number">1</span>]);</span><br><span class="line">            g[c[<span class="number">1</span>]].<span class="built_in">push_back</span>(c[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> cur) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> next : g[cur])</span><br><span class="line">                <span class="keyword">if</span> (!seen[next]) &#123;</span><br><span class="line">                    seen[next] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">dfs</span>(next);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!seen[i]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1319-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">makeConnected</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; connections)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connections.<span class="built_in">size</span>() &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="built_in">iota</span>(<span class="built_in">begin</span>(p), <span class="built_in">end</span>(p), <span class="number">0</span>);</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; find = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">            <span class="keyword">return</span> p[x] == x ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; c :connections)</span><br><span class="line">            p[<span class="built_in">find</span>(c[<span class="number">0</span>])] = <span class="built_in">find</span>(c[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i == p[i])</span><br><span class="line">                ++cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 132. Palindrome Partitioning II</title>
    <url>/LeetCode/leetcode-132-palindrome-partitioning-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-132-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-132-solution-1">DP(preprocessing)</a></li><li class="tab"><a href="#leetcode-132-solution-2">DP(space optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-132-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCut</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// if s[i~j] is palindrome.</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">valid</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">true</span>));</span><br><span class="line">        <span class="comment">// dp[i] = min cuts of s[0~i].</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">2</span>; l &lt;= n; ++l)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = left + l - <span class="number">1</span>; right &lt; n; ++left, ++right)</span><br><span class="line">                valid[left][right] = s[left] == s[right] &amp;&amp; valid[left + <span class="number">1</span>][right - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (valid[<span class="number">0</span>][right]) &#123;</span><br><span class="line">                dp[right] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>; left &lt; right; ++left)</span><br><span class="line">                <span class="keyword">if</span> (valid[left + <span class="number">1</span>][right])</span><br><span class="line">                    dp[right] = <span class="built_in">min</span>(dp[right], dp[left] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-132-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCut</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// dp[i] = min cuts of s[0~i].</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>; m &lt; n; ++m) <span class="comment">// enumerate middle points.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">0</span>; d &lt;= <span class="number">1</span>; ++d) <span class="comment">// odd and even length palindrome.</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = m, j = m + d; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n &amp;&amp; s[i] == s[j]; --i, ++j)</span><br><span class="line">                    dp[j] = <span class="built_in">min</span>(dp[j], (i ? (dp[i - <span class="number">1</span>] + <span class="number">1</span>) : <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 134. Gas Station</title>
    <url>/LeetCode/leetcode-134-gas-station/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, total = <span class="number">0</span>, tank = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">if</span> ((tank += gas[i] - cost[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                start = i + <span class="number">1</span>;</span><br><span class="line">                total += tank;</span><br><span class="line">                tank = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> (total + tank) &lt; <span class="number">0</span> ? <span class="number">-1</span> : start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1358. Number of Substrings Containing All Three Characters</title>
    <url>/LeetCode/leetcode-1358-number-of-substrings-containing-all-three-characters/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSubstrings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; count = [&amp;](<span class="type">int</span> lower) &#123;</span><br><span class="line">            <span class="type">int</span> freq[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;, res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, cnt = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (++freq[s[right] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>) ++cnt;</span><br><span class="line">                <span class="keyword">while</span> (cnt &gt; lower)</span><br><span class="line">                    <span class="keyword">if</span> (--freq[s[left++] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) --cnt;</span><br><span class="line">                res += right - left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(<span class="number">3</span>) - <span class="built_in">count</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 135. Candy</title>
    <url>/LeetCode/leetcode-135-candy/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-135-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-135-solution-1">Greedy with O(n) Space</a></li><li class="tab"><a href="#leetcode-135-solution-2">Greedy with O(1) Space</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-135-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; ratings[i] &gt; ratings[i - <span class="number">1</span>])</span><br><span class="line">                left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; ratings[i] &gt; ratings[i + <span class="number">1</span>])</span><br><span class="line">                ++right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = <span class="number">1</span>;</span><br><span class="line">            ans += <span class="built_in">max</span>(left[i], right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-135-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>, inc = <span class="number">1</span>, dec = <span class="number">0</span>, pre = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt;= ratings[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dec = <span class="number">0</span>;</span><br><span class="line">                pre = ratings[i] == ratings[i - <span class="number">1</span>] ? <span class="number">1</span> : pre + <span class="number">1</span>;</span><br><span class="line">                ans += pre;</span><br><span class="line">                inc = pre;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++dec;</span><br><span class="line">                <span class="keyword">if</span> (dec == inc) ++dec;</span><br><span class="line">                ans += dec;</span><br><span class="line">                pre = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 137. Single Number II</title>
    <url>/LeetCode/leetcode-137-single-number-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-137-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-137-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-137-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-137-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; num: nums)</span><br><span class="line">            ++freq[num];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [num, occ]: freq)</span><br><span class="line">            <span class="keyword">if</span> (occ == <span class="number">1</span>) &#123;</span><br><span class="line">                ans = num;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-137-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">                sum += (num &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum % <span class="number">3</span>)</span><br><span class="line">                ans |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1368. Minimum Cost to Make at Least One Valid Path in a Grid</title>
    <url>/LeetCode/leetcode-1368-minimum-cost-to-make-at-least-one-valid-path-in-a-grid/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1368-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-1368-solution-1">Dijkstra</a></li><li class="tab active"><a href="#leetcode-1368-solution-2">0-1 BFS</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-1368-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> TII = tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1-&gt;right, 2-&gt;left, 3-&gt;down, 4-&gt;up.</span></span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>(), ds[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0x3f3f3f3f</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">vis</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n));</span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;TII, vector&lt;TII&gt;, greater&lt;TII&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [d, x, y] = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (vis[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i][<span class="number">0</span>], ny = y + ds[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> w = grid[x][y] != i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dist[nx][ny] &gt; dist[x][y] + w) &#123;</span><br><span class="line">                    dist[nx][ny] = dist[x][y] + w;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(dist[nx][ny], nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-1368-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCost</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1-&gt;right, 2-&gt;left, 3-&gt;down, 4-&gt;up.</span></span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>(), ds[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0x3f3f3f3f</span>));</span><br><span class="line">        <span class="comment">// vector&lt;vector&lt;bool&gt;&gt; vis(m, vector&lt;bool&gt;(n));</span></span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        deque&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">emplace_back</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="comment">// if (vis[x][y]) continue;</span></span><br><span class="line">            <span class="comment">// vis[x][y] = true;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i][<span class="number">0</span>], ny = y + ds[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> w = grid[x][y] != i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dist[nx][ny] &gt; dist[x][y] + w) &#123;</span><br><span class="line">                    dist[nx][ny] = dist[x][y] + w;</span><br><span class="line">                    <span class="keyword">if</span> (w) q.<span class="built_in">emplace_back</span>(nx, ny);</span><br><span class="line">                    <span class="keyword">else</span> q.<span class="built_in">emplace_front</span>(nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Array</tag>
        <tag>Breadth-first Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Matrix</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1418. Display Table of Food Orders in a Restaurant</title>
    <url>/LeetCode/leetcode-1418-display-table-of-food-orders-in-a-restaurant/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">displayTable</span>(vector&lt;vector&lt;string&gt;&gt;&amp; orders) &#123;</span><br><span class="line">        vector&lt;unordered_map&lt;string, <span class="type">int</span>&gt;&gt; <span class="built_in">tables</span>(<span class="number">501</span>);</span><br><span class="line">        set&lt;string&gt; foods;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : orders) &#123;</span><br><span class="line">            foods.<span class="built_in">insert</span>(v[<span class="number">2</span>]);</span><br><span class="line">            ++tables[<span class="built_in">stoi</span>(v[<span class="number">1</span>])][v[<span class="number">2</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt;= <span class="number">500</span>; t++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">0</span> &amp;&amp; tables[t].<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123;&#125;);</span><br><span class="line">            ans.<span class="built_in">back</span>().<span class="built_in">emplace_back</span>(t == <span class="number">0</span> ? <span class="string">&quot;Table&quot;</span> : <span class="built_in">to_string</span>(t));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it = foods.<span class="built_in">begin</span>(); it != foods.<span class="built_in">end</span>(); it++)</span><br><span class="line">                ans.<span class="built_in">back</span>().<span class="built_in">emplace_back</span>(t == <span class="number">0</span> ? *it : <span class="built_in">to_string</span>(tables[t][*it]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Ordered Set</tag>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1423. Maximum Points You Can Obtain from Cards</title>
    <url>/LeetCode/leetcode-1423-maximum-points-you-can-obtain-from-cards/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1423-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1423-solution-1">Sliding Window</a></li><li class="tab"><a href="#leetcode-1423-solution-2">DP</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1423-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cardPoints, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = cardPoints.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> windowSize = n - k;</span><br><span class="line">        <span class="type">int</span> currWindowSum = <span class="built_in">accumulate</span>(cardPoints.<span class="built_in">begin</span>(), cardPoints.<span class="built_in">begin</span>() + windowSize, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> sum = currWindowSum, minWindowSum = currWindowSum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = windowSize; i &lt; n; ++i) &#123;</span><br><span class="line">            sum += cardPoints[i];</span><br><span class="line">            currWindowSum += cardPoints[i] - cardPoints[i - windowSize];</span><br><span class="line">            minWindowSum = <span class="built_in">min</span>(minWindowSum, currWindowSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - minWindowSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1423-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cardPoints, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = cardPoints.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// take &#x27;i&#x27; card(s) from left (and &#x27;k - i&#x27; card(s) from right),</span></span><br><span class="line">        <span class="comment">// how many points could we get. i = 0 at first.</span></span><br><span class="line">        <span class="type">int</span> dp = <span class="built_in">accumulate</span>(cardPoints.<span class="built_in">rbegin</span>(), cardPoints.<span class="built_in">rbegin</span>() + k, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> maxPoints = dp, idxDiff = n - k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            dp = dp + cardPoints[i] - cardPoints[i + idxDiff];</span><br><span class="line">            maxPoints = <span class="built_in">max</span>(maxPoints, dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPoints;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</title>
    <url>/LeetCode/leetcode-1438-longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MonotonicQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; queMin;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; queMax;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queMin.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queMax.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!queMin.<span class="built_in">empty</span>() &amp;&amp; x &lt; queMin.<span class="built_in">back</span>())</span><br><span class="line">            queMin.<span class="built_in">pop_back</span>();</span><br><span class="line">        queMin.<span class="built_in">push_back</span>(x);</span><br><span class="line">        <span class="keyword">while</span> (!queMax.<span class="built_in">empty</span>() &amp;&amp; x &gt; queMax.<span class="built_in">back</span>())</span><br><span class="line">            queMax.<span class="built_in">pop_back</span>();</span><br><span class="line">        queMax.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">popMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queMin.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">popMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queMax.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        MonotonicQueue q;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(nums[right]);</span><br><span class="line">            <span class="keyword">while</span> (left &lt; n &amp;&amp; q.<span class="built_in">max</span>() - q.<span class="built_in">min</span>() &gt; limit) &#123;</span><br><span class="line">                <span class="keyword">if</span> (q.<span class="built_in">min</span>() == nums[left])</span><br><span class="line">                    q.<span class="built_in">popMin</span>();</span><br><span class="line">                <span class="keyword">if</span> (q.<span class="built_in">max</span>() == nums[left])</span><br><span class="line">                    q.<span class="built_in">popMax</span>();</span><br><span class="line">                ++left;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, ++right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1442. Count Triplets That Can Form Two Arrays of Equal XOR</title>
    <url>/LeetCode/leetcode-1442-count-triplets-that-can-form-two-arrays-of-equal-xor/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1442-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1442-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-1442-solution-2">Solution 2</a></li><li class="tab"><a href="#leetcode-1442-solution-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1442-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countTriplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            dp[i + <span class="number">1</span>] = dp[i] ^ arr[i];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; n; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (dp[i] == dp[k + <span class="number">1</span>])</span><br><span class="line">                        ++ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1442-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countTriplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            dp[i + <span class="number">1</span>] = dp[i] ^ arr[i];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i + <span class="number">1</span>; k &lt; n; ++k)</span><br><span class="line">                <span class="keyword">if</span> (dp[i] == dp[k + <span class="number">1</span>])</span><br><span class="line">                    ans += k - i;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1442-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countTriplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            dp[i + <span class="number">1</span>] = dp[i] ^ arr[i];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; freq, sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (freq.<span class="built_in">find</span>(dp[i + <span class="number">1</span>]) != freq.<span class="built_in">end</span>())</span><br><span class="line">                ans += freq[dp[i + <span class="number">1</span>]] * i - sum[dp[i + <span class="number">1</span>]];</span><br><span class="line">            ++freq[dp[i]];</span><br><span class="line">            sum[dp[i]] += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1486. XOR Operation in an Array</title>
    <url>/LeetCode/leetcode-1486-xor-operation-in-an-array/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1486-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1486-solution-1">Simulation</a></li><li class="tab"><a href="#leetcode-1486-solution-2">Math</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1486-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">xorOperation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = start, ans = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt; n; ++i) &#123;</span><br><span class="line">            pre += <span class="number">2</span>;</span><br><span class="line">            ans ^= pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1486-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumXor</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">4</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">4</span> == <span class="number">2</span>) <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">xorOperation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = start &gt;&gt; <span class="number">1</span>, e = n &amp; start &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">sumXor</span>(s - <span class="number">1</span>) ^ <span class="built_in">sumXor</span>(s + n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret &lt;&lt; <span class="number">1</span> | e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1489. Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree</title>
    <url>/LeetCode/leetcode-1489-find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> setCount; <span class="comment">// count of current connected components</span></span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">setCount</span>(_n), <span class="built_in">f</span>(_n), <span class="built_in">size</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (size[x] &lt; size[y]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        f[y] = x;</span><br><span class="line">        size[x] += size[y];</span><br><span class="line">        --setCount;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">return</span> x == y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findCriticalAndPseudoCriticalEdges</span>(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = edges.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            edges[i].<span class="built_in">push_back</span>(i); <span class="comment">// preserve index before sorting</span></span><br><span class="line">        <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; u, <span class="type">const</span> <span class="keyword">auto</span>&amp; v) &#123;</span><br><span class="line">            <span class="keyword">return</span> u[<span class="number">2</span>] &lt; v[<span class="number">2</span>]; <span class="comment">// sort by weight</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">UF <span class="title">uf_std</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="type">int</span> value = <span class="number">0</span>; <span class="comment">// weight of MST</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">if</span> (uf_std._union(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]))</span><br><span class="line">                value += edges[i][<span class="number">2</span>];</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="function">UF <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">            <span class="type">int</span> v = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; uf._union(edges[j][<span class="number">0</span>], edges[j][<span class="number">1</span>])) <span class="comment">// without the i-th edge</span></span><br><span class="line">                    v += edges[j][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (uf.setCount != <span class="number">1</span> <span class="comment">// graph can&#x27;t be conncted as a single component</span></span><br><span class="line">                || (uf.setCount == <span class="number">1</span> &amp;&amp; v &gt; value)) &#123; <span class="comment">// or can be a conncted component with larger weight</span></span><br><span class="line">                ans[<span class="number">0</span>].<span class="built_in">push_back</span>(edges[i][<span class="number">3</span>]); <span class="comment">// critical edges</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            uf = <span class="built_in">UF</span>(n);</span><br><span class="line">            uf._union(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]);</span><br><span class="line">            v = edges[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; uf._union(edges[j][<span class="number">0</span>], edges[j][<span class="number">1</span>]))</span><br><span class="line">                    v += edges[j][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (v == value)</span><br><span class="line">                ans[<span class="number">1</span>].<span class="built_in">push_back</span>(edges[i][<span class="number">3</span>]); <span class="comment">// pseudo-critical edges</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1449. Form Largest Integer With Digits That Add up to Target</title>
    <url>/LeetCode/leetcode-1449-form-largest-integer-with-digits-that-add-up-to-target/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">largestNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(target + <span class="number">1</span>, INT_MIN)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : cost)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j = c; j &lt;= target; ++j)</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - c] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (f[target] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>, j = target; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = cost[i]; j &gt;= c &amp;&amp; f[j] == f[j - c] + <span class="number">1</span>; j -= c)</span><br><span class="line">                ans += <span class="string">&#x27;1&#x27;</span> + i;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 152. Maximum Product Subarray</title>
    <url>/LeetCode/leetcode-152-maximum-product-subarray/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minProduct = nums[<span class="number">0</span>], maxProduct = nums[<span class="number">0</span>], ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> m1 = minProduct, m2 = maxProduct;</span><br><span class="line">            maxProduct = <span class="built_in">max</span>(<span class="built_in">max</span>(nums[i], m1 * nums[i]), m2 * nums[i]);</span><br><span class="line">            minProduct = <span class="built_in">min</span>(<span class="built_in">min</span>(nums[i], m1 * nums[i]), m2 * nums[i]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, maxProduct);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 153. Find Minimum in Rotated Sorted Array</title>
    <url>/LeetCode/leetcode-153-find-minimum-in-rotated-sorted-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; nums[right])</span><br><span class="line">                right = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 150. Evaluate Reverse Polish Notation</title>
    <url>/LeetCode/leetcode-150-evaluate-reverse-polish-notation/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (string&amp; token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (token == <span class="string">&quot;+&quot;</span> || token == <span class="string">&quot;-&quot;</span> || token == <span class="string">&quot;*&quot;</span> || token == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> num2 = stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> num1 = stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span> (token[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push</span>(num1 + num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push</span>(num1 - num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push</span>(num1 * num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push</span>(num1 / num2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="built_in">atoi</span>(token.<span class="built_in">c_str</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 154. Find Minimum in Rotated Sorted Array II</title>
    <url>/LeetCode/leetcode-154-find-minimum-in-rotated-sorted-array-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[right])</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; nums[right])</span><br><span class="line">                right = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                --right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1541. Minimum Insertions to Balance a Parentheses String</title>
    <url>/LeetCode/leetcode-1541-minimum-insertions-to-balance-a-parentheses-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minInsertions</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// c is used to track the diff between the cnt of &#x27;(&#x27; and &#x27;))&#x27;.</span></span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), c = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                ++c; <span class="comment">// c should remain nonnegative.</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// if there is no one more &#x27;)&#x27; available, we need to insert a &#x27;)&#x27;.</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt;= n - <span class="number">1</span> || s[i + <span class="number">1</span>] != <span class="string">&#x27;)&#x27;</span>) ++ans;</span><br><span class="line">                <span class="comment">// or, consume it.</span></span><br><span class="line">                <span class="keyword">else</span> ++i;</span><br><span class="line">                <span class="comment">// if there is no enough preceding &#x27;(&#x27; to match this &#x27;))&#x27; group, we need to insert a &#x27;(&#x27;.</span></span><br><span class="line">                <span class="keyword">if</span> (c &lt;= <span class="number">0</span>) ++ans, c = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// or, consume the preceding &#x27;(&#x27;.</span></span><br><span class="line">                <span class="keyword">else</span> --c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans + c * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Stack</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1579. Remove Max Number of Edges to Keep Graph Fully Traversable</title>
    <url>/LeetCode/leetcode-1579-remove-max-number-of-edges-to-keep-graph-fully-traversable/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> setCount; <span class="comment">// count of current connected components</span></span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">setCount</span>(_n), <span class="built_in">f</span>(_n), <span class="built_in">size</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (size[x] &lt; size[y])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        f[y] = x;</span><br><span class="line">        size[x] += size[y];</span><br><span class="line">        --setCount;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxNumEdgesToRemove</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="function">UF <span class="title">ufa</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">ufb</span><span class="params">(n + <span class="number">1</span>)</span></span>; <span class="comment">// 0 as one dummy node</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : edges)</span><br><span class="line">            <span class="keyword">if</span> (edge[<span class="number">0</span>] == <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">if</span> (!ufa._union(edge[<span class="number">1</span>], edge[<span class="number">2</span>]))</span><br><span class="line">                    ++ans;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ufb._union(edge[<span class="number">1</span>], edge[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : edges)</span><br><span class="line">            <span class="keyword">if</span> (edge[<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ufa._union(edge[<span class="number">1</span>], edge[<span class="number">2</span>]))</span><br><span class="line">                    ++ans;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (edge[<span class="number">0</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ufb._union(edge[<span class="number">1</span>], edge[<span class="number">2</span>]))</span><br><span class="line">                    ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (ufa.setCount != <span class="number">2</span> || ufb.setCount != <span class="number">2</span>) <span class="comment">// 1 connected component and a dummy node</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1584. Min Cost to Connect All Points</title>
    <url>/LeetCode/leetcode-1584-min-cost-to-connect-all-points/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f, rank;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> v, u, w;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge&amp; e) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (fx == fy) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rank[fx] &gt; rank[fy])</span><br><span class="line">            <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">        rank[fy] += rank[fx];</span><br><span class="line">        f[fx] = fy;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostConnectPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;Edge&gt; graph;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">                graph.<span class="built_in">push_back</span>(&#123;i, j, </span><br><span class="line">                    <span class="built_in">abs</span>(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>])&#125;);</span><br><span class="line">        f = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>);</span><br><span class="line">        rank = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            f[i] = i;</span><br><span class="line">        <span class="built_in">sort</span>(graph.<span class="built_in">begin</span>(), graph.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Edge&amp; e : graph)</span><br><span class="line">            <span class="keyword">if</span> (_union(e.v, e.u)) &#123;</span><br><span class="line">                ans += e.w;</span><br><span class="line">                <span class="keyword">if</span> (--n == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1631. Path With Minimum Effort</title>
    <url>/LeetCode/leetcode-1631-path-with-minimum-effort/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1631-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1631-solution-1">Union Find</a></li><li class="tab"><a href="#leetcode-1631-solution-2">Binary Search</a></li><li class="tab"><a href="#leetcode-1631-solution-3">Shortest Path</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1631-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">f</span>(_n), <span class="built_in">size</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size[x] &lt; size[y])</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">            f[y] = x;</span><br><span class="line">            size[x] += size[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumEffortPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> R = heights.<span class="built_in">size</span>(), C = heights[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; R; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; C; ++c) &#123;</span><br><span class="line">                <span class="type">int</span> idx = r * C + c;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; R - <span class="number">1</span>) &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(idx, idx + C, <span class="built_in">abs</span>(heights[r + <span class="number">1</span>][c] - heights[r][c]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; C - <span class="number">1</span>) &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(idx, idx + <span class="number">1</span>, <span class="built_in">abs</span>(heights[r][c + <span class="number">1</span>] - heights[r][c]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; e1, <span class="type">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x1, y1, w1] = e1;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x2, y2, w2] = e2;</span><br><span class="line">            <span class="keyword">return</span> w1 &lt; w2;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(R * C)</span></span>;</span><br><span class="line">        <span class="type">int</span> lastIdx = R * C - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> [x, y, w] : edges) &#123;</span><br><span class="line">            uf._union(x, y);</span><br><span class="line">            <span class="keyword">if</span> (uf.<span class="built_in">connected</span>(<span class="number">0</span>, lastIdx))</span><br><span class="line">                <span class="keyword">return</span> w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1631-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumEffortPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> R = heights.<span class="built_in">size</span>(), C = heights[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">999999</span>, ans = <span class="number">0</span>, lastIdx = R * C - <span class="number">1</span>, dirs[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">            q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(R * C)</span></span>;</span><br><span class="line">            seen[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [r, c] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;) &#123;</span><br><span class="line">                    <span class="type">int</span> nr = r + dirs[i], nc = c + dirs[++i];</span><br><span class="line">                    <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= R || nc &lt; <span class="number">0</span> || nc &gt;= C || seen[nr * C + nc] </span><br><span class="line">                        || <span class="built_in">abs</span>(heights[nr][nc] - heights[r][c]) &gt; mid) <span class="keyword">continue</span>;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(nr, nc);</span><br><span class="line">                    seen[nr * C + nc] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (seen[lastIdx]) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1631-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumEffortPath</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> R = heights.<span class="built_in">size</span>(), C = heights[<span class="number">0</span>].<span class="built_in">size</span>(), dirs[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">auto</span> tupleCmp = [](<span class="type">const</span> <span class="keyword">auto</span>&amp; e1, <span class="type">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x1, y1, d1] = e1;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x2, y2, d2] = e2;</span><br><span class="line">            <span class="keyword">return</span> d1 &gt; d2;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(tupleCmp)&gt; <span class="built_in">q</span>(tupleCmp);</span><br><span class="line">        q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(R * C, INT_MAX)</span></span>;</span><br><span class="line">        dist[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(R * C)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [r, c, d] = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> idx = r * C + c;</span><br><span class="line">            <span class="keyword">if</span> (seen[idx]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (r == R - <span class="number">1</span> &amp;&amp; c == C - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            seen[idx] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;) &#123;</span><br><span class="line">                <span class="type">int</span> nr = r + dirs[i], nc = c + dirs[++i];</span><br><span class="line">                <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= R || nc &lt; <span class="number">0</span> || nc &gt;= C) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> nd = <span class="built_in">max</span>(d, <span class="built_in">abs</span>(heights[r][c] - heights[nr][nc]));</span><br><span class="line">                <span class="keyword">if</span> (nd &gt;= dist[nr * C + nc]) <span class="keyword">continue</span>;</span><br><span class="line">                dist[nr * C + nc] = nd;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nr, nc, dist[nr * C + nc]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[R * C - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1603. Design Parking System</title>
    <url>/LeetCode/leetcode-1603-design-parking-system/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1603-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1603-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-1603-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1603-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParkingSystem</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> b, m, s;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ParkingSystem</span>(<span class="type">int</span> big, <span class="type">int</span> medium, <span class="type">int</span> small): <span class="built_in">b</span>(big), <span class="built_in">m</span>(medium), <span class="built_in">s</span>(small) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addCar</span><span class="params">(<span class="type">int</span> carType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (carType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> b-- &gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> m-- &gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> s-- &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1603-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParkingSystem</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> counts;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ParkingSystem</span>(<span class="type">int</span> big, <span class="type">int</span> medium, <span class="type">int</span> small) &#123;</span><br><span class="line">        counts = (small &lt;&lt; <span class="number">20</span>) | (medium &lt;&lt; <span class="number">10</span>) | big;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">addCar</span><span class="params">(<span class="type">int</span> carType)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> bits = (carType - <span class="number">1</span>) * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> ((counts &gt;&gt; bits) &amp; <span class="number">0b1111111111</span>) &#123;</span><br><span class="line">            counts -= <span class="number">1</span> &lt;&lt; bits;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1707. Maximum XOR With an Element From Array</title>
    <url>/LeetCode/leetcode-1707-maximum-xor-with-an-element-from-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> L = <span class="number">30</span>;</span><br><span class="line">    Trie* children[<span class="number">2</span>] = &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> min = INT_MAX;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        node-&gt;min = std::<span class="built_in">min</span>(node-&gt;min, val);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = L - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> bit = (val &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;children[bit] == <span class="literal">nullptr</span>)</span><br><span class="line">                node-&gt;children[bit] = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">            node = node-&gt;children[bit];</span><br><span class="line">            node-&gt;min = std::<span class="built_in">min</span>(node-&gt;min, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMaxXorWithLimit</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;min &gt; limit)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = L - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> bit = (val &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;children[bit ^ <span class="number">1</span>] != <span class="literal">nullptr</span> &amp;&amp; node-&gt;children[bit ^ <span class="number">1</span>]-&gt;min &lt;= limit) &#123;</span><br><span class="line">                ans |= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                bit ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;children[bit];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maximizeXor</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;queries)</span> </span>&#123;</span><br><span class="line">        Trie* t = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            t-&gt;<span class="built_in">insert</span>(num);</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans[i] = t-&gt;<span class="built_in">getMaxXorWithLimit</span>(queries[i][<span class="number">0</span>], queries[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1711. Count Good Meals</title>
    <url>/LeetCode/leetcode-1711-count-good-meals/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1711-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-1711-solution-1">Hash Table</a></li><li class="tab active"><a href="#leetcode-1711-solution-2">Array As Hash Table</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-1711-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1&#x27;000&#x27;000&#x27;007</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; deliciousness)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="type">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> d : deliciousness) &#123;</span><br><span class="line">            maxSum = <span class="built_in">max</span>(maxSum, d * <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> sum = <span class="number">1</span>; sum &lt;= maxSum; sum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> t = sum - d;</span><br><span class="line">                <span class="type">int</span> c = freq.<span class="built_in">find</span>(t) != freq.<span class="built_in">end</span>() ? freq[t] : <span class="number">0</span>;</span><br><span class="line">                ans = (ans + c) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            ++freq[d];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-1711-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="type">int</span> freq[(<span class="number">1</span> &lt;&lt; <span class="number">21</span>) + <span class="number">1</span>] = &#123;<span class="number">0</span>,&#125;, maxSum, ans;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; deliciousness)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(freq, <span class="number">0</span>, <span class="keyword">sizeof</span> freq);</span><br><span class="line">        maxSum = ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;d : deliciousness)</span><br><span class="line">            ++freq[d];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;d : deliciousness) &#123;</span><br><span class="line">            --freq[d];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> sum = <span class="number">1</span>; sum &lt;= (<span class="number">1</span> &lt;&lt; <span class="number">21</span>); sum &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> t = sum - d;</span><br><span class="line">                <span class="keyword">if</span> (t &gt;= <span class="number">0</span>)</span><br><span class="line">                    ans = (ans + freq[t]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1723. Find Minimum Time to Finish All Jobs</title>
    <url>/LeetCode/leetcode-1723-find-minimum-time-to-finish-all-jobs/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1723-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1723-solution-1">Binary Search with Backtrack</a></li><li class="tab"><a href="#leetcode-1723-solution-2">DP</a></li><li class="tab"><a href="#leetcode-1723-solution-3">DP (Space Optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1723-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTimeRequired</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; jobs, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l = jobs[<span class="number">0</span>], r = <span class="built_in">accumulate</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(jobs, k, mid)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; jobs, <span class="type">int</span> k, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">workloads</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">backtrack</span>(jobs, workloads, <span class="number">0</span>, limit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; jobs, vector&lt;<span class="type">int</span>&gt;&amp; workloads, <span class="type">int</span> idx, <span class="type">int</span> limit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == jobs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> curr = jobs[idx];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; workload : workloads) &#123;</span><br><span class="line">            workload += curr;</span><br><span class="line">            <span class="keyword">if</span> (workload &lt;= limit &amp;&amp; <span class="built_in">backtrack</span>(jobs, workloads, idx + <span class="number">1</span>, limit)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            workload -= curr;</span><br><span class="line">            <span class="keyword">if</span> (workload == <span class="number">0</span> || workload + curr == limit) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1723-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTimeRequired</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; jobs, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = jobs.<span class="built_in">size</span>(), sz = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(sz)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x = __builtin_ctz(i), y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">            sum[i] = sum[y] + jobs[x];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(k, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(sz));</span><br><span class="line">        f[<span class="number">0</span>] = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(sum.<span class="built_in">begin</span>(), sum.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sz; j++) &#123;</span><br><span class="line">                <span class="type">int</span> minn = INT_MAX;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = j; x; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">                    minn = <span class="built_in">min</span>(minn, <span class="built_in">max</span>(f[i - <span class="number">1</span>][j - x], sum[x]));</span><br><span class="line">                &#125;</span><br><span class="line">                f[i][j] = minn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[k - <span class="number">1</span>][sz - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1723-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumTimeRequired</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; jobs, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = jobs.<span class="built_in">size</span>(), sz = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(sz)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = __builtin_ctz(i), y = i - (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">            s[i] = s[y] + jobs[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(s.begin(), s.end())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = sz - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="type">int</span> minn = INT_MAX;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = j; x; x = (x - <span class="number">1</span>) &amp; j) &#123;</span><br><span class="line">                    minn = <span class="built_in">min</span>(minn, <span class="built_in">max</span>(f[j - x], s[x]));</span><br><span class="line">                &#125;</span><br><span class="line">                f[j] = minn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[sz - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1720. Decode XORed Array</title>
    <url>/LeetCode/leetcode-1720-decode-xored-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">decode</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; encoded, <span class="type">int</span> first)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = encoded.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        ans[<span class="number">0</span>] = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ans[i + <span class="number">1</span>] = ans[i] ^ encoded[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 173. Binary Search Tree Iterator</title>
    <url>/LeetCode/leetcode-173-binary-search-tree-iterator/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-173-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-173-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-173-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-173-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> idx;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorder</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">inorder</span>(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;left, v);</span><br><span class="line">        v.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">inorder</span>(root-&gt;right, v);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSTIterator</span>(TreeNode* root): <span class="built_in">idx</span>(<span class="number">0</span>), <span class="built_in">v</span>(<span class="built_in">inorder</span>(root)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v[idx++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idx &lt; v.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-173-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BSTIterator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TreeNode* curr;</span><br><span class="line">    stack&lt;TreeNode*&gt; stk;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BSTIterator</span>(TreeNode* root): <span class="built_in">curr</span>(root) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(curr);</span><br><span class="line">            curr = curr-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = stk.<span class="built_in">top</span>();</span><br><span class="line">        stk.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ans = curr-&gt;val;</span><br><span class="line">        curr = curr-&gt;right;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curr || !stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Stack</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1734. Decode XORed Permutation</title>
    <url>/LeetCode/leetcode-1734-decode-xored-permutation/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">decode</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; encoded)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = encoded.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            total ^= i;</span><br><span class="line">        <span class="type">int</span> odd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i += <span class="number">2</span>)</span><br><span class="line">            odd ^= encoded[i];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">perm</span><span class="params">(n)</span></span>;</span><br><span class="line">        perm[<span class="number">0</span>] = total ^ odd;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            perm[i] = perm[i - <span class="number">1</span>] ^ encoded[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> perm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1736. Latest Time by Replacing Hidden Digits</title>
    <url>/LeetCode/leetcode-1736-latest-time-by-replacing-hidden-digits/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">maximumTime</span><span class="params">(string time)</span> </span>&#123;</span><br><span class="line">        string ans = time;</span><br><span class="line">        <span class="keyword">if</span> (time[<span class="number">0</span>] == <span class="string">&#x27;?&#x27;</span>) ans[<span class="number">0</span>] = time[<span class="number">1</span>] != <span class="string">&#x27;?&#x27;</span> &amp;&amp; time[<span class="number">1</span>] &gt; <span class="string">&#x27;3&#x27;</span> ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (time[<span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>) ans[<span class="number">1</span>] = ans[<span class="number">0</span>] == <span class="string">&#x27;2&#x27;</span> ? <span class="string">&#x27;3&#x27;</span> : <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (time[<span class="number">3</span>] == <span class="string">&#x27;?&#x27;</span>) ans[<span class="number">3</span>] = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (time[<span class="number">4</span>] == <span class="string">&#x27;?&#x27;</span>) ans[<span class="number">4</span>] = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1775. Equal Sum Arrays With Minimum Number of Operations</title>
    <url>/LeetCode/leetcode-1775-equal-sum-arrays-with-minimum-number-of-operations/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1775-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1775-solution-1">Sort & Two Pointers</a></li><li class="tab"><a href="#leetcode-1775-solution-2">Count</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1775-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> l1 = nums1.<span class="built_in">size</span>(), l2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span>(l1, l2) * <span class="number">6</span> &lt; <span class="built_in">max</span>(l1, l2)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> s1 = <span class="built_in">accumulate</span>(<span class="built_in">begin</span>(nums1), <span class="built_in">end</span>(nums1), <span class="number">0</span>), s2 = <span class="built_in">accumulate</span>(<span class="built_in">begin</span>(nums2), <span class="built_in">end</span>(nums2), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (s1 &gt; s2) <span class="keyword">return</span> <span class="built_in">minOperations</span>(nums2, nums1);</span><br><span class="line">        <span class="keyword">if</span> (s1 == s2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">begin</span>(nums1), <span class="built_in">end</span>(nums1));</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">rbegin</span>(nums2), <span class="built_in">rend</span>(nums2));</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; s1 &lt; s2; ++ans) &#123;</span><br><span class="line">            <span class="type">int</span> d1 = i == l1 ? <span class="number">0</span> : <span class="number">6</span> - nums1[i];</span><br><span class="line">            <span class="type">int</span> d2 = j == l2 ? <span class="number">0</span> : nums2[j] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (d1 &gt;= d2) &#123;</span><br><span class="line">                s1 += d1;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s2 -= d2;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1775-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> l1 = nums1.<span class="built_in">size</span>(), l2 = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (l1 * <span class="number">6</span> &lt; l2 || l2 * <span class="number">6</span> &lt; l1) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> s1 = <span class="built_in">accumulate</span>(<span class="built_in">begin</span>(nums1), <span class="built_in">end</span>(nums1), <span class="number">0</span>), s2 = <span class="built_in">accumulate</span>(<span class="built_in">begin</span>(nums2), <span class="built_in">end</span>(nums2), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (s1 &gt; s2) <span class="keyword">return</span> <span class="built_in">minOperations</span>(nums2, nums1);</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">5</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums1) ++cnt[<span class="number">6</span> - num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums2) ++cnt[num - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (s1 &lt; s2) &#123;</span><br><span class="line">            <span class="keyword">while</span> (cnt[i] == <span class="number">0</span>) --i;</span><br><span class="line">            s1 += i;</span><br><span class="line">            --cnt[i];</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>Reference: <a href="https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations/discuss/1085786/JavaPython-3-2-Greedy-codes%3A-sort-and-count-w-brief-explanation-and-analysis.">[Java&#x2F;Python 3] 2 Greedy codes: sort and count w&#x2F; brief explanation and analysis. - LeetCode Discuss</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1738. Find Kth Largest XOR Coordinate Value</title>
    <url>/LeetCode/leetcode-1738-find-kth-largest-xor-coordinate-value/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1738-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1738-solution-1">Prefix-Sum with Sortion</a></li><li class="tab"><a href="#leetcode-1738-solution-2">Prefix-Sum with Quickselect</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1738-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthLargestValue</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(dp[i][j] = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] ^ dp[i - <span class="number">1</span>][j] ^ dp[i][j - <span class="number">1</span>] ^ dp[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">return</span> ans[k - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1738-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthLargestValue</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(dp[i][j] = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] ^ dp[i - <span class="number">1</span>][j] ^ dp[i][j - <span class="number">1</span>] ^ dp[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">nth_element</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">begin</span>() + k - <span class="number">1</span>, ans.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">return</span> ans[k - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1742. Maximum Number of Balls in a Box</title>
    <url>/LeetCode/leetcode-1742-maximum-number-of-balls-in-a-box/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBalls</span><span class="params">(<span class="type">int</span> lowLimit, <span class="type">int</span> highLimit)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lowLimit; i &lt;= highLimit; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i, box = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                box += num % <span class="number">10</span>;</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m.put(box, m.getOrDefault(box, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; e : m.entrySet()) ans = Math.max(ans, e.getValue());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Hash Table</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1781. Sum of Beauty of All Substrings</title>
    <url>/LeetCode/leetcode-1781-sum-of-beauty-of-all-substrings/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">beautySum</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">fill</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            m.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="type">const</span> <span class="type">int</span> c = ++dp[s[j] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                ++m[c];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">auto</span> it = m.<span class="built_in">find</span>(c - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (--it-&gt;second == <span class="number">0</span>)</span><br><span class="line">                        m.<span class="built_in">erase</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">                ans += m.<span class="built_in">rbegin</span>()-&gt;first - m.<span class="built_in">begin</span>()-&gt;first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 179. Largest Number</title>
    <url>/LeetCode/leetcode-179-largest-number/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">largestNumber</span> = (<span class="params">nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ans = nums.<span class="title function_">map</span>(<span class="function"><span class="params">a</span> =&gt;</span> a.<span class="title function_">toString</span>())</span><br><span class="line">        <span class="comment">// .sort((a, b) =&gt; (a + b) - (b + a))</span></span><br><span class="line">        <span class="comment">// .reduce((prev, curr) =&gt; curr + prev);</span></span><br><span class="line">        .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (b + a) - (a + b))</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ans[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1798. Maximum Number of Consecutive Values You Can Make</title>
    <url>/LeetCode/leetcode-1798-maximum-number-of-consecutive-values-you-can-make/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getMaximumConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>; <span class="comment">// start from [0, r].</span></span><br><span class="line">        <span class="built_in">sort</span>(coins.<span class="built_in">begin</span>(), coins.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="comment">// to make [0, r] &amp; [coin, coin + r] connected,</span></span><br><span class="line">            <span class="comment">// coin should not be greater than &#x27;r + 1&#x27;.</span></span><br><span class="line">            <span class="keyword">if</span> (coin &lt;= r + <span class="number">1</span>) r += coin;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1827. Minimum Operations to Make the Array Increasing</title>
    <url>/LeetCode/leetcode-1827-minimum-operations-to-make-the-array-increasing/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, prev = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= prev) &#123;</span><br><span class="line">                <span class="type">int</span> next = prev + <span class="number">1</span>;</span><br><span class="line">                ans += next - num;</span><br><span class="line">                prev = next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev = num;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1829. Maximum XOR for Each Query</title>
    <url>/LeetCode/leetcode-1829-maximum-xor-for-each-query/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getMaximumXor</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> maximumBit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), mask = <span class="number">0</span>, target = (<span class="number">1</span> &lt;&lt; maximumBit) - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            mask ^= num;</span><br><span class="line">            ans[--n] = (mask ^ target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1833. Maximum Ice Cream Bars</title>
    <url>/LeetCode/leetcode-1833-maximum-ice-cream-bars/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1833-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1833-solution-1">Sort + Greedy</a></li><li class="tab"><a href="#leetcode-1833-solution-2">Counting Sort + Greedy</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1833-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxIceCream</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; costs, <span class="type">int</span> coins)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">begin</span>(costs), <span class="built_in">end</span>(costs));</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cost : costs) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((coins -= cost) &gt;= <span class="number">0</span>)</span><br><span class="line">                ++ans;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1833-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxIceCream</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; costs, <span class="type">int</span> coins)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cost : costs) ++c[cost];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N &amp;&amp; i &lt;= coins; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i]) &#123;</span><br><span class="line">                <span class="type">int</span> x = <span class="built_in">min</span>(c[i], coins / i);</span><br><span class="line">                coins -= i * x;</span><br><span class="line">                ans += x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Sorting</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1828. Queries on Number of Points Inside a Circle</title>
    <url>/LeetCode/leetcode-1828-queries-on-number-of-points-inside-a-circle/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countPoints</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = queries[i][<span class="number">0</span>], y = queries[i][<span class="number">1</span>], r = queries[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; point : points)</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">pow</span>(point[<span class="number">0</span>] - x, <span class="number">2</span>) + <span class="built_in">pow</span>(point[<span class="number">1</span>] - y, <span class="number">2</span>) &lt;= r * r)</span><br><span class="line">                    ++ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1837. Sum of Digits in Base K</title>
    <url>/LeetCode/leetcode-1837-sum-of-digits-in-base-k/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumBase</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            ans += n % k;</span><br><span class="line">            n /= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1856. Maximum Subarray Min-Product</title>
    <url>/LeetCode/leetcode-1856-maximum-subarray-min-product/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSumMinProduct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            sum[i + <span class="number">1</span>] = sum[i] + nums[i];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(n)</span>, <span class="title">next</span><span class="params">(n)</span></span>;</span><br><span class="line">        pre[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt;= nums[i])</span><br><span class="line">                j = pre[j];</span><br><span class="line">            pre[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        next[n - <span class="number">1</span>] = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] &gt;= nums[i])</span><br><span class="line">                j = next[j];</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, nums[i] * (sum[next[i]] - sum[pre[i] + <span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">return</span> ans % <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt; (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Union Find</tag>
        <tag>Sort</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1862. Sum of Floored Pairs</title>
    <url>/LeetCode/leetcode-1862-sum-of-floored-pairs/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumOfFlooredPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> upper = *<span class="built_in">max_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(upper + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: nums) &#123;</span><br><span class="line">            ++s[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(upper + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= upper; ++i) &#123;</span><br><span class="line">            s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j * i &lt;= upper; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> l = j * i, r = <span class="built_in">min</span>((j + <span class="number">1</span>) * i - <span class="number">1</span>, upper);</span><br><span class="line">                <span class="type">int</span> sum = (LL) (s[r] - s[l - <span class="number">1</span>]) * j % MOD;</span><br><span class="line">                ans = (ans + (LL) sum) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1838. Frequency of the Most Frequent Element</title>
    <url>/LeetCode/leetcode-1838-frequency-of-the-most-frequent-element/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxFrequency</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; n; ++r) &#123;</span><br><span class="line">            sum += nums[r];</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; sum + k &lt; <span class="built_in">static_cast</span>&lt;<span class="type">long</span>&gt;(nums[r]) * (r - l + <span class="number">1</span>))</span><br><span class="line">                sum -= nums[l++];</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1879. Minimum XOR Sum of Two Arrays</title>
    <url>/LeetCode/leetcode-1879-minimum-xor-sum-of-two-arrays/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumXORSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(), range = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(range, INT_MAX)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> mask = <span class="number">1</span>; mask &lt; range; ++mask) &#123;</span><br><span class="line">            <span class="type">int</span> bits = __builtin_popcount(mask);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> pos = <span class="number">0</span>; pos &lt; n; ++pos)</span><br><span class="line">                <span class="keyword">if</span> (mask &gt;&gt; pos &amp; <span class="number">1</span>)</span><br><span class="line">                    dp[mask] = <span class="built_in">min</span>(dp[mask], dp[mask ^ (<span class="number">1</span> &lt;&lt; pos)] + (nums1[bits - <span class="number">1</span>] ^ nums2[pos]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[range - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 188. Best Time to Buy and Sell Stock IV</title>
    <url>/LeetCode/leetcode-188-best-time-to-buy-and-sell-stock-iv/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * k &gt; prices.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">                ans += Math.max(prices[i] - prices[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span> * k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span> * k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= <span class="number">2</span> * k; j += <span class="number">2</span>) &#123;</span><br><span class="line">                dp[i % <span class="number">2</span>][j] = Math.max(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j], j - <span class="number">1</span> &gt;= <span class="number">0</span>? dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>] + prices[i] - prices[i - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * k -<span class="number">1</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">profit</span> <span class="operator">=</span> prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">                dp[i % <span class="number">2</span>][j] = Math.max(dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j] + profit, dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    dp[i % <span class="number">2</span>][j] = Math.max(dp[i % <span class="number">2</span>][j], dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">2</span>] + profit);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> (prices.length - <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span> * k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dp[r][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1882. Process Tasks Using Servers</title>
    <url>/LeetCode/leetcode-1882-process-tasks-using-servers/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">int</span>&gt; PLI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">assignTasks</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; servers, vector&lt;<span class="type">int</span>&gt;&amp; tasks)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = tasks.<span class="built_in">size</span>();</span><br><span class="line">        priority_queue&lt;PLI, vector&lt;PLI&gt;, greater&lt;PLI&gt;&gt; busy; <span class="comment">// &lt;t, idx&gt;</span></span><br><span class="line">        priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; idle; <span class="comment">// &lt;w, idx&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; servers.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            idle.<span class="built_in">emplace</span>(servers[i], i);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> release = [&amp;]() &#123;</span><br><span class="line">            <span class="keyword">while</span> (!busy.<span class="built_in">empty</span>() &amp;&amp; busy.<span class="built_in">top</span>().first &lt;= t) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [_, idx] = busy.<span class="built_in">top</span>(); busy.<span class="built_in">pop</span>();</span><br><span class="line">                idle.<span class="built_in">emplace</span>(servers[idx], idx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            t = <span class="built_in">max</span>(t, <span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt; (i));</span><br><span class="line">            <span class="built_in">release</span>();</span><br><span class="line">            <span class="keyword">if</span> (idle.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                t = busy.<span class="built_in">top</span>().first;</span><br><span class="line">                <span class="built_in">release</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">auto</span> [_, idx] = idle.<span class="built_in">top</span>(); idle.<span class="built_in">pop</span>();</span><br><span class="line">            ans[i] = idx;</span><br><span class="line">            busy.<span class="built_in">emplace</span>(t + tasks[i], idx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1883. Minimum Skips to Arrive at Meeting On Time</title>
    <url>/LeetCode/leetcode-1883-minimum-skips-to-arrive-at-meeting-on-time/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>, INF = INT_MAX;</span><br><span class="line"><span class="type">double</span> f[N][N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSkips</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; dist, <span class="type">int</span> speed, <span class="type">int</span> hoursBefore)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = dist.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">double</span> t = (<span class="type">double</span>) dist[i - <span class="number">1</span>] / speed;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">                f[i][j] = INF;</span><br><span class="line">                <span class="keyword">if</span> (j &lt;= i - <span class="number">1</span>) f[i][j] = <span class="built_in">ceil</span>(f[i - <span class="number">1</span>][j] + t - eps);</span><br><span class="line">                <span class="keyword">if</span> (j) f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (f[n][i] &lt; hoursBefore + eps)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 189. Rotate Array</title>
    <url>/LeetCode/leetcode-189-rotate-array/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-189-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-189-solution-1">Extra Array</a></li><li class="tab"><a href="#leetcode-189-solution-2">Cyclic Replacement</a></li><li class="tab"><a href="#leetcode-189-solution-3">Reverse Array</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-189-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">newArr</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            newArr[(i + k) % n] = nums[i];</span><br><span class="line">        nums.<span class="built_in">assign</span>(newArr.<span class="built_in">begin</span>(), newArr.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-189-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        k %= n;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="built_in">gcd</span>(n, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> start = <span class="number">0</span>; start &lt; cnt; ++start) &#123;</span><br><span class="line">            <span class="type">int</span> currIndex = start;</span><br><span class="line">            <span class="type">int</span> currVal = nums[currIndex];</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="type">int</span> nextIndex = (currIndex + k) % n;</span><br><span class="line">                <span class="type">int</span> nextVal = nums[nextIndex];</span><br><span class="line">                nums[nextIndex] = currVal;</span><br><span class="line">                currIndex = nextIndex;</span><br><span class="line">                currVal = nextVal;</span><br><span class="line">            &#125; <span class="keyword">while</span> (currIndex != start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-189-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        k %= nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(nums, k, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">            <span class="built_in">swap</span>(nums[start++], nums[end--]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1893. Check if All the Integers in a Range Are Covered</title>
    <url>/LeetCode/leetcode-1893-check-if-all-the-integers-in-a-range-are-covered/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1893-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1893-solution-1">Brute Force</a></li><li class="tab"><a href="#leetcode-1893-solution-2">Prefix-Sum</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1893-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCovered</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ranges, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; x : ranges)</span><br><span class="line">                <span class="keyword">if</span> (x[<span class="number">0</span>] &lt;= i &amp;&amp; i &lt;= x[<span class="number">1</span>]) &#123;</span><br><span class="line">                    ans = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ans)</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1893-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCovered</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ranges, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = ranges.<span class="built_in">size</span>(), s = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> diff[<span class="number">52</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;r : ranges) ++diff[r[<span class="number">0</span>]], --diff[r[<span class="number">1</span>] + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; left; ++i) s += diff[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; ++i)</span><br><span class="line">            <span class="keyword">if</span> ((s += diff[i]) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1896. Minimum Cost to Change the Final Value of Expression</title>
    <url>/LeetCode/leetcode-1896-minimum-cost-to-change-the-final-value-of-expression/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperationsToFlip</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; stack_num;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; stack_op;</span><br><span class="line">        <span class="keyword">auto</span> op_and = [](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2) -&gt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="built_in">min</span>(&#123;x1 + x2, x1 + y2, x2 + y1&#125;), y1 + y2&#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> op_or = [](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2) -&gt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;x1 + x2, <span class="built_in">min</span>(&#123;x1 + y2, x2 + y1, x2 + y1, y1 + y2&#125;)&#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> calc = [&amp;]() &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack_num.<span class="built_in">size</span>() &gt;= <span class="number">2</span> &amp;&amp; (stack_op.<span class="built_in">back</span>() == <span class="string">&#x27;|&#x27;</span> || stack_op.<span class="built_in">back</span>() == <span class="string">&#x27;&amp;&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [x1, y1] = stack_num.<span class="built_in">back</span>(); stack_num.<span class="built_in">pop_back</span>();</span><br><span class="line">                <span class="keyword">auto</span> [x2, y2] = stack_num.<span class="built_in">back</span>(); stack_num.<span class="built_in">pop_back</span>();</span><br><span class="line">                <span class="keyword">auto</span> [x_and, y_and] = <span class="built_in">op_and</span>(x1, y1, x2, y2);</span><br><span class="line">                <span class="keyword">auto</span> [x_or, y_or] = <span class="built_in">op_or</span>(x1, y1, x2, y2);</span><br><span class="line">                <span class="keyword">if</span> (stack_op.<span class="built_in">back</span>() == <span class="string">&#x27;&amp;&#x27;</span>) &#123;</span><br><span class="line">                    stack_num.<span class="built_in">emplace_back</span>(<span class="built_in">min</span>(x_and, x_or + <span class="number">1</span>), <span class="built_in">min</span>(y_and, y_or + <span class="number">1</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stack_num.<span class="built_in">emplace_back</span>(<span class="built_in">min</span>(x_or, x_and + <span class="number">1</span>), <span class="built_in">min</span>(y_or, y_and + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                stack_op.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : expression) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;|&#x27;</span> || c == <span class="string">&#x27;&amp;&#x27;</span>) &#123;</span><br><span class="line">                stack_op.<span class="built_in">push_back</span>(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                stack_num.<span class="built_in">emplace_back</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">calc</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                stack_num.<span class="built_in">emplace_back</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">calc</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">assert</span>(c == <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                stack_op.<span class="built_in">pop_back</span>();</span><br><span class="line">                <span class="built_in">calc</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(stack_num[<span class="number">0</span>].first, stack_num[<span class="number">0</span>].second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1894. Find the Student that Will Replace the Chalk</title>
    <url>/LeetCode/leetcode-1894-find-the-student-that-will-replace-the-chalk/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">chalkReplacer</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; chalk, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c : chalk) s += c;</span><br><span class="line">        <span class="type">int</span> t = k % s, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (t &gt;= chalk[i]) t -= chalk[i++];</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1895. Largest Magic Square</title>
    <url>/LeetCode/leetcode-1895-largest-magic-square/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; g, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= c; ++i) &#123;</span><br><span class="line">            LL s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = b; j &lt;= d; ++j) s += g[i][j];</span><br><span class="line">            <span class="keyword">if</span> (sum &amp;&amp; sum != s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            sum = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = b; i &lt;= d; ++i) &#123;</span><br><span class="line">            LL s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = a; j &lt;= c; ++j) s += g[j][i];</span><br><span class="line">            <span class="keyword">if</span> (sum != s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LL s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a, j = b; i &lt;= c; ++i, ++j)</span><br><span class="line">            s += g[i][j];</span><br><span class="line">        <span class="keyword">if</span> (s != sum) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a, j = d; i &lt;= c; ++i, --j)</span><br><span class="line">            s+= g[i][j];</span><br><span class="line">        <span class="keyword">return</span> s == sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestMagicSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; g)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = g.<span class="built_in">size</span>(), m = g[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="built_in">min</span>(n, m); k &gt;= <span class="number">2</span>; --k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i + k - <span class="number">1</span> &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j + k - <span class="number">1</span> &lt; m; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">check</span>(g, i, j, i + k - <span class="number">1</span>, j + k - <span class="number">1</span>))</span><br><span class="line">                        <span class="keyword">return</span> k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1897. Redistribute Characters to Make All Strings Equal</title>
    <url>/LeetCode/leetcode-1897-redistribute-characters-to-make-all-strings-equal/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">makeEqual</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : words) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c : w) &#123;</span><br><span class="line">                ++cnt[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">25</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (cnt[i] &amp;&amp; cnt[i] % n)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1898. Maximum Number of Removable Characters</title>
    <url>/LeetCode/leetcode-1898-maximum-number-of-removable-characters/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span>;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumRemovals</span><span class="params">(string s, string p, vector&lt;<span class="type">int</span>&gt;&amp; removable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> mid) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) st[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mid; ++i) st[removable[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; j &lt; p.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (st[i]) &#123;</span><br><span class="line">                    ++i;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == p[j]) ++j;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> j == p.<span class="built_in">size</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = removable.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1899. Merge Triplets to Form Target Triplet</title>
    <url>/LeetCode/leetcode-1899-merge-triplets-to-form-target-triplet/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">mergeTriplets</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; triplets, vector&lt;<span class="type">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = target[<span class="number">0</span>], y = target[<span class="number">1</span>], z = target[<span class="number">2</span>], a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : triplets)</span><br><span class="line">            <span class="keyword">if</span> (t[<span class="number">0</span>] &lt;= x &amp;&amp; t[<span class="number">1</span>] &lt;= y &amp;&amp; t[<span class="number">2</span>] &lt;= z)</span><br><span class="line">                a = <span class="built_in">max</span>(a, t[<span class="number">0</span>]), b = <span class="built_in">max</span>(b, t[<span class="number">1</span>]), c = <span class="built_in">max</span>(c, t[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> a == x &amp;&amp; b == y &amp;&amp; c == z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 190. Reverse Bits</title>
    <url>/LeetCode/leetcode-190-reverse-bits/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> &amp;&amp; n &gt; <span class="number">0</span>; ++i) &#123;</span><br><span class="line">            ans |= (n &amp; <span class="number">1</span>) &lt;&lt; (<span class="number">31</span> - i);</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1904. The Number of Full Rounds You Have Played</title>
    <url>/LeetCode/leetcode-1904-the-number-of-full-rounds-you-have-played/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfRounds</span><span class="params">(string startTime, string finishTime)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">60</span> * <span class="built_in">stoi</span>(startTime.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">2</span>)) + <span class="built_in">stoi</span>(startTime.<span class="built_in">substr</span>(<span class="number">3</span>)),</span><br><span class="line">            finish = <span class="number">60</span> * <span class="built_in">stoi</span>(finishTime.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">2</span>)) + <span class="built_in">stoi</span>(finishTime.<span class="built_in">substr</span>(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">if</span> (start &gt; finish) finish += <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, finish / <span class="number">15</span> - (start + <span class="number">14</span>) / <span class="number">15</span>); <span class="comment">// max(0, floor(finish / 15) - ceil(start / 15))</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1903. Largest Odd Number in String</title>
    <url>/LeetCode/leetcode-1903-largest-odd-number-in-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">largestOddNumber</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="comment">// if ((num[i] - &#x27;0&#x27;) &amp; 1) break;</span></span><br><span class="line">             <span class="keyword">if</span> (num[i] &amp; <span class="number">1</span>) <span class="keyword">break</span>; <span class="comment">// ASCII code of an odd/even is also an odd/even.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num.<span class="built_in">substr</span>(<span class="number">0</span>, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1905. Count Sub Islands</title>
    <url>/LeetCode/leetcode-1905-count-sub-islands/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid1, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid2)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = grid1.<span class="built_in">size</span>(), m = grid1[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            grid2[x][y] = <span class="number">0</span>;</span><br><span class="line">            <span class="type">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!grid1[x][y]) ans = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; m &amp;&amp; grid2[nx][ny] &amp;&amp; !<span class="built_in">dfs</span>(nx, ny))</span><br><span class="line">                    ans = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">                <span class="keyword">if</span> (grid2[i][j] &amp;&amp; <span class="built_in">dfs</span>(i, j))</span><br><span class="line">                    ++ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1906. Minimum Absolute Difference Queries</title>
    <url>/LeetCode/leetcode-1906-minimum-absolute-difference-queries/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>, M = <span class="number">101</span>;</span><br><span class="line"><span class="type">int</span> s[N][M];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">minDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">100</span>; ++j) &#123;</span><br><span class="line">                s[i][j] = s[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (nums[i - <span class="number">1</span>] == j) ++s[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> l = queries[i][<span class="number">0</span>] + <span class="number">1</span>, r = queries[i][<span class="number">1</span>] + <span class="number">1</span>, pre = <span class="number">0</span>, res = M;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">100</span>; ++j)</span><br><span class="line">                <span class="keyword">if</span> (s[r][j] &gt; s[l - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pre) res = <span class="built_in">min</span>(res, j - pre);</span><br><span class="line">                    pre = j;</span><br><span class="line">                &#125;</span><br><span class="line">            ans[i] = res == M ? <span class="number">-1</span> : res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 191. Number of 1 Bits</title>
    <url>/LeetCode/leetcode-191-number-of-1-bits/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            n &amp;= n - <span class="number">1</span>;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1916. Count Ways to Build Rooms in an Ant Colony</title>
    <url>/LeetCode/leetcode-1916-count-ways-to-build-rooms-in-an-ant-colony/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">waysToBuildRooms</span>(<span class="params">self, prevRoom: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        g = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> curr, prev <span class="keyword">in</span> <span class="built_in">enumerate</span>(prevRoom): g[prev].append(curr)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">curr</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> g[curr]: <span class="keyword">return</span> <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            ans, l = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">next</span> <span class="keyword">in</span> g[curr]:</span><br><span class="line">                tmp, r = dfs(<span class="built_in">next</span>)</span><br><span class="line">                ans = (ans * tmp * math.comb(l + r, r)) % MOD</span><br><span class="line">                l += r</span><br><span class="line">            <span class="keyword">return</span> ans, l + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>Reference: <a href="https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony/discuss/1299540/PythonC%2B%2B-clean-DFS-solution-with-explanation">[Python&#x2F;C++] clean DFS solution with explanation</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Graph</tag>
        <tag>Tree</tag>
        <tag>Math</tag>
        <tag>Topological Sort</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1912. Design Movie Rental System</title>
    <url>/LeetCode/leetcode-1912-design-movie-rental-system/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1912-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1912-solution-1">Cpp</a></li><li class="tab"><a href="#leetcode-1912-solution-2">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1912-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10001</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> shop, movie, price;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node t) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (price != t.price) <span class="keyword">return</span> price &lt; t.price;</span><br><span class="line">        <span class="keyword">if</span> (shop != t.shop) <span class="keyword">return</span> shop &lt; t.shop;</span><br><span class="line">        <span class="keyword">return</span> movie &lt; t.movie;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; in[N]; <span class="comment">// available.</span></span><br><span class="line">set&lt;Node&gt; out; <span class="comment">// rent.</span></span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">int</span>&gt; pr; <span class="comment">// &lt;shop, movie&gt; =&gt; price.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MovieRentingSystem</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MovieRentingSystem</span>(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; entries) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) in[i].<span class="built_in">clear</span>();</span><br><span class="line">        out.<span class="built_in">clear</span>();</span><br><span class="line">        pr.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : entries) &#123;</span><br><span class="line">            <span class="type">int</span> shop = e[<span class="number">0</span>], movie = e[<span class="number">1</span>], price = e[<span class="number">2</span>];</span><br><span class="line">            in[movie].<span class="built_in">insert</span>(&#123;shop, movie, price&#125;);</span><br><span class="line">            pr[&#123;shop, movie&#125;] = price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">search</span><span class="params">(<span class="type">int</span> movie)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; m : in[movie]) &#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(m.shop);</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rent</span><span class="params">(<span class="type">int</span> shop, <span class="type">int</span> movie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = in[movie].<span class="built_in">find</span>(&#123;shop, movie, pr[&#123;shop, movie&#125;]&#125;);</span><br><span class="line">        out.<span class="built_in">insert</span>(*it);</span><br><span class="line">        in[movie].<span class="built_in">erase</span>(it);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">drop</span><span class="params">(<span class="type">int</span> shop, <span class="type">int</span> movie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = out.<span class="built_in">find</span>(&#123;shop, movie, pr[&#123;shop, movie&#125;]&#125;);</span><br><span class="line">        in[movie].<span class="built_in">insert</span>(*it);</span><br><span class="line">        out.<span class="built_in">erase</span>(it);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">report</span>() &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : out) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(&#123;e.shop, e.movie&#125;);</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1912-solution-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MovieRentingSystem</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n: <span class="built_in">int</span>, entries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>):</span><br><span class="line">        self._prices = <span class="built_in">dict</span>()</span><br><span class="line">        self._available = defaultdict(SortedList)</span><br><span class="line">        self._rent = SortedList()</span><br><span class="line">        <span class="keyword">for</span> shop, movie, price <span class="keyword">in</span> entries:</span><br><span class="line">            self._available[movie].add((price, shop))</span><br><span class="line">            self._prices[(shop, movie)] = price</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, movie: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        a = self._available</span><br><span class="line">        <span class="keyword">if</span> movie <span class="keyword">not</span> <span class="keyword">in</span> a: <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> [shop <span class="keyword">for</span> (price, shop) <span class="keyword">in</span> a[movie][:<span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rent</span>(<span class="params">self, shop: <span class="built_in">int</span>, movie: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        price = self._prices[(shop, movie)]</span><br><span class="line">        self._available[movie].discard((price, shop))</span><br><span class="line">        self._rent.add((price, shop, movie))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drop</span>(<span class="params">self, shop: <span class="built_in">int</span>, movie: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        price = self._prices[(shop, movie)]</span><br><span class="line">        self._rent.discard((price, shop, movie))</span><br><span class="line">        self._available[movie].add((price, shop))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">report</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">return</span> [(shop, movie) <span class="keyword">for</span> price, shop, movie <span class="keyword">in</span> self._rent[:<span class="number">5</span>]]</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Heap</tag>
        <tag>Design</tag>
        <tag>Ordered Map</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1920. Build Array from Permutation</title>
    <url>/LeetCode/leetcode-1920-build-array-from-permutation/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">buildArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ans[i] = nums[nums[i]];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1921. Eliminate Maximum Number of Monsters</title>
    <url>/LeetCode/leetcode-1921-eliminate-maximum-number-of-monsters/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eliminateMaximum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; dist, vector&lt;<span class="type">int</span>&gt;&amp; speed)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = dist.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">t</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            t[i] = (dist[i] + speed[i] - <span class="number">1</span>) / speed[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (t[i] &lt;= i) <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1925. Count Square Sum Triples1925. Count Square Sum Triples</title>
    <url>/LeetCode/leetcode-1925-count-square-sum-triples1925-count-square-sum-triples/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countTriples</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1</span>; a &lt;= n; ++a)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">1</span>; b &lt;= n; ++b)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= n; ++c)</span><br><span class="line">                    <span class="keyword">if</span> (a * a + b * b == c * c)</span><br><span class="line">                        ++ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1922. Count Good Numbers</title>
    <url>/LeetCode/leetcode-1922-count-good-numbers/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">LL <span class="title">quickpow</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">        LL ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ans = ans * x % MOD;</span><br><span class="line">            x = x * x % MOD;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodNumbers</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">quickpow</span>(<span class="number">5</span>, (n + <span class="number">1</span>) / <span class="number">2</span>) * <span class="built_in">quickpow</span>(<span class="number">4</span>, n / <span class="number">2</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 1926. Nearest Exit from Entrance in Maze1926. Nearest Exit from Entrance in Maze</title>
    <url>/LeetCode/leetcode-1926-nearest-exit-from-entrance-in-maze1926-nearest-exit-from-entrance-in-maze/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nearestExit</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; maze, vector&lt;<span class="type">int</span>&gt;&amp; entrance)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> R = maze.<span class="built_in">size</span>(), C = maze[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> r = entrance[<span class="number">0</span>], c = entrance[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">vis</span>(R, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(C, <span class="literal">false</span>));</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">emplace</span>(r, c);</span><br><span class="line">        vis[r][c] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ++steps;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [cr, cc] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                    <span class="type">int</span> nr = cr + ds[i], nc = cc + ds[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= R || nc &lt; <span class="number">0</span> || nc &gt;= C || maze[nr][nc] == <span class="string">&#x27;+&#x27;</span> || vis[nr][nc]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (nr == R - <span class="number">1</span> || nc == C - <span class="number">1</span> || nr == <span class="number">0</span> || nc == <span class="number">0</span>) <span class="keyword">return</span> steps;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(nr, nc);</span><br><span class="line">                    vis[nr][nc] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1927. Sum Game</title>
    <url>/LeetCode/leetcode-1927-sum-game/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">sumGame</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, ax = <span class="number">0</span>, bx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (num[i] == <span class="string">&#x27;?&#x27;</span>) ++ax;</span><br><span class="line">            <span class="keyword">else</span> a += num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (num[i] == <span class="string">&#x27;?&#x27;</span>) ++bx;</span><br><span class="line">            <span class="keyword">else</span> b += num[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> x = ax + bx;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> xa = (ax + <span class="number">1</span>) / <span class="number">2</span>, xb = x / <span class="number">2</span> - xa, ya = ax - xa, yb = bx - xb;</span><br><span class="line">        <span class="comment">// [a, ya * 9 + a], [xb * 9 + b, xb * 9 + b + yb * 9]  // Alice focus on minizing a.</span></span><br><span class="line">        <span class="keyword">if</span> (ya * <span class="number">9</span> + a &lt; xb * <span class="number">9</span> + b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// [xa * 9 + a, xa * 9 + a + xb * 9], [b, yb * 9 + b] // Alice focus on maxmizing a.</span></span><br><span class="line">        <span class="keyword">if</span> (xa * <span class="number">9</span> + a &gt; yb * <span class="number">9</span> + b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1929. Concatenation of Array</title>
    <url>/LeetCode/leetcode-1929-concatenation-of-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getConcatenation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n * <span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ans[i] = nums[i];</span><br><span class="line">            ans[i + n] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1930. Unique Length-3 Palindromic Subsequences</title>
    <url>/LeetCode/leetcode-1930-unique-length-3-palindromic-subsequences/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-1930-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-1930-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-1930-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-1930-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPalindromicSubsequence</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, mask = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; n &amp;&amp; s[l] != <span class="string">&#x27;a&#x27;</span> + i) ++l;</span><br><span class="line">            <span class="keyword">while</span> (r &gt;= l &amp;&amp; s[r] != <span class="string">&#x27;a&#x27;</span> + i) --r;</span><br><span class="line">            <span class="keyword">if</span> (r - l &lt;= <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (++l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> idx = s[l] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                mask |= (<span class="number">1</span> &lt;&lt; idx);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mask &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">                    ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-1930-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPalindromicSubsequence</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), l[<span class="number">26</span>] = &#123;[<span class="number">0</span> ... <span class="number">25</span>] = n&#125;, r[<span class="number">26</span>] = &#123;&#125;, mask, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> idx = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            l[idx] = <span class="built_in">min</span>(l[idx], i);</span><br><span class="line">            r[idx] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            mask = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = l[i] + <span class="number">1</span>; j &lt; r[i]; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> idx = s[j] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                mask |= (<span class="number">1</span> &lt;&lt; idx);</span><br><span class="line">            &#125;</span><br><span class="line">            ans += __builtin_popcount(mask);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1941. Check if All Characters Have Equal Number of Occurrences</title>
    <url>/LeetCode/leetcode-1941-check-if-all-characters-have-equal-number-of-occurrences/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">areOccurrencesEqual</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> c[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : s) ++c[ch - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : c)</span><br><span class="line">            <span class="keyword">if</span> (x) &#123;</span><br><span class="line">                m = <span class="built_in">max</span>(m, x);</span><br><span class="line">                <span class="keyword">if</span> (m != x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1942. The Number of the Smallest Unoccupied Chair</title>
    <url>/LeetCode/leetcode-1942-the-number-of-the-smallest-unoccupied-chair/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">smallestChair</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times, <span class="type">int</span> targetFriend)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = times.<span class="built_in">size</span>(), tt = times[targetFriend][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">sort</span>(times.<span class="built_in">begin</span>(), times.<span class="built_in">end</span>());</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q1; <span class="comment">// available</span></span><br><span class="line">        priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; q2; <span class="comment">// unavailable</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) q1.<span class="built_in">emplace</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!q2.<span class="built_in">empty</span>() &amp;&amp; q2.<span class="built_in">top</span>().first &lt;= times[i][<span class="number">0</span>]) &#123;</span><br><span class="line">                q1.<span class="built_in">emplace</span>(q2.<span class="built_in">top</span>().second);</span><br><span class="line">                q2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (times[i][<span class="number">0</span>] == tt) <span class="keyword">return</span> q1.<span class="built_in">top</span>();</span><br><span class="line">            q2.<span class="built_in">emplace</span>(times[i][<span class="number">1</span>], q1.<span class="built_in">top</span>());</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1931. Painting a Grid With Three Different Colors</title>
    <url>/LeetCode/leetcode-1931-painting-a-grid-with-three-different-colors/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="type">int</span> memo[<span class="number">1000</span>][<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">colorTheGrid</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = m, <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dp</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> prevColMask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[c][prevColMask]) <span class="keyword">return</span> memo[c][prevColMask];</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; neighbors;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, prevColMask, <span class="number">0</span>, neighbors);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> nei : neighbors)</span><br><span class="line">            ans = (ans + <span class="built_in">dp</span>(c + <span class="number">1</span>, nei)) % MOD;</span><br><span class="line">        <span class="keyword">return</span> memo[c][prevColMask] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> prevColMask, <span class="type">int</span> currColMask, vector&lt;<span class="type">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r == m) &#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(currColMask);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">getColor</span>(prevColMask, r) != i &amp;&amp; (r == <span class="number">0</span> || <span class="built_in">getColor</span>(currColMask, r - <span class="number">1</span>) != i))</span><br><span class="line">                <span class="built_in">dfs</span>(r + <span class="number">1</span>, prevColMask, <span class="built_in">setColor</span>(currColMask, r, i), ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getColor</span><span class="params">(<span class="type">int</span> mask, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (mask &gt;&gt; (<span class="number">2</span> * pos)) &amp; <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">setColor</span><span class="params">(<span class="type">int</span> mask, <span class="type">int</span> pos, <span class="type">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mask |= (color &lt;&lt; (<span class="number">2</span> * pos));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Reference: <a href="https://leetcode.com/problems/painting-a-grid-with-three-different-colors/discuss/1330185/C%2B%2BPython-DP-and-DFS-and-Bitmask-Picture-explain-Clean-and-Concise">[C++&#x2F;Python] DP &amp; DFS &amp; Bitmask - Picture explain - Clean &amp; Concise</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1943. Describe the Painting</title>
    <url>/LeetCode/leetcode-1943-describe-the-painting/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">splitPainting</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; segments) &#123;</span><br><span class="line">        <span class="function">vector&lt;LL&gt; <span class="title">diff</span><span class="params">(<span class="number">100001</span>)</span></span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, set&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : segments) &#123;</span><br><span class="line">            diff[s[<span class="number">0</span>]] += s[<span class="number">2</span>];</span><br><span class="line">            diff[s[<span class="number">1</span>]] -= s[<span class="number">2</span>];</span><br><span class="line">            m[s[<span class="number">0</span>]].<span class="built_in">insert</span>(s[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;LL&gt;&gt; ans;</span><br><span class="line">        LL s = <span class="number">0</span>, prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100001</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (diff[i] != <span class="number">0</span> || (m.<span class="built_in">count</span>(i) &amp;&amp; m[i] != m[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (prev != <span class="number">0</span> &amp;&amp; s != <span class="number">0</span>)</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(&#123;prev, i, s&#125;);</span><br><span class="line">                s += diff[i];</span><br><span class="line">                prev = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Difference</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1944. Number of Visible People in a Queue</title>
    <url>/LeetCode/leetcode-1944-number-of-visible-people-in-a-queue/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">canSeePersonsCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = heights.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> h = heights[i];</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; heights[stk.<span class="built_in">top</span>()] &lt;= h)</span><br><span class="line">                ++ans[stk.<span class="built_in">top</span>()], stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="built_in">empty</span>())</span><br><span class="line">                ++ans[stk.<span class="built_in">top</span>()];</span><br><span class="line">            stk.<span class="built_in">emplace</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 205. Isomorphic Strings</title>
    <url>/LeetCode/leetcode-205-isomorphic-strings/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m1[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;, m2[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m1[s[i]] != m2[t[i]]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            m1[s[i]] = i + <span class="number">1</span>;</span><br><span class="line">            m2[t[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 207. Course Schedule</title>
    <url>/LeetCode/leetcode-207-course-schedule/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-207-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-207-solution-1">BFS</a></li><li class="tab"><a href="#leetcode-207-solution-2">DFS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-207-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canFinish</span><span class="params">(<span class="type">int</span> numCourses, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">edges</span>(numCourses, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">indeg</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; info : prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].<span class="built_in">push_back</span>(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i)</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            --numCourses;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : edges[u])</span><br><span class="line">                <span class="keyword">if</span> (--indeg[v] == <span class="number">0</span>)</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numCourses == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-207-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canFinish</span><span class="params">(<span class="type">int</span> numCourses, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">resize</span>(numCourses);</span><br><span class="line">        visited.<span class="built_in">resize</span>(numCourses);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; info: prerequisites)</span><br><span class="line">            edges[info[<span class="number">1</span>]].<span class="built_in">push_back</span>(info[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i)</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">    <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        visited[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: edges[u])</span><br><span class="line">            <span class="keyword">if</span> (visited[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v);</span><br><span class="line">                <span class="keyword">if</span> (!valid) <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (visited[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        visited[u] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 208. Implement Trie (Prefix Tree)</title>
    <url>/LeetCode/leetcode-208-implement-trie-prefix-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="built_in">TrieNode</span>(): <span class="built_in">is_word</span>(<span class="literal">false</span>), <span class="built_in">children</span>(<span class="number">26</span>, <span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        ~<span class="built_in">TrieNode</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> (TrieNode* child : children)</span><br><span class="line">                <span class="keyword">if</span> (child) <span class="keyword">delete</span> child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> is_word;</span><br><span class="line">        vector&lt;TrieNode*&gt; children;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">const</span> TrieNode* <span class="title">find</span><span class="params">(<span class="type">const</span> string&amp; prefix)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> TrieNode* p = root_.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> c : prefix) &#123;</span><br><span class="line">            p = p-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">nullptr</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::unique_ptr&lt;TrieNode&gt; root_;</span><br><span class="line">    <span class="built_in">Trie</span>():<span class="built_in">root_</span>(<span class="keyword">new</span> <span class="built_in">TrieNode</span>()) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        TrieNode* p = root_.<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> c : word) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p-&gt;children[c - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">                p-&gt;children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">TrieNode</span>();</span><br><span class="line">            p = p-&gt;children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;is_word = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> TrieNode* p = <span class="built_in">find</span>(word);</span><br><span class="line">        <span class="keyword">return</span> p &amp;&amp; p-&gt;is_word;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(prefix) != <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 213. House Robber II</title>
    <url>/LeetCode/leetcode-213-house-robber-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">rob</span>(nums, <span class="number">0</span>, n - <span class="number">1</span>), <span class="built_in">rob</span>(nums, <span class="number">1</span>, n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre2 = nums[start], pre1 = <span class="built_in">max</span>(nums[start], nums[start + <span class="number">1</span>]), tmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start + <span class="number">2</span>; i &lt; end; ++i) &#123;</span><br><span class="line">            tmp = <span class="built_in">max</span>(pre2 + nums[i], pre1);</span><br><span class="line">            pre2 = pre1;</span><br><span class="line">            pre1 = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(pre1, pre2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 210. Course Schedule II</title>
    <url>/LeetCode/leetcode-210-course-schedule-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-210-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-210-solution-1">BFS</a></li><li class="tab"><a href="#leetcode-210-solution-2">DFS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-210-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="type">int</span> numCourses, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">edges</span>(numCourses, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">indeg</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; info : prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].<span class="built_in">push_back</span>(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i)</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v: edges[u])</span><br><span class="line">                <span class="keyword">if</span> (--indeg[v] == <span class="number">0</span>)</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="built_in">size</span>() == numCourses ? ans : <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-210-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="type">int</span> numCourses, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">resize</span>(numCourses);</span><br><span class="line">        visited.<span class="built_in">resize</span>(numCourses);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; info: prerequisites)</span><br><span class="line">            edges[info[<span class="number">1</span>]].<span class="built_in">push_back</span>(info[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i)</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (!valid) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        visited[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: edges[u])</span><br><span class="line">            <span class="keyword">if</span> (visited[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v);</span><br><span class="line">                <span class="keyword">if</span> (!valid) <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (visited[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        visited[u] = <span class="number">2</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 218. The Skyline Problem</title>
    <url>/LeetCode/leetcode-218-the-skyline-problem/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-218-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-218-solution-1">Cpp</a></li><li class="tab active"><a href="#leetcode-218-solution-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-218-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">getSkyline</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; a, <span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; b) -&gt; <span class="type">bool</span> &#123; <span class="keyword">return</span> a.second &lt; b.second; &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; boundaries;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; building : buildings) &#123;</span><br><span class="line">            boundaries.<span class="built_in">emplace_back</span>(building[<span class="number">0</span>]);</span><br><span class="line">            boundaries.<span class="built_in">emplace_back</span>(building[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(boundaries.<span class="built_in">begin</span>(), boundaries.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="type">int</span> n = buildings.<span class="built_in">size</span>(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; b : boundaries) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; buildings[i][<span class="number">0</span>] &lt;= b) &#123;</span><br><span class="line">                q.<span class="built_in">emplace</span>(buildings[i][<span class="number">1</span>], buildings[i][<span class="number">2</span>]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">top</span>().first &lt;= b)</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> maxn = q.<span class="built_in">empty</span>() ? <span class="number">0</span> : q.<span class="built_in">top</span>().second;</span><br><span class="line">            <span class="keyword">if</span> (ans.<span class="built_in">empty</span>() || maxn != ans.<span class="built_in">back</span>()[<span class="number">1</span>])</span><br><span class="line">                ans.<span class="built_in">push_back</span>(&#123;b, maxn&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-218-solution-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getSkyline</span><span class="params">(<span class="type">int</span>[][] buildings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> buildings.length, i = <span class="number">0</span>, prevh = <span class="number">0</span>;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b[<span class="number">1</span>] - a[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span>[] boundaries = <span class="keyword">new</span> <span class="title class_">int</span>[n * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] b : buildings) &#123;</span><br><span class="line">            boundaries[i++] = b[<span class="number">0</span>];</span><br><span class="line">            boundaries[i++] = b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(boundaries);</span><br><span class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b : boundaries) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; buildings[i][<span class="number">0</span>] &lt;= b) &#123;</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;buildings[i][<span class="number">1</span>], buildings[i][<span class="number">2</span>]&#125;);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!q.isEmpty() &amp;&amp; q.peek()[<span class="number">0</span>] &lt;= b)</span><br><span class="line">                q.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> q.isEmpty() ? <span class="number">0</span> : q.peek()[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (ans.isEmpty() || h != prevh)</span><br><span class="line">                ans.add(List.of(b, prevh = h));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Divide and Conquer</tag>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
        <tag>Ordered Set</tag>
        <tag>Array</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Line Sweep</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2192. All Ancestors of a Node in a Directed Acyclic Graph</title>
    <url>/LeetCode/leetcode-2192-all-ancestors-of-a-node-in-a-directed-acyclic-graph/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2192-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2192-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-2192-solution-2">BitSet</a></li><li class="tab"><a href="#leetcode-2192-solution-3">Kahn</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2192-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">getAncestors</span>(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n), <span class="built_in">ans</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges)</span><br><span class="line">            g[e[<span class="number">0</span>]].<span class="built_in">emplace_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> f, <span class="type">int</span> u) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : g[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans[v].<span class="built_in">empty</span>() || ans[v].<span class="built_in">back</span>() != f) &#123;</span><br><span class="line">                    ans[v].<span class="built_in">emplace_back</span>(f);</span><br><span class="line">                    <span class="built_in">dfs</span>(f, v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">dfs</span>(i, i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2192-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">getAncestors</span>(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges) &#123;</span><br><span class="line">        bitset&lt;1000&gt; a[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges)</span><br><span class="line">            a[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; n; ++v)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u)</span><br><span class="line">                <span class="keyword">if</span> (a[u][v])</span><br><span class="line">                    a[u] |= a[v];</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; n; ++v) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u)</span><br><span class="line">                <span class="keyword">if</span> (a[u][v])</span><br><span class="line">                    f.<span class="built_in">emplace_back</span>(u);</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2192-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">getAncestors</span>(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n), <span class="built_in">ans</span>(n);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">        vector&lt;set&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            g[e[<span class="number">0</span>]].<span class="built_in">emplace_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">            ++d[e[<span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (d[i] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">emplace</span>(i);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : g[u]) &#123;</span><br><span class="line">                f[v].<span class="built_in">insert</span>(u);</span><br><span class="line">                f[v].<span class="built_in">insert</span>(f[u].<span class="built_in">begin</span>(), f[u].<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span> (--d[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans[i].<span class="built_in">assign</span>(f[i].<span class="built_in">begin</span>(), f[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2151. Maximum Good People Based on Statements</title>
    <url>/LeetCode/leetcode-2151-maximum-good-people-based-on-statements/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2151-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2151-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-2151-solution-2">Enumeration</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2151-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumGood</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; statements)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = statements.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">gg</span><span class="params">(n)</span>, <span class="title">bb</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (statements[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    bb[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statements[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    gg[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> g, <span class="type">int</span> b, <span class="type">int</span> i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g &amp; b) <span class="keyword">return</span>; <span class="comment">// conflict.</span></span><br><span class="line">            <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, __builtin_popcount(g));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (n - __builtin_popcount(b) &lt; ans) <span class="keyword">return</span>; <span class="comment">// pruning.</span></span><br><span class="line">            <span class="comment">// 1. say i is good.</span></span><br><span class="line">            <span class="built_in">dfs</span>(g | (<span class="number">1</span> &lt;&lt; i) | gg[i], b | bb[i], i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 2. say i is bad.</span></span><br><span class="line">            <span class="built_in">dfs</span>(g, b | (<span class="number">1</span> &lt;&lt; i), i + <span class="number">1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2151-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumGood</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;statements)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = statements.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++i) &#123; <span class="comment">// enumerate each case represented by a bit mask.</span></span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>, valid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; valid; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>) &#123; <span class="comment">// if j is good.</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n &amp;&amp; valid; ++k) &#123; <span class="comment">// check if there is conflict.</span></span><br><span class="line">                        <span class="keyword">if</span> (statements[j][k] &lt; <span class="number">2</span> &amp;&amp; statements[j][k] != ((i &gt;&gt; k) &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">                            valid = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cnt += valid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (valid) ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bit Manipulation</tag>
        <tag>Backtracking</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2213. Longest Substring of One Repeating Character</title>
    <url>/LeetCode/leetcode-2213-longest-substring-of-one-repeating-character/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2213-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2213-solution-1">Ordered Set</a></li><li class="tab"><a href="#leetcode-2213-solution-2">Segment Tree</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2213-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">longestRepeating</span><span class="params">(string s, string queryCharacters, vector&lt;<span class="type">int</span>&gt;&amp; queryIndices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), k = queryCharacters.<span class="built_in">size</span>();</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m; <span class="comment">// &#123;&#123;left, right&#125;&#125;</span></span><br><span class="line">        multiset&lt;<span class="type">int</span>&gt; ms; <span class="comment">// &#123;length&#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; s[j] == s[i]) ++j;</span><br><span class="line">            m[i] = j - <span class="number">1</span>;</span><br><span class="line">            ms.<span class="built_in">insert</span>(j - i);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cut from pos `left` if `left` is not a start of certain range.</span></span><br><span class="line">        <span class="keyword">auto</span> cut = [&amp;](<span class="type">int</span> left)-&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (left &lt; <span class="number">0</span> || left &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (!m.<span class="built_in">count</span>(left)) &#123;</span><br><span class="line">                <span class="comment">// get the range that contains `left`.</span></span><br><span class="line">                <span class="keyword">auto</span> [l, r] = *<span class="built_in">prev</span>(m.<span class="built_in">lower_bound</span>(left));</span><br><span class="line">                ms.<span class="built_in">extract</span>(r - l + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// split into two ranges, [l, left - 1], [left, r].</span></span><br><span class="line">                m[l] = left - <span class="number">1</span>;</span><br><span class="line">                m[left] = r;</span><br><span class="line">                ms.<span class="built_in">insert</span>(left - l);</span><br><span class="line">                ms.<span class="built_in">insert</span>(r - left + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// join the range that starts with `left` with its prev range if possible.</span></span><br><span class="line">        <span class="keyword">auto</span> join = [&amp;](<span class="type">int</span> left) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= <span class="number">0</span> || left &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">auto</span> [pl, pr] = *<span class="built_in">prev</span>(m.<span class="built_in">lower_bound</span>(left));</span><br><span class="line">            <span class="keyword">if</span> (s[pl] == s[left]) &#123;</span><br><span class="line">                ms.<span class="built_in">extract</span>(pr - pl + <span class="number">1</span>);</span><br><span class="line">                ms.<span class="built_in">extract</span>(m[left] - left + <span class="number">1</span>);</span><br><span class="line">                ms.<span class="built_in">insert</span>(m[left] - pl + <span class="number">1</span>);</span><br><span class="line">                m[pl] = m[left];</span><br><span class="line">                m.<span class="built_in">erase</span>(left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = queryIndices[i];</span><br><span class="line">            <span class="type">char</span> ch = queryCharacters[i];</span><br><span class="line">            <span class="keyword">if</span> (s[left] != ch) &#123;</span><br><span class="line">                s[left] = ch;</span><br><span class="line">                <span class="built_in">cut</span>(left), <span class="built_in">cut</span>(left + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">join</span>(left), <span class="built_in">join</span>(left + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i] = *ms.<span class="built_in">rbegin</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2213-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r, prefix, suffix, val;</span><br><span class="line">        <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">        <span class="built_in">Node</span>(<span class="type">int</span> l, <span class="type">int</span> r) : <span class="built_in">l</span>(l), <span class="built_in">r</span>(r), <span class="built_in">prefix</span>(<span class="number">1</span>), <span class="built_in">suffix</span>(<span class="number">1</span>), <span class="built_in">val</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">    &#125; tr[<span class="number">400000</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        tr[u] = &#123;l, r&#125;;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> i, <span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[u].l == i &amp;&amp; tr[u].r == i) &#123;</span><br><span class="line">            s[i - <span class="number">1</span>] = c;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, i, c);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, i, c);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> left = tr[u &lt;&lt; <span class="number">1</span>], right = tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> leftLen = left.r - left.l + <span class="number">1</span>, rightLen = right.r - right.l + <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> leftLast = s[left.r - <span class="number">1</span>], rightFirst = s[right.l - <span class="number">1</span>];</span><br><span class="line">        tr[u].prefix = left.prefix, tr[u].suffix = right.suffix, tr[u].val = <span class="built_in">max</span>(left.val, right.val);</span><br><span class="line">        <span class="keyword">if</span> (leftLast == rightFirst) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.prefix == leftLen) tr[u].prefix = leftLen + right.prefix;</span><br><span class="line">            <span class="keyword">if</span> (right.prefix == rightLen) tr[u].suffix = left.suffix + rightLen;</span><br><span class="line">            tr[u].val = <span class="built_in">max</span>(tr[u].val, left.suffix + right.prefix);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].val;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">longestRepeating</span><span class="params">(string s, string queryCharacters, vector&lt;<span class="type">int</span>&gt;&amp; queryIndices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), k = queryIndices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = s;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">update</span>(<span class="number">1</span>, i + <span class="number">1</span>, s[i]);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, queryIndices[i] + <span class="number">1</span>, queryCharacters[i]);</span><br><span class="line">            ans[i] = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Ordered Set</tag>
        <tag>Array</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2227. Encrypt and Decrypt Strings</title>
    <url>/LeetCode/leetcode-2227-encrypt-and-decrypt-strings/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Encrypter</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, string&gt; k2v;</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; encrypted_dict;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Encrypter</span>(vector&lt;<span class="type">char</span>&gt;&amp; keys, vector&lt;string&gt;&amp; values, vector&lt;string&gt;&amp; dictionary) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; keys.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            k2v[keys[i]] = values[i];</span><br><span class="line">        unordered_map&lt;string, string&gt; dict;</span><br><span class="line">        <span class="keyword">for</span> (string &amp;s : dictionary) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dict.<span class="built_in">count</span>(s)) &#123;</span><br><span class="line">                ++encrypted_dict[dict[s]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                string encryptedStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> c : s) encryptedStr += k2v[c];</span><br><span class="line">                ++encrypted_dict[encryptedStr];</span><br><span class="line">                dict[s] = encryptedStr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">string <span class="title">encrypt</span><span class="params">(string word1)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> &amp;c : word1) ans += k2v[c];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">decrypt</span><span class="params">(string word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encrypted_dict[word2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Encrypter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Encrypter* obj = new Encrypter(keys, values, dictionary);</span></span><br><span class="line"><span class="comment"> * string param_1 = obj-&gt;encrypt(word1);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;decrypt(word2);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 220. Contains Duplicate III</title>
    <url>/LeetCode/leetcode-220-contains-duplicate-iii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">// limit [nums[i] - t, nums[i] + t] within INT</span></span><br><span class="line">            <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(<span class="built_in">max</span>(nums[i], INT_MIN + t) - t);</span><br><span class="line">            <span class="keyword">if</span> (it != s.<span class="built_in">end</span>() &amp;&amp; *it &lt;= <span class="built_in">min</span>(nums[i], INT_MAX - t) + t)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            s.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k)</span><br><span class="line">                s.<span class="built_in">erase</span>(nums[i - k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sort</tag>
        <tag>Ordered Map</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2223. Sum of Scores of Built Strings</title>
    <url>/LeetCode/leetcode-2223-sum-of-scores-of-built-strings/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">sumScores</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(n)</span></span>;</span><br><span class="line">        z[<span class="number">0</span>] = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; r) &#123;</span><br><span class="line">                l = r = i;</span><br><span class="line">                <span class="keyword">while</span> (r &lt; n &amp;&amp; s[r] == s[r - l] ) ++r;</span><br><span class="line">                z[i] = r - l;</span><br><span class="line">                --r;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> i1 = i - l;</span><br><span class="line">                <span class="keyword">if</span> (z[i1] + i &lt;= r) &#123;</span><br><span class="line">                    z[i] = z[i1];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = i;</span><br><span class="line">                    <span class="keyword">while</span> (r &lt; n &amp;&amp; s[r] == s[r - l]) ++r;</span><br><span class="line">                    z[i] = r - l;</span><br><span class="line">                    --r;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(z.<span class="built_in">begin</span>(), z.<span class="built_in">end</span>(), (<span class="type">long</span> <span class="type">long</span>) <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 224. Basic Calculator</title>
    <url>/LeetCode/leetcode-224-basic-calculator/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>, sign = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                ans += sign * cur;</span><br><span class="line">                cur = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                ans += sign * cur;</span><br><span class="line">                cur = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(ans);</span><br><span class="line">                stk.<span class="built_in">push</span>(sign);</span><br><span class="line">                ans = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                ans += sign * cur;</span><br><span class="line">                cur = <span class="number">0</span>;</span><br><span class="line">                ans *= stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">                ans += stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// digit</span></span><br><span class="line">                cur = cur * <span class="number">10</span> + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="number">0</span>) ans += sign * cur;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2242. Maximum Score of a Node Sequence</title>
    <url>/LeetCode/leetcode-2242-maximum-score-of-a-node-sequence/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; scores, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = scores.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            g[e[<span class="number">0</span>]].<span class="built_in">emplace_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">            g[e[<span class="number">1</span>]].<span class="built_in">emplace_back</span>(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(g[i].<span class="built_in">begin</span>(), g[i].<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">                <span class="keyword">return</span> scores[x] &gt; scores[y];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            <span class="type">int</span> x = e[<span class="number">0</span>], y = e[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> &amp;&amp; i &lt; g[x].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (g[x][i] != y) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> &amp;&amp; j &lt; g[y].<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (g[y][j] != x &amp;&amp; g[x][i] != g[y][j]) &#123;</span><br><span class="line">                            ans = <span class="built_in">max</span>(ans, scores[g[x][i]] + scores[x] + scores[y] + scores[g[y][j]]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Sorting</tag>
        <tag>Array</tag>
        <tag>Enumeration</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2246. Longest Path With Different Adjacent Characters</title>
    <url>/LeetCode/leetcode-2246-longest-path-with-different-adjacent-characters/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPath</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; parent, string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = parent.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            g[parent[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u) &#123;</span><br><span class="line">            <span class="type">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : g[u]) &#123;</span><br><span class="line">                <span class="type">int</span> len = <span class="built_in">dfs</span>(v) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[v] != s[u]) &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, maxLen + len);</span><br><span class="line">                    maxLen = <span class="built_in">max</span>(maxLen, len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> maxLen;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Array</tag>
        <tag>Tree</tag>
        <tag>String</tag>
        <tag>Depth-first Search</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2251. Number of Flowers in Full Bloom</title>
    <url>/LeetCode/leetcode-2251-number-of-flowers-in-full-bloom/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2251-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2251-solution-1">Difference</a></li><li class="tab"><a href="#leetcode-2251-solution-2">Binary Search</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2251-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fullBloomFlowers</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flowers, vector&lt;<span class="type">int</span>&gt;&amp; persons)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; diff;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;f : flowers) ++diff[f[<span class="number">0</span>]], --diff[f[<span class="number">1</span>] + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> n = persons.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">id</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="built_in">iota</span>(id.<span class="built_in">begin</span>(), id.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(id.<span class="built_in">begin</span>(), id.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">            <span class="keyword">return</span> persons[i] &lt; persons[j];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> it = diff.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : id) &#123;</span><br><span class="line">            <span class="keyword">while</span> (it != diff.<span class="built_in">end</span>() &amp;&amp; it-&gt;first &lt;= persons[i])</span><br><span class="line">                s += it++-&gt;second;</span><br><span class="line">            ans[i] = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2251-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fullBloomFlowers</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; flowers, vector&lt;<span class="type">int</span>&gt;&amp; persons)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = flowers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(n)</span>, <span class="title">e</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) s[i] = flowers[i][<span class="number">0</span>], e[i] = flowers[i][<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> m = persons.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            ans[i] = (<span class="built_in">upper_bound</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), persons[i]) - s.<span class="built_in">begin</span>())</span><br><span class="line">                - (<span class="built_in">lower_bound</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>(), persons[i]) - e.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Sorting</tag>
        <tag>Ordered Set</tag>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2258. Escape the Spreading Fire</title>
    <url>/LeetCode/leetcode-2258-escape-the-spreading-fire/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumMinutes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>(), ds[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dis</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</span><br><span class="line">                    dis[i][j] = <span class="number">0</span>, q.<span class="built_in">emplace</span>(i, j);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n || dis[nx][ny] != <span class="number">-1</span> || grid[nx][ny] == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dis[nx][ny] = dis[x][y] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">-1</span> &amp;&amp; dis[<span class="number">0</span>][<span class="number">0</span>] &lt;= k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">            q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dep</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">-1</span>));</span><br><span class="line">            dep[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                    <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n || dep[nx][ny] != <span class="number">-1</span> || grid[x][y] == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dis[nx][ny] != <span class="number">-1</span> &amp;&amp; </span><br><span class="line">                        dep[x][y] + <span class="number">1</span> + k &gt;= dis[nx][ny] + (nx == m - <span class="number">1</span> &amp;&amp; ny == n - <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                    dep[nx][ny] = dep[x][y] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dep[m - <span class="number">1</span>][n - <span class="number">1</span>] != <span class="number">-1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>, l = <span class="number">0</span>, r = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) ans = mid, l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
        <tag>Breadth-first Search</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2261. K Divisible Elements Subarrays</title>
    <url>/LeetCode/leetcode-2261-k-divisible-elements-subarrays/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2261-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2261-solution-1">Trie</a></li><li class="tab"><a href="#leetcode-2261-solution-2">Hash Table</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2261-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, Trie*&gt; ch;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == nums.<span class="built_in">size</span>() || k - (nums[i] % p == <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[nums[i]] == <span class="literal">nullptr</span>)</span><br><span class="line">            ch[nums[i]] = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">        <span class="keyword">return</span> (++ch[nums[i]]-&gt;cnt == <span class="number">1</span>) +</span><br><span class="line">            ch[nums[i]]-&gt;<span class="built_in">insert</span>(nums, i + <span class="number">1</span>, k - (nums[i] % p == <span class="number">0</span>), p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDistinct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        Trie t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            ans += t.<span class="built_in">insert</span>(nums, i, k, p);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2261-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDistinct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// start point.</span></span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j++) &#123; <span class="comment">// end point.</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] % p == <span class="number">0</span> &amp;&amp; ++cnt &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                tmp += nums[j] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s.<span class="built_in">insert</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Trie</tag>
        <tag>Enumeration</tag>
        <tag>Rolling Hash</tag>
        <tag>Hash Function</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2266. Count Number of Texts</title>
    <url>/LeetCode/leetcode-2266-count-number-of-texts/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countTexts</span><span class="params">(string pressedKeys)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = pressedKeys.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// a =&gt; press once on a key.</span></span><br><span class="line">        <span class="comment">// b =&gt; press twice on the same key.</span></span><br><span class="line">        <span class="comment">// c =&gt; press thrice on the same key.</span></span><br><span class="line">        <span class="comment">// d =&gt; press four times on the same key.</span></span><br><span class="line">        LL a = <span class="number">1</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> x = pressedKeys[i];</span><br><span class="line">            <span class="keyword">if</span> (x != pressedKeys[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                a = (a + b + c + d) % MOD;</span><br><span class="line">                b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LL t = (a + b + c + d) % MOD;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="string">&#x27;7&#x27;</span> || x == <span class="string">&#x27;9&#x27;</span>) d = c;</span><br><span class="line">                c = b;</span><br><span class="line">                b = a;</span><br><span class="line">                a = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (a + b + c + d) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2262. Total Appeal of A String</title>
    <url>/LeetCode/leetcode-2262-total-appeal-of-a-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">appealSum</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0L</span>, sum = <span class="number">0L</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pos</span><span class="params">(<span class="number">26</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> c = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            sum += i - pos[c];</span><br><span class="line">            ans += sum;</span><br><span class="line">            pos[c] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2267. Check if There Is a Valid Parentheses String Path</title>
    <url>/LeetCode/leetcode-2267-check-if-there-is-a-valid-parentheses-string-path/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2267-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2267-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-2267-solution-2">Bit Manipulation</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2267-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasValidPath</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; &amp;grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (((m + n - <span class="number">1</span>) &amp; <span class="number">1</span>) || grid[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;)&#x27;</span> || grid[m - <span class="number">1</span>][n - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">bool</span> vis[m][n][(m + n + <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> c) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c &gt; m - x + n - y + <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// pruning, too many &#x27;(&#x27;.</span></span><br><span class="line">            <span class="keyword">if</span> (x == m - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) <span class="keyword">return</span> c == <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (vis[x][y][c]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            vis[x][y][c] = <span class="literal">true</span>;</span><br><span class="line">            c += grid[x][y] == <span class="string">&#x27;(&#x27;</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> c &gt;= <span class="number">0</span> &amp;&amp; (x &lt; m - <span class="number">1</span> &amp;&amp; <span class="built_in">dfs</span>(x + <span class="number">1</span>, y, c) || y &lt; n - <span class="number">1</span> &amp;&amp; <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, c));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2267-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasValidPath</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">__uint128_t</span>&gt; <span class="title">f</span><span class="params">(m)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : grid) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) f[i] |= f[i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) f[i] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> f[i] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f.<span class="built_in">back</span>() &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>References:</p>
<ol>
<li><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path/solution/tian-jia-zhuang-tai-hou-dfscpythonjavago-f287/">添加状态后 DFS + 剪枝优化（Python&#x2F;Java&#x2F;C++&#x2F;Go）</a></li>
<li><a href="https://leetcode.cn/problems/counting-bits/solution/bi-te-wei-ji-shu-by-leetcode-solution-0t1i/">__uint128_t位运算优化动态规划</a></li>
</ol>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 227. Basic Calculator II</title>
    <url>/LeetCode/leetcode-227-basic-calculator-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">char</span> preSign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>(), num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i]))</span><br><span class="line">                num = num * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ((!<span class="built_in">isdigit</span>(s[i]) &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (preSign) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push_back</span>(num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">push_back</span>(-num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">back</span>() *= num;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                        stk.<span class="built_in">back</span>() /= num;</span><br><span class="line">                &#125;</span><br><span class="line">                preSign = s[i];</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(stk.<span class="built_in">begin</span>(), stk.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2271. Maximum White Tiles Covered by a Carpet</title>
    <url>/LeetCode/leetcode-2271-maximum-white-tiles-covered-by-a-carpet/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2271-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2271-solution-1">Sliding Window</a></li><li class="tab"><a href="#leetcode-2271-solution-2">Two Pointers</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2271-solution-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumWhiteTiles</span><span class="params">(<span class="type">int</span>[][] tiles, <span class="type">int</span> carpetLen)</span> &#123;</span><br><span class="line">        Arrays.sort(tiles, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tiles.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="number">0</span>; r &lt; n; ++l) &#123;</span><br><span class="line">            <span class="keyword">while</span> (r &lt; n &amp;&amp; tiles[r][<span class="number">1</span>] - tiles[l][<span class="number">0</span>] + <span class="number">1</span> &lt;= carpetLen) &#123;</span><br><span class="line">                s += tiles[r][<span class="number">1</span>] - tiles[r][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                ++r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r == n) ans = Math.max(ans, s);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">coveredPath</span> <span class="operator">=</span> Math.max(tiles[l][<span class="number">0</span>] + carpetLen - tiles[r][<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">                ans = Math.max(ans, coveredPath + s);</span><br><span class="line">                s -= tiles[l][<span class="number">1</span>] - tiles[l][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2271-solution-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumWhiteTiles</span><span class="params">(<span class="type">int</span>[][] tiles, <span class="type">int</span> carpetLen)</span> &#123;</span><br><span class="line">        Arrays.sort(tiles, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tiles.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="number">0</span>; r &lt; n;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftBoundary</span> <span class="operator">=</span> tiles[l][<span class="number">0</span>], rightBoundary = leftBoundary + carpetLen - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (tiles[r][<span class="number">1</span>] &lt;= rightBoundary) &#123; <span class="comment">// covered.</span></span><br><span class="line">                s += tiles[r][<span class="number">1</span>] - tiles[r][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                ans = Math.max(ans, s);</span><br><span class="line">                ++r;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rightBoundary &gt; tiles[r][<span class="number">0</span>]) <span class="comment">// partially covered.</span></span><br><span class="line">                    ans = Math.max(ans, s + rightBoundary - tiles[r][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                s -= tiles[l][<span class="number">1</span>] - tiles[l][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode 2272. Substring With Largest Variance</title>
    <url>/LeetCode/leetcode-2272-substring-with-largest-variance/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestVariance</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">char</span>&gt; <span class="title">unique</span><span class="params">(s.begin(), s.end())</span></span>;</span><br><span class="line">        <span class="comment">// go through each possibilities to find the ans.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> a : unique)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> b : unique) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> var = <span class="number">0</span>, has_b = <span class="number">0</span>, first_b = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> ch : s) &#123;</span><br><span class="line">                    <span class="comment">// var is used to track the occurrences diff between &quot;a&quot; and &quot;b&quot;.</span></span><br><span class="line">                    <span class="keyword">if</span> (ch == a) ++var;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ch == b) &#123;</span><br><span class="line">                        has_b = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// we are having a leading &quot;b&quot; and now one more &quot;b&quot; with cnt(a) &gt;= cnt(b),</span></span><br><span class="line">                        <span class="comment">// so we can cut the leading &quot;b&quot; for a better ans.</span></span><br><span class="line">                        <span class="keyword">if</span> (first_b &amp;&amp; var &gt;= <span class="number">0</span>) first_b = <span class="literal">false</span>;</span><br><span class="line">                        <span class="comment">// &quot;--var &lt; 0&quot; indicates that we are having too many &quot;b(s)&quot; here,</span></span><br><span class="line">                        <span class="comment">// so we take this &quot;b&quot; as a fresh start.</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (--var &lt; <span class="number">0</span>) first_b = <span class="literal">true</span>, var = <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// update the ans if and only if &quot;b&quot; is within the substr.</span></span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, has_b ? var : <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Reference: <a href="https://leetcode.com/problems/substring-with-largest-variance/discuss/2039178/Weird-Kadane">Weird Kadane - LeetCode Discuss</a>.</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2276. Count Integers in Intervals</title>
    <url>/LeetCode/leetcode-2276-count-integers-in-intervals/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountIntervals</span> &#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CountIntervals</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">lower_bound</span>(left); it != m.<span class="built_in">end</span>() &amp;&amp; it-&gt;second &lt;= right; m.<span class="built_in">erase</span>(it++)) &#123;</span><br><span class="line">            <span class="type">int</span> l = it-&gt;second, r = it-&gt;first;</span><br><span class="line">            left = <span class="built_in">min</span>(left, l), right = <span class="built_in">max</span>(right, r);</span><br><span class="line">            cnt -= r - l + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += right - left + <span class="number">1</span>;</span><br><span class="line">        m[right] = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CountIntervals object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CountIntervals* obj = new CountIntervals();</span></span><br><span class="line"><span class="comment"> * obj-&gt;add(left,right);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;count();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Ordered Set</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 228. Summary Ranges</title>
    <url>/LeetCode/leetcode-228-summary-ranges/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">summaryRanges</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> start = nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (start == nums[i - <span class="number">1</span>])</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(start));</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        ans.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(start) + <span class="string">&quot;-&gt;&quot;</span> + <span class="built_in">to_string</span>(nums[i - <span class="number">1</span>]));</span><br><span class="line">                    start = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start == nums.<span class="built_in">back</span>())</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(nums.<span class="built_in">back</span>()));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="built_in">to_string</span>(start) + <span class="string">&quot;-&gt;&quot;</span> + <span class="built_in">to_string</span>(nums.<span class="built_in">back</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2290. Minimum Obstacle Removal to Reach Corner</title>
    <url>/LeetCode/leetcode-2290-minimum-obstacle-removal-to-reach-corner/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>(), n = grid[<span class="number">0</span>].<span class="built_in">size</span>(), ds[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0x3f3f3f3f</span>));</span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        deque&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">emplace_front</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">                <span class="type">int</span> nx = x + ds[i], ny = y + ds[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> w = grid[nx][ny];</span><br><span class="line">                <span class="keyword">if</span> (dist[nx][ny] &gt; dist[x][y] + w) &#123;</span><br><span class="line">                    dist[nx][ny] = dist[x][y] + w;</span><br><span class="line">                    <span class="keyword">if</span> (w == <span class="number">0</span>) q.<span class="built_in">emplace_front</span>(nx, ny);</span><br><span class="line">                    <span class="keyword">else</span> q.<span class="built_in">emplace_back</span>(nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Array</tag>
        <tag>Breadth-first Search</tag>
        <tag>Heap (Priority Queue)</tag>
        <tag>Matrix</tag>
        <tag>Shortest Path</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2311. Longest Binary Subsequence Less Than or Equal to K</title>
    <url>/LeetCode/leetcode-2311-longest-binary-subsequence-less-than-or-equal-to-k/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubsequence</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = <span class="number">32</span> - __builtin_clz(k);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(n - m), <span class="literal">nullptr</span>, <span class="number">2</span>) &lt;= k ? m : m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans + <span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>() - m, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Greedy</tag>
        <tag>String</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2318. Number of Distinct Roll Sequences</title>
    <url>/LeetCode/leetcode-2318-number-of-distinct-roll-sequences/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2318-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2318-solution-1">Memoization</a></li><li class="tab"><a href="#leetcode-2318-solution-2">DP (3 Dimensions)</a></li><li class="tab"><a href="#leetcode-2318-solution-3">DP (2 Dimensions)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2318-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">1</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="type">bool</span> valid[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distinctSequences</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(valid[<span class="number">0</span>], valid[<span class="number">6</span>] + <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">        valid[<span class="number">2</span>][<span class="number">4</span>] = valid[<span class="number">2</span>][<span class="number">6</span>] = valid[<span class="number">3</span>][<span class="number">6</span>] = valid[<span class="number">4</span>][<span class="number">2</span>] = valid[<span class="number">4</span>][<span class="number">6</span>] = valid[<span class="number">6</span>][<span class="number">2</span>] = valid[<span class="number">6</span>][<span class="number">3</span>] = valid[<span class="number">6</span>][<span class="number">4</span>] = <span class="literal">false</span>;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> n, <span class="type">int</span> p1, <span class="type">int</span> p2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (f[n][p1][p2]) <span class="keyword">return</span> f[n][p1][p2];</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= <span class="number">6</span>; ++x)</span><br><span class="line">                <span class="keyword">if</span> (x != p1 &amp;&amp; x != p2 &amp;&amp; valid[p2][x])</span><br><span class="line">                    res = (res + <span class="built_in">dfs</span>(n - <span class="number">1</span>, p2, x)) % MOD;</span><br><span class="line">            f[n][p1][p2] = res;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(n, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2318-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reference: https://leetcode.cn/problems/number-of-distinct-roll-sequences/solution/by-endlesscheng-tgkn/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>, MX = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">int</span> f[MX + <span class="number">1</span>][<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> init = []() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (j != i &amp;&amp; <span class="built_in">gcd</span>(j + <span class="number">1</span>, i + <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                f[<span class="number">2</span>][i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MX; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> last = <span class="number">0</span>; last &lt; <span class="number">6</span>; ++last)</span><br><span class="line">                <span class="keyword">if</span> (last != j &amp;&amp; <span class="built_in">gcd</span>(last + <span class="number">1</span>, j + <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> last2 = <span class="number">0</span>; last2 &lt; <span class="number">6</span>; ++last2)</span><br><span class="line">                        <span class="keyword">if</span> (last2 != j &amp;&amp; last2 != last)</span><br><span class="line">                            f[i + <span class="number">1</span>][j][last] = (f[i + <span class="number">1</span>][j][last] + f[i][last][last2]) % MOD;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distinctSequences</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j)</span><br><span class="line">                ans = (ans + f[n][i][j]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2318-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reference: https://leetcode.cn/problems/number-of-distinct-roll-sequences/solution/by-endlesscheng-tgkn/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>, MX = <span class="number">1e4</span>;</span><br><span class="line"><span class="type">int</span> f[MX + <span class="number">1</span>][<span class="number">6</span>];</span><br><span class="line"><span class="type">int</span> init = []() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i)</span><br><span class="line">        f[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= MX; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">            <span class="type">long</span> s = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; ++k)</span><br><span class="line">                <span class="keyword">if</span> (k != j &amp;&amp; <span class="built_in">gcd</span>(k + <span class="number">1</span>, j + <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                    s += f[i - <span class="number">1</span>][k] - f[i - <span class="number">2</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">3</span>) s += f[i - <span class="number">2</span>][j];</span><br><span class="line">            f[i][j] = s % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">distinctSequences</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> ans = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : f[n])</span><br><span class="line">            ans += v;</span><br><span class="line">        <span class="keyword">return</span> (ans % MOD + MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 232. Implement Queue using Stacks</title>
    <url>/LeetCode/leetcode-232-implement-queue-using-stacks/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; inStack, outStack;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">in2out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!inStack.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            outStack.<span class="built_in">push</span>(inStack.<span class="built_in">top</span>());</span><br><span class="line">            inStack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        inStack.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (outStack.<span class="built_in">empty</span>()) <span class="built_in">in2out</span>();</span><br><span class="line">        <span class="type">int</span> x = outStack.<span class="built_in">top</span>();</span><br><span class="line">        outStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (outStack.<span class="built_in">empty</span>()) <span class="built_in">in2out</span>();</span><br><span class="line">        <span class="keyword">return</span> outStack.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inStack.<span class="built_in">empty</span>() &amp;&amp; outStack.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2321. Maximum Score Of Spliced Array</title>
    <url>/LeetCode/leetcode-2321-maximum-score-of-spliced-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumsSplicedArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>(), s1 = <span class="number">0</span>, s2 = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            s1 += nums1[i], s2 += nums2[i];</span><br><span class="line">            d[i + <span class="number">1</span>] = d[i] + nums1[i] - nums2[i]; <span class="comment">// 前缀和数组记录两数组间的差值。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">max</span>(s1, s2), mind = <span class="number">0</span>, maxd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : d) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, s2 + (x - mind));</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, s1 - (x - maxd));</span><br><span class="line">            mind = <span class="built_in">min</span>(mind, x);</span><br><span class="line">            maxd = <span class="built_in">max</span>(maxd, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2322. Minimum Score After Removals on a Tree</title>
    <url>/LeetCode/leetcode-2322-minimum-score-after-removals-on-a-tree/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-2322-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-2322-solution-1">DFS + DFS</a></li><li class="tab"><a href="#leetcode-2322-solution-2">DFS + Timestamp</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-2322-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; w;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        e[idx] = v, ne[idx] = h[u], h[u] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> sumx, <span class="type">int</span> sumy)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = w[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">dfs</span>(v, u, sumx, sumy);</span><br><span class="line">            res ^= t;</span><br><span class="line">            <span class="keyword">if</span> (sumx != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> a[<span class="number">3</span>] = &#123;sumy, t, sumx ^ t&#125;;</span><br><span class="line">                <span class="built_in">sort</span>(a, a + <span class="number">3</span>);</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, a[<span class="number">2</span>] - a[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        w = nums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123; <span class="comment">// 枚举被删除的边。</span></span><br><span class="line">            <span class="built_in">memset</span>(h, <span class="number">-1</span>, n * <span class="number">4</span>);</span><br><span class="line">            idx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123; <span class="comment">// 建图。</span></span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    <span class="type">int</span> u = edges[j][<span class="number">0</span>], v = edges[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> x = edges[i][<span class="number">0</span>], y = edges[i][<span class="number">1</span>]; <span class="comment">// 以被删除的边的两个端点分别作为根节点进行 DFS 计算分数。</span></span><br><span class="line">            <span class="type">int</span> sumx = <span class="built_in">dfs</span>(x, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>), sumy = <span class="built_in">dfs</span>(y, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(x, <span class="number">-1</span>, sumx, sumy); <span class="comment">// 假设分割 x 子树，计算分数。</span></span><br><span class="line">            <span class="built_in">dfs</span>(y, <span class="number">-1</span>, sumy, sumx); <span class="comment">// 假设分割 y 子树，计算分数。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-2322-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reference: https://leetcode.cn/problems/minimum-score-after-removals-on-a-tree/solution/dfs-shi-jian-chuo-chu-li-shu-shang-wen-t-x1kk/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumScore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 建图。</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = e[<span class="number">0</span>], v = e[<span class="number">1</span>];</span><br><span class="line">            g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> xr[n], in[n], out[n], clock = <span class="number">0</span>;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">            in[u] = ++clock;</span><br><span class="line">            xr[u] = nums[u];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : g[u])</span><br><span class="line">                <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(v, u);</span><br><span class="line">                    xr[u] ^= xr[v];</span><br><span class="line">                &#125;</span><br><span class="line">            out[u] = clock;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 以 0 为根遍历并记录节点访问次序。</span></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 根据访问次序判断节点父子关系。</span></span><br><span class="line">        <span class="keyword">auto</span> is_ancestor = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">bool</span> &#123; <span class="keyword">return</span> in[x] &lt; in[y] &amp;&amp; in[y] &lt;= out[x]; &#125;;</span><br><span class="line">        <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="comment">// 枚举删除的两条边所对应的端点（四个点中的两个子点，因此 0 除外）。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, x, y, z; i &lt; n; ++i) <span class="comment">// 枚举被删除的点 i。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123; <span class="comment">// 枚举被删除的另一个点 j。</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">is_ancestor</span>(i, j)) x = xr[j], y = xr[i] ^ x, z = xr[<span class="number">0</span>] ^ xr[i]; <span class="comment">// i 是 j 的父节点。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">is_ancestor</span>(j, i)) x = xr[i], y = xr[j] ^ x, z = xr[<span class="number">0</span>] ^ xr[j]; <span class="comment">// j 是 i 的父节点。</span></span><br><span class="line">                <span class="keyword">else</span> x = xr[i], y = xr[j], z = xr[<span class="number">0</span>] ^ x ^ y; <span class="comment">// 删除的两条边分属于两个子树。</span></span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">max</span>(&#123;x, y, z&#125;) - <span class="built_in">min</span>(&#123;x, y, z&#125;));</span><br><span class="line">                <span class="keyword">if</span> (ans == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 剪枝。</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Tree</tag>
        <tag>Bit Manipulation</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 239. Sliding Window Maximum</title>
    <url>/LeetCode/leetcode-239-sliding-window-maximum/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-239-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-239-solution-1">Priority Queue</a></li><li class="tab"><a href="#leetcode-239-solution-2">Monotonic Queue</a></li><li class="tab"><a href="#leetcode-239-solution-3">Segment & Pre-processing</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-239-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">            q.<span class="built_in">emplace</span>(nums[i], i);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans = &#123;q.<span class="built_in">top</span>().first&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            q.<span class="built_in">emplace</span>(nums[i], i);</span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">top</span>().second &lt;= i - k)</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>().first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-239-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt;= nums[q.<span class="built_in">back</span>()])</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            q.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans&#123;nums[q.<span class="built_in">front</span>()]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt;= nums[q.<span class="built_in">back</span>()])</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            q.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">front</span>() &lt;= i - k)</span><br><span class="line">                q.<span class="built_in">pop_front</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(nums[q.<span class="built_in">front</span>()]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-239-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefixMax</span><span class="params">(n)</span>, <span class="title">suffixMax</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i % k == <span class="number">0</span>) prefixMax[i] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> prefixMax[i] = <span class="built_in">max</span>(prefixMax[i - <span class="number">1</span>], nums[i]);</span><br><span class="line">        suffixMax[n - <span class="number">1</span>] = nums[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % k == <span class="number">0</span>) suffixMax[i] = nums[i];</span><br><span class="line">            <span class="keyword">else</span> suffixMax[i] = <span class="built_in">max</span>(suffixMax[i + <span class="number">1</span>], nums[i]);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - k; ++i)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="built_in">max</span>(suffixMax[i], prefixMax[i + k - <span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2488. Count Subarrays With Median K</title>
    <url>/LeetCode/leetcode-2488-count-subarrays-with-median-k/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">find</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), k) - nums.<span class="built_in">begin</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p, bal = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            bal += nums[i] == k ? <span class="number">0</span> : nums[i] &lt; k ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">            ++cnt[bal];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p, bal = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            bal += nums[i] == k ? <span class="number">0</span> : nums[i] &lt; k ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">            ans += cnt[bal] + cnt[bal + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Prefix Sum</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2569. Handling Sum Queries After Update</title>
    <url>/LeetCode/leetcode-2569-handling-sum-queries-after-update/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l, r, cnt1;</span><br><span class="line">        <span class="type">bool</span> flip;</span><br><span class="line">    &#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        tr[u].cnt1 = tr[u &lt;&lt; <span class="number">1</span>].cnt1 + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cnt1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        tr[u] = &#123;l, r, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tr[u].cnt1 = nums[l - <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(nums, u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(nums, u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pushup</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        tr[u].cnt1 = tr[u].r - tr[u].l + <span class="number">1</span> - tr[u].cnt1;</span><br><span class="line">        tr[u].flip = !tr[u].flip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= R) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(u);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (tr[u].flip) &#123;</span><br><span class="line">                <span class="built_in">reverse</span>(u &lt;&lt; <span class="number">1</span>), <span class="built_in">reverse</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">                tr[u].flip = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (L &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, L, R);</span><br><span class="line">            <span class="keyword">if</span> (mid &lt; R)  <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, L, R);</span><br><span class="line">            <span class="built_in">pushup</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">handleQuery</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">build</span>(nums1, <span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; ans;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="built_in">accumulate</span>(nums2.<span class="built_in">begin</span>(), nums2.<span class="built_in">end</span>(), <span class="number">0ll</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;q : queries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[<span class="number">0</span>] == <span class="number">1</span>) <span class="built_in">update</span>(<span class="number">1</span>, q[<span class="number">1</span>] + <span class="number">1</span>, q[<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (q[<span class="number">0</span>] == <span class="number">2</span>) sum += <span class="number">1ll</span> * q[<span class="number">1</span>] * tr[<span class="number">1</span>].cnt1;</span><br><span class="line">            <span class="keyword">else</span> ans.<span class="built_in">push_back</span>(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 2581. Count Number of Possible Root Nodes</title>
    <url>/LeetCode/leetcode-2581-count-number-of-possible-root-nodes/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootCount</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; guesses, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(edges.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            g[e[<span class="number">0</span>]].<span class="built_in">push_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">            g[e[<span class="number">1</span>]].<span class="built_in">push_back</span>(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_set&lt;<span class="type">long</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;gs : guesses) s.<span class="built_in">insert</span>((<span class="type">long</span>) gs[<span class="number">0</span>] &lt;&lt; <span class="number">32</span> | gs[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, cnt0 = <span class="number">0</span>;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x, <span class="type">int</span> f) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y != f) &#123;</span><br><span class="line">                    cnt0 += s.<span class="built_in">count</span>((<span class="type">long</span>) x &lt;&lt; <span class="number">32</span> | y);</span><br><span class="line">                    <span class="built_in">dfs</span>(y, x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; reroot = [&amp;](<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> cnt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= k) ++ans;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (y != f) &#123;</span><br><span class="line">                    <span class="built_in">reroot</span>(y, x, cnt </span><br><span class="line">                                - s.<span class="built_in">count</span>((<span class="type">long</span>) x &lt;&lt; <span class="number">32</span> | y)</span><br><span class="line">                                + s.<span class="built_in">count</span>((<span class="type">long</span>) y &lt;&lt; <span class="number">32</span> | x));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">reroot</span>(<span class="number">0</span>, <span class="number">-1</span>, cnt0);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>换根 DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 26. Remove Duplicates from Sorted Array</title>
    <url>/LeetCode/leetcode-26-remove-duplicates-from-sorted-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[j])</span><br><span class="line">                nums[++i] = nums[j];</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 263. Ugly Number</title>
    <url>/LeetCode/leetcode-263-ugly-number/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isUgly</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> factors[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> factor : factors)</span><br><span class="line">            <span class="keyword">while</span> (n % factor == <span class="number">0</span>)</span><br><span class="line">                n /= factor;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 264. Ugly Number II</title>
    <url>/LeetCode/leetcode-264-ugly-number-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-264-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-264-solution-1">Heap</a></li><li class="tab"><a href="#leetcode-264-solution-2">DP</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-264-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; factors = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        unordered_set&lt;<span class="type">long</span>&gt; seen;</span><br><span class="line">        priority_queue&lt;<span class="type">long</span>, vector&lt;<span class="type">long</span>&gt;, greater&lt;<span class="type">long</span>&gt;&gt; heap;</span><br><span class="line">        seen.<span class="built_in">insert</span>(<span class="number">1L</span>);</span><br><span class="line">        heap.<span class="built_in">push</span>(<span class="number">1L</span>);</span><br><span class="line">        <span class="type">int</span> ugly = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">long</span> curr = heap.<span class="built_in">top</span>();</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">            ugly = (<span class="type">int</span>) curr;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> factor : factors) &#123;</span><br><span class="line">                <span class="type">long</span> next = curr * factor;</span><br><span class="line">                <span class="keyword">if</span> (!seen.<span class="built_in">count</span>(next)) &#123;</span><br><span class="line">                    seen.<span class="built_in">insert</span>(next);</span><br><span class="line">                    heap.<span class="built_in">push</span>(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ugly;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-264-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> p2 = <span class="number">1</span>, p3 = <span class="number">1</span>, p5 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num2 = dp[p2] * <span class="number">2</span>, num3 = dp[p3] * <span class="number">3</span>, num5 = dp[p5] * <span class="number">5</span>;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(<span class="built_in">min</span>(num2, num3), num5);</span><br><span class="line">            <span class="keyword">if</span> (dp[i] == num2) p2++;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] == num3) p3++;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] == num5) p5++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 268. Missing Number</title>
    <url>/LeetCode/leetcode-268-missing-number/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-268-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-268-solution-1">Bit Manipulation</a></li><li class="tab"><a href="#leetcode-268-solution-2">Math</a></li><li class="tab active"><a href="#leetcode-268-solution-3">Swaption</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-268-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = nums.<span class="built_in">size</span>(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> num : nums)</span><br><span class="line">            ans ^= i++ ^ num;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-268-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> expectedSum = nums.<span class="built_in">size</span>() * (nums.<span class="built_in">size</span>() + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> actualSum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> expectedSum - actualSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-268-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// reference: https://leetcode.com/problems/couples-holding-hands/discuss/113362/JavaC%2B%2B-O(N)-solution-using-cyclic-swapping</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = nums[i]; i != j &amp;&amp; j != n; j = nums[i])</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 27. Remove Element</title>
    <url>/LeetCode/leetcode-27-remove-element/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num != val)</span><br><span class="line">                nums[i++] = num;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 278. First Bad Version</title>
    <url>/LeetCode/leetcode-278-first-bad-version/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;  </span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isBadVersion</span>(mid)) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 275. H-Index II</title>
    <url>/LeetCode/leetcode-275-h-index-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-275-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-275-solution-1">Linear Search</a></li><li class="tab"><a href="#leetcode-275-solution-2">Binary Search</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-275-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = citations.<span class="built_in">size</span>() - <span class="number">1</span>, h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; citations[i] &gt; h) ++h, --i;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-275-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = citations.<span class="built_in">size</span>(), l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> h) &#123;</span><br><span class="line">            <span class="type">int</span> idx = <span class="built_in">lower_bound</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>(), h) - citations.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">return</span> n - idx &gt;= h;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 274. H-Index</title>
    <url>/LeetCode/leetcode-274-h-index/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-274-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-274-solution-1">Sort</a></li><li class="tab"><a href="#leetcode-274-solution-2">Counting Sort</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-274-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> i = citations.<span class="built_in">size</span>() - <span class="number">1</span>, h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; citations[i] &gt; h) ++h, --i;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-274-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = citations.<span class="built_in">size</span>(), c = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : citations)</span><br><span class="line">            ++cnt[<span class="built_in">min</span>(x, n)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> ((c += cnt[i]) &gt;= i)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Array</tag>
        <tag>Counting Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 279. Perfect Squares</title>
    <url>/LeetCode/leetcode-279-perfect-squares/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-279-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-279-solution-1">BFS</a></li><li class="tab"><a href="#leetcode-279-solution-2">DP (timeout)</a></li><li class="tab active"><a href="#leetcode-279-solution-3">DP</a></li><li class="tab"><a href="#leetcode-279-solution-4">Math</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-279-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x * x &lt;= n; ++x)</span><br><span class="line">            v.<span class="built_in">emplace_back</span>(x * x);</span><br><span class="line">        <span class="keyword">if</span> (v.<span class="built_in">back</span>() == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(x);</span><br><span class="line">            visited[x] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> steps = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ++steps;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">                <span class="type">int</span> x = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> y : v) &#123;</span><br><span class="line">                    <span class="type">int</span> next = x + y;</span><br><span class="line">                    <span class="keyword">if</span> (next == n) &#123;</span><br><span class="line">                        <span class="keyword">return</span> steps;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next &lt; n &amp;&amp; !visited[next]) &#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(next);</span><br><span class="line">                        visited[next] = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next &gt; n) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-279-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (t * t &lt;= n) &#123;</span><br><span class="line">            v.<span class="built_in">emplace_back</span>(t * t);</span><br><span class="line">            ++t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = v.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, n));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = v[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k * x &lt;= j; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (f[i - <span class="number">1</span>][j - k * x] != n) &#123;</span><br><span class="line">                        f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - k * x] + k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-279-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, n)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t * t &lt;= n; ++t) &#123;</span><br><span class="line">            <span class="type">int</span> x = t * t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = x; j &lt;= n; ++j)</span><br><span class="line">                f[j] = <span class="built_in">min</span>(f[j], f[j - x] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-279-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">sqrt</span>(n);</span><br><span class="line">        <span class="keyword">return</span> x * x == n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkAnswer4</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            n /= <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">8</span> == <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPerfectSquare</span>(n)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">checkAnswer4</span>(n)) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isPerfectSquare</span>(n - i * i))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// Lagrange&#x27;s Four-Square Theorem</span></span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Breadth-first Search</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 290. Word Pattern</title>
    <url>/LeetCode/leetcode-290-word-pattern/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-290-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-290-solution-1">Java</a></li><li class="tab"><a href="#leetcode-290-solution-2">Cpp</a></li><li class="tab"><a href="#leetcode-290-solution-3">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-290-solution-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPattern</span><span class="params">(String pattern, String str)</span> &#123;</span><br><span class="line">        Map&lt;String, Character&gt; str2ch = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character, String&gt; ch2str = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : pattern.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; str.charAt(j) != <span class="string">&#x27; &#x27;</span>) j++;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> str.substring(i, j);</span><br><span class="line">            <span class="keyword">if</span> (str2ch.containsKey(tmp) &amp;&amp; str2ch.get(tmp) != ch) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (ch2str.containsKey(ch) &amp;&amp; !tmp.equals(ch2str.get(ch))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            str2ch.put(tmp, ch);</span><br><span class="line">            ch2str.put(ch, tmp);</span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i &gt;= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-290-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordPattern</span><span class="params">(string pattern, string str)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; p2i;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; w2i;</span><br><span class="line">        <span class="function">istringstream <span class="title">in</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, n = pattern.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (string word; in &gt;&gt; word; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == n || p2i[pattern[i]] != w2i[word])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p2i[pattern[i]] = w2i[word] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-290-solution-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordPattern</span>(<span class="params">self, pattern: <span class="built_in">str</span>, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        word2ch = <span class="built_in">dict</span>()</span><br><span class="line">        ch2word = <span class="built_in">dict</span>()</span><br><span class="line">        words = s.split()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(pattern) != <span class="built_in">len</span>(words): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> ch, word <span class="keyword">in</span> <span class="built_in">zip</span>(pattern, words):</span><br><span class="line">            <span class="keyword">if</span> (word <span class="keyword">in</span> word2ch <span class="keyword">and</span> word2ch[word] != ch) <span class="keyword">or</span> (ch <span class="keyword">in</span> ch2word <span class="keyword">and</span> ch2word[ch] != word):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            word2ch[word] = ch</span><br><span class="line">            ch2word[ch] = word</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 295. Find Median from Data Stream</title>
    <url>/LeetCode/leetcode-295-find-median-from-data-stream/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-295-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-295-solution-1">Insertion Sort</a></li><li class="tab"><a href="#leetcode-295-solution-2">Two Heaps</a></li><li class="tab"><a href="#leetcode-295-solution-3">Multiset</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-295-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">empty</span>())</span><br><span class="line">            data.<span class="built_in">emplace_back</span>(num);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            data.<span class="built_in">insert</span>(<span class="built_in">lower_bound</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), num), num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = data.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> n &amp; <span class="number">1</span> ? data[n / <span class="number">2</span>] : (data[n / <span class="number">2</span> - <span class="number">1</span>] + data[n / <span class="number">2</span>]) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-295-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; lo; <span class="comment">// max heap</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; hi; <span class="comment">// min heap</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        lo.<span class="built_in">push</span>(num);</span><br><span class="line">        hi.<span class="built_in">push</span>(lo.<span class="built_in">top</span>());</span><br><span class="line">        lo.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (lo.<span class="built_in">size</span>() &lt; hi.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            lo.<span class="built_in">push</span>(hi.<span class="built_in">top</span>());</span><br><span class="line">            hi.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lo.<span class="built_in">size</span>() &gt; hi.<span class="built_in">size</span>() ? (<span class="type">double</span>) lo.<span class="built_in">top</span>() : (lo.<span class="built_in">top</span>() + hi.<span class="built_in">top</span>()) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-295-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt; data;</span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt;::iterator lo, hi;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MedianFinder</span>(): <span class="built_in">lo</span>(data.<span class="built_in">end</span>()), <span class="built_in">hi</span>(data.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = data.<span class="built_in">size</span>();</span><br><span class="line">        data.<span class="built_in">insert</span>(num);</span><br><span class="line">        <span class="keyword">if</span> (!n) &#123; <span class="comment">// the 1st element.</span></span><br><span class="line">            lo = hi = data.<span class="built_in">begin</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123; <span class="comment">// odd size before.</span></span><br><span class="line">            <span class="keyword">if</span> (num &lt; *lo) --lo;</span><br><span class="line">            <span class="keyword">else</span> ++hi;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// even size before.</span></span><br><span class="line">            <span class="keyword">if</span> (num &gt; *lo &amp;&amp; num &lt; *hi) &#123;</span><br><span class="line">                ++lo;</span><br><span class="line">                --hi;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt;= *hi) ++lo;</span><br><span class="line">            <span class="keyword">else</span> lo = --hi;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*lo + *hi) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 297. Serialize and Deserialize Binary Tree</title>
    <url>/LeetCode/leetcode-297-serialize-and-deserialize-binary-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="built_in">dfs</span>(root, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, string&amp; curr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)  &#123;</span><br><span class="line">            curr += <span class="string">&quot;null,&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr += <span class="built_in">to_string</span>(root-&gt;val) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left, curr);</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right, curr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        <span class="function">istringstream <span class="title">ss</span><span class="params">(data)</span></span>;</span><br><span class="line">        string s;</span><br><span class="line">        function&lt;TreeNode*(<span class="type">void</span>)&gt; dfs = [&amp;]() &#123;</span><br><span class="line">            TreeNode* ans;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">getline</span>(ss, s, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">                ans = <span class="built_in">parse</span>(s);</span><br><span class="line">                <span class="keyword">if</span> (ans) &#123;</span><br><span class="line">                    ans-&gt;left = <span class="built_in">dfs</span>();</span><br><span class="line">                    ans-&gt;right = <span class="built_in">dfs</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">parse</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">&quot;null&quot;</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Breadth-first Search</tag>
        <tag>Tree</tag>
        <tag>String</tag>
        <tag>Depth-first Search</tag>
        <tag>Design</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 300. Longest Increasing Subsequence</title>
    <url>/LeetCode/leetcode-300-longest-increasing-subsequence/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dp&#123;nums[<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (num &gt; dp.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                dp.<span class="built_in">emplace_back</span>(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), num);</span><br><span class="line">                *it = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 303. Range Sum Query - Immutable</title>
    <url>/LeetCode/leetcode-303-range-sum-query-immutable/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sums;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            sums.<span class="built_in">emplace_back</span>(sum += num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">0</span> ? sums[j] : sums[j] - sums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 316. Remove Duplicate Letters</title>
    <url>/LeetCode/leetcode-316-remove-duplicate-letters/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-316-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-316-solution-1">Java</a></li><li class="tab"><a href="#leetcode-316-solution-2">Cpp</a></li><li class="tab"><a href="#leetcode-316-solution-3">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-316-solution-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicateLetters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] seen = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span>[] num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : cs)</span><br><span class="line">            num[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : cs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!seen[c - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (ans.length() &gt; <span class="number">0</span> &amp;&amp; ans.charAt(ans.length() - <span class="number">1</span>) &gt; c &amp;&amp; num[ans.charAt(ans.length() - <span class="number">1</span>) - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    seen[ans.charAt(ans.length() - <span class="number">1</span>) - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">                    ans.deleteCharAt(ans.length() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                seen[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">                ans.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            num[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-316-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicateLetters</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s)</span><br><span class="line">            ++num[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        string stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!seen[c - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">back</span>() &gt; c &amp;&amp; num[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    seen[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">                    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                seen[c - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">                stk.<span class="built_in">push_back</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">            --num[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-316-solution-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicateLetters</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        stack = []</span><br><span class="line">        remain_counter = collections.Counter(s)</span><br><span class="line">        seen = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &gt; c <span class="keyword">and</span> remain_counter[stack[-<span class="number">1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    seen.discard(stack.pop())</span><br><span class="line">                seen.add(c)</span><br><span class="line">                stack.append(c)</span><br><span class="line">            remain_counter[c] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack)</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Stack</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 304. Range Sum Query 2D - Immutable</title>
    <url>/LeetCode/leetcode-304-range-sum-query-2d-immutable/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">int</span> R = matrix.<span class="built_in">size</span>(); <span class="keyword">if</span> (R == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> C = matrix[<span class="number">0</span>].<span class="built_in">size</span>(); <span class="keyword">if</span> (C == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        dp = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(R + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(C + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; R; r++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; C; c++)</span><br><span class="line">                dp[r + <span class="number">1</span>][c + <span class="number">1</span>] = dp[r + <span class="number">1</span>][c] + dp[r][c + <span class="number">1</span>] + matrix[r][c] - dp[r][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dp[row2 + <span class="number">1</span>][col2 + <span class="number">1</span>] - dp[row1][col2 + <span class="number">1</span>] - dp[row2 + <span class="number">1</span>][col1] + dp[row1][col1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 307. Range Sum Query - Mutable</title>
    <url>/LeetCode/leetcode-307-range-sum-query-mutable/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-307-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-307-solution-1">Segment Tree</a></li><li class="tab"><a href="#leetcode-307-solution-2">Binary Indexed Tree</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-307-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30001</span>;</span><br><span class="line"><span class="type">int</span> tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tree[p] = nums[l - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(p * <span class="number">2</span>, l, m), <span class="built_in">build</span>(p * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">        tree[p] = tree[p * <span class="number">2</span>] + tree[p * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= l &amp;&amp; r &lt;= j) <span class="keyword">return</span> tree[p];</span><br><span class="line">        <span class="type">int</span> m = l + r &gt;&gt; <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= m) s += <span class="built_in">query</span>(p * <span class="number">2</span>, l, m, i, j);</span><br><span class="line">        <span class="keyword">if</span> (j &gt; m) s += <span class="built_in">query</span>(p * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, i, j);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tree[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= m) <span class="built_in">update</span>(p * <span class="number">2</span>, l, m, i, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">update</span>(p * <span class="number">2</span> + <span class="number">1</span>, m + <span class="number">1</span>, r, i, v);</span><br><span class="line">        tree[p] = tree[p * <span class="number">2</span>] + tree[p * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;nums = nums;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">memset</span>(tree, <span class="number">0</span>, (n + <span class="number">1</span>) * <span class="number">8</span>);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, index + <span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, left + <span class="number">1</span>, right + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-307-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30001</span>;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">// add(i + 1, nums[i]);</span></span><br><span class="line">            c[i + <span class="number">1</span>] += nums[i];</span><br><span class="line">            <span class="type">int</span> j = i + <span class="built_in">lowbit</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= n)</span><br><span class="line">                c[j] += c[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">            c[i] += k;</span><br><span class="line">            i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s += c[i];</span><br><span class="line">            i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;nums = nums;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(index + <span class="number">1</span>, val - nums[index]);</span><br><span class="line">        nums[index] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(right + <span class="number">1</span>) - <span class="built_in">query</span>(left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Binary Indexed Tree</tag>
        <tag>Array</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 330. Patching Array</title>
    <url>/LeetCode/leetcode-330-patching-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPatches</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> patches = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>(), index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; length &amp;&amp; nums[index] &lt;= x) &#123;</span><br><span class="line">                x += nums[index];</span><br><span class="line">                index++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                patches++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> patches;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 331. Verify Preorder Serialization of a Binary Tree</title>
    <url>/LeetCode/leetcode-331-verify-preorder-serialization-of-a-binary-tree/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-331-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-331-solution-1">Stack</a></li><li class="tab"><a href="#leetcode-331-solution-2">Counting</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-331-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSerialization</span><span class="params">(string preorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = preorder.<span class="built_in">size</span>(), i = <span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (preorder[i] == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preorder[i] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--stk.<span class="built_in">top</span>() == <span class="number">0</span>)</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; n &amp;&amp; preorder[i] != <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                    ++i;</span><br><span class="line">                <span class="keyword">if</span> (--stk.<span class="built_in">top</span>() == <span class="number">0</span>)</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                stk.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-331-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSerialization</span><span class="params">(string preorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = preorder.<span class="built_in">size</span>(), i = <span class="number">0</span>, slots = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (slots == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (preorder[i] == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preorder[i] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                --slots;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; n &amp;&amp; preorder[i] != <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                    ++i;</span><br><span class="line">                ++slots;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slots == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 338. Counting Bits</title>
    <url>/LeetCode/leetcode-338-counting-bits/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-338-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-338-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-338-solution-2">Solution 2</a></li><li class="tab"><a href="#leetcode-338-solution-3">Solution 3</a></li><li class="tab"><a href="#leetcode-338-solution-4">Solution 4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-338-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countOnes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ones = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            n &amp;= (n - <span class="number">1</span>);</span><br><span class="line">            ++ones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ones;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(num + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= num; ++i)</span><br><span class="line">            ans[i] = <span class="built_in">countOnes</span>(i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-338-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(num + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> highBit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; (i - <span class="number">1</span>)) == <span class="number">0</span>)</span><br><span class="line">                highBit = i;</span><br><span class="line">            dp[i] = dp[i - highBit] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-338-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(num + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">            dp[i] = dp[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-338-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countBits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(num + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; ++i)</span><br><span class="line">            dp[i] = dp[i &amp; (i - <span class="number">1</span>)] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>Reference: <a href="https://leetcode.cn/problems/counting-bits/solution/bi-te-wei-ji-shu-by-leetcode-solution-0t1i/">比特位计数 - 比特位计数 - 力扣（LeetCode）</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 352. Data Stream as Disjoint Intervals</title>
    <url>/LeetCode/leetcode-352-data-stream-as-disjoint-intervals/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SummaryRanges</span> &#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SummaryRanges</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = val, right = val;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">lower_bound</span>(val - <span class="number">1</span>); it != m.<span class="built_in">end</span>() &amp;&amp; it-&gt;second &lt;= right + <span class="number">1</span>; m.<span class="built_in">erase</span>(it++)) &#123;</span><br><span class="line">            <span class="type">int</span> l = it-&gt;second, r = it-&gt;first;</span><br><span class="line">            left = <span class="built_in">min</span>(left, l), right = <span class="built_in">max</span>(right, r);</span><br><span class="line">        &#125;</span><br><span class="line">        m[right] = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">getIntervals</span>() &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); ++it)</span><br><span class="line">            v.<span class="built_in">push_back</span>(&#123;it-&gt;second, it-&gt;first&#125;);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your SummaryRanges object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * SummaryRanges* obj = new SummaryRanges();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addNum(val);</span></span><br><span class="line"><span class="comment"> * vector&lt;vector&lt;int&gt;&gt; param_2 = obj-&gt;getIntervals();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Ordered Set</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 341. Flatten Nested List Iterator</title>
    <url>/LeetCode/leetcode-341-flatten-nested-list-iterator/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NestedIterator</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;pair&lt;vector&lt;NestedInteger&gt;::iterator, vector&lt;NestedInteger&gt;::iterator&gt;&gt; stk;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NestedIterator</span>(vector&lt;NestedInteger&gt; &amp;nestedList) &#123;</span><br><span class="line">        stk.<span class="built_in">emplace</span>(nestedList.<span class="built_in">begin</span>(), nestedList.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">top</span>().first++-&gt;<span class="built_in">getInteger</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> &amp;p = stk.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span> (p.first == p.second) &#123;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p.first-&gt;<span class="built_in">isInteger</span>())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">auto</span> &amp;lst = p.first++-&gt;<span class="built_in">getList</span>();</span><br><span class="line">            stk.<span class="built_in">emplace</span>(lst.<span class="built_in">begin</span>(), lst.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 363. Max Sum of Rectangle No Larger Than K</title>
    <url>/LeetCode/leetcode-363-max-sum-of-rectangle-no-larger-than-k/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSumSubmatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123; <span class="comment">// enumerate upper bound.</span></span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(n)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; m; ++j) &#123; <span class="comment">// enumerate lower bound.</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">                    sum[c] += matrix[j][c]; <span class="comment">// area sum of each column.</span></span><br><span class="line">                <span class="comment">// find the largest value that is</span></span><br><span class="line">                <span class="comment">// 1. smaller than k,</span></span><br><span class="line">                <span class="comment">// 2. from a continue subarray of `sum`.</span></span><br><span class="line">                set&lt;<span class="type">int</span>&gt; sumSet&#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> v : sum) &#123;</span><br><span class="line">                    s += v;</span><br><span class="line">                    <span class="keyword">auto</span> it = sumSet.<span class="built_in">lower_bound</span>(s - k);</span><br><span class="line">                    <span class="keyword">if</span> (it != sumSet.<span class="built_in">end</span>())</span><br><span class="line">                        ans = <span class="built_in">max</span>(ans, s - *it);</span><br><span class="line">                    sumSet.<span class="built_in">insert</span>(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 354. Russian Doll Envelopes</title>
    <url>/LeetCode/leetcode-354-russian-doll-envelopes/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxEnvelopes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (envelopes.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(envelopes.<span class="built_in">begin</span>(), envelopes.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>] || (a[<span class="number">0</span>] == b[<span class="number">0</span>] &amp;&amp; a[<span class="number">1</span>] &gt; b[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dp&#123;envelopes[<span class="number">0</span>][<span class="number">1</span>]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; envelopes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> num = envelopes[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (num &gt; dp.<span class="built_in">back</span>()) &#123;</span><br><span class="line">                dp.<span class="built_in">emplace_back</span>(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), num);</span><br><span class="line">                *it = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 374. Guess Number Higher or Lower</title>
    <url>/LeetCode/leetcode-374-guess-number-higher-or-lower/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">guessNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="type">int</span> ans = <span class="built_in">guess</span>(mid);</span><br><span class="line">            <span class="keyword">if</span> (ans == <span class="number">-1</span>) r = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ans == <span class="number">1</span>) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 368. Largest Divisible Subset</title>
    <url>/LeetCode/leetcode-368-largest-divisible-subset/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">largestDivisibleSubset</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">begin</span>(nums), <span class="built_in">end</span>(nums));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> maxVal = dp[<span class="number">0</span>], maxSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                <span class="keyword">if</span> (nums[i] % nums[j] == <span class="number">0</span>)</span><br><span class="line">                    dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; maxSize) &#123;</span><br><span class="line">                maxSize = dp[i];</span><br><span class="line">                maxVal = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxSize == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;nums[<span class="number">0</span>]&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; maxSize &gt; <span class="number">0</span>; --i)</span><br><span class="line">            <span class="keyword">if</span> (dp[i] == maxSize &amp;&amp; maxVal % nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                --maxSize;</span><br><span class="line">                maxVal = nums[i];</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 376. Wiggle Subsequence</title>
    <url>/LeetCode/leetcode-376-wiggle-subsequence/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-376-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-376-solution-1">DP</a></li><li class="tab active"><a href="#leetcode-376-solution-2">DP (Space Optimized)</a></li><li class="tab"><a href="#leetcode-376-solution-3">Greedy</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-376-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> up[n], down[n];</span><br><span class="line">        up[<span class="number">0</span>] = down[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>])</span><br><span class="line">                up[i] = <span class="built_in">max</span>(up[i - <span class="number">1</span>], down[i - <span class="number">1</span>] + <span class="number">1</span>), down[i] = down[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>])</span><br><span class="line">                down[i] = <span class="built_in">max</span>(down[i - <span class="number">1</span>], up[i - <span class="number">1</span>] + <span class="number">1</span>), up[i] = up[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                up[i] = up[i - <span class="number">1</span>], down[i] = down[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(up[n - <span class="number">1</span>], down[n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-376-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), up = <span class="number">1</span>, down = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) up = <span class="built_in">max</span>(up, down + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; nums[i - <span class="number">1</span>]) down = <span class="built_in">max</span>(down, up + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(up, down);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-376-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> preDiff = nums[<span class="number">1</span>] - nums[<span class="number">0</span>],</span><br><span class="line">            ans = preDiff != <span class="number">0</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> diff = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (diff &gt; <span class="number">0</span> &amp;&amp; preDiff &lt;= <span class="number">0</span> ||</span><br><span class="line">                diff &lt; <span class="number">0</span> &amp;&amp; preDiff &gt;= <span class="number">0</span>)</span><br><span class="line">                ++ans, preDiff = diff;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 377. Combination Sum IV</title>
    <url>/LeetCode/leetcode-377-combination-sum-iv/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-377-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-377-solution-1">DP (Top Down)</a></li><li class="tab active"><a href="#leetcode-377-solution-2">DP (Buttom Up)</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-377-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        m[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> target) &#123;</span><br><span class="line">            <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; num : nums)</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= num) &#123;</span><br><span class="line">                    <span class="type">int</span> t = target - num;</span><br><span class="line">                    <span class="keyword">if</span> (m.<span class="built_in">find</span>(t) == m.<span class="built_in">end</span>())</span><br><span class="line">                        m[t] = <span class="built_in">dfs</span>(t);</span><br><span class="line">                    ans += m[t];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-377-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">combinationSum4</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= target; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= num)</span><br><span class="line">                    dp[i] += dp[i - num];</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 387. First Unique Character in a String</title>
    <url>/LeetCode/leetcode-387-first-unique-character-in-a-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstUniqChar</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; frequency;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch: s)</span><br><span class="line">            ++frequency[ch];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">if</span> (frequency[s[i]] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 378. Kth Smallest Element in a Sorted Matrix</title>
    <url>/LeetCode/leetcode-378-kth-smallest-element-in-a-sorted-matrix/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-378-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-378-solution-1">Sorting</a></li><li class="tab"><a href="#leetcode-378-solution-2">Merging Sort</a></li><li class="tab"><a href="#leetcode-378-solution-3">Binary Search</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-378-solution-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> matrix.length, C = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[] sorted = <span class="keyword">new</span> <span class="title class_">int</span>[R * C];</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : row)</span><br><span class="line">                sorted[idx++] = num;</span><br><span class="line">        Arrays.sort(sorted);</span><br><span class="line">        <span class="keyword">return</span> sorted[k - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-378-solution-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; q = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; R; ++i)</span><br><span class="line">            q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;matrix[i][<span class="number">0</span>], i, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span>[] now = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (now[<span class="number">2</span>] != R - <span class="number">1</span>)</span><br><span class="line">                q.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;matrix[now[<span class="number">1</span>]][now[<span class="number">2</span>] + <span class="number">1</span>], now[<span class="number">1</span>], now[<span class="number">2</span>] + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.poll()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-378-solution-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> matrix[<span class="number">0</span>][<span class="number">0</span>], right = matrix[n - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (check(matrix, k, mid, n))</span><br><span class="line">                right = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k, <span class="type">int</span> mid, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>, j = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &lt;= mid) &#123;</span><br><span class="line">                cnt += i + <span class="number">1</span>;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 389. Find the Difference</title>
    <url>/LeetCode/leetcode-389-find-the-difference/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-389-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-389-solution-1">Bit Manipulation</a></li><li class="tab"><a href="#leetcode-389-solution-2">Count</a></li><li class="tab"><a href="#leetcode-389-solution-3">Sum</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-389-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> bits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s)</span><br><span class="line">            bits ^= (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t)</span><br><span class="line">            bits ^= (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> bits + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-389-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s)</span><br><span class="line">            ++m[c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t)</span><br><span class="line">            <span class="keyword">if</span> (--m[c] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-389-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">char</span> <span class="title">findTheDifference</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> as = <span class="number">0</span>, at = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch: s)</span><br><span class="line">            as += (ch - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch: t)</span><br><span class="line">            at += (ch - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> at - as + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 395. Longest Substring with At Least K Repeating Characters</title>
    <url>/LeetCode/leetcode-395-longest-substring-with-at-least-k-repeating-characters/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-395-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-395-solution-1">Sliding Window</a></li><li class="tab"><a href="#leetcode-395-solution-2">Divide and Conquer</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-395-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubstring</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cnt = <span class="number">1</span>; cnt &lt;= <span class="number">26</span>; ++cnt) &#123; <span class="comment">// there could be [1..26] diff letters.</span></span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, uniqueCnt = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> charCnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">                <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (charCnt[s[right++] - <span class="string">&#x27;a&#x27;</span>]++ == <span class="number">0</span>)</span><br><span class="line">                    ++uniqueCnt;</span><br><span class="line">                <span class="keyword">while</span> (uniqueCnt &gt; cnt)</span><br><span class="line">                    <span class="keyword">if</span> (--charCnt[s[left++] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)</span><br><span class="line">                        --uniqueCnt;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (charCnt[j] &gt; <span class="number">0</span> &amp;&amp; charCnt[j] &lt; k) &#123;</span><br><span class="line">                        valid = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span> (valid)</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-395-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSubstring</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;, left = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s)</span><br><span class="line">            ++m[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; n; ++right)</span><br><span class="line">            <span class="keyword">if</span> (m[s[right] - <span class="string">&#x27;a&#x27;</span>] &lt; k) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, <span class="built_in">longestSubstring</span>(s.<span class="built_in">substr</span>(left, right - left), k));</span><br><span class="line">                valid = <span class="literal">false</span>;</span><br><span class="line">                left = right + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> valid ? n : <span class="built_in">max</span>(ans, <span class="built_in">longestSubstring</span>(s.<span class="built_in">substr</span>(left, n - left), k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Divide and Conquer</tag>
        <tag>Sliding Window</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 41. First Missing Positive</title>
    <url>/LeetCode/leetcode-41-first-missing-positive/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-41-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-41-solution-1">In-placed Hash Table</a></li><li class="tab active"><a href="#leetcode-41-solution-2">Swaption</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-41-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= <span class="number">0</span>)</span><br><span class="line">                nums[i] = n + <span class="number">1</span>; <span class="comment">// makes all nums as positive integer.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> num = <span class="built_in">abs</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= n)</span><br><span class="line">                nums[num - <span class="number">1</span>] = -<span class="built_in">abs</span>(nums[num - <span class="number">1</span>]); <span class="comment">// taged as negative integer.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="comment">// have not been taged, indicating the num missed.</span></span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>; <span class="comment">// [1..n] all taged, the ans should be &quot;n + 1&quot;. </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-41-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[i] != nums[nums[i] - <span class="number">1</span>])</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[nums[i] - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>Reference: <a href="https://leetcode.com/problems/couples-holding-hands/discuss/113362/JavaC%2B%2B-O(N)-solution-using-cyclic-swapping">Java&#x2F;C++ O(N) solution using cyclic swapping - LeetCode Discuss</a>.</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 403. Frog Jump</title>
    <url>/LeetCode/leetcode-403-frog-jump/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-403-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-403-solution-1">DFS with Binary Search</a></li><li class="tab"><a href="#leetcode-403-solution-2">DP</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-403-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canCross</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;unordered_map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt;&gt; <span class="built_in">m</span>(n);</span><br><span class="line">        function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i, <span class="type">int</span> lastDist) &#123;</span><br><span class="line">            <span class="comment">// `i` is current position, `lastDist` is the distance that frog jump over to get to `i`.</span></span><br><span class="line">            <span class="keyword">if</span> (i == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (m[i].<span class="built_in">find</span>(lastDist) != m[i].<span class="built_in">end</span>()) <span class="keyword">return</span> m[i][lastDist];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> currDist = lastDist - <span class="number">1</span>; currDist &lt;= lastDist + <span class="number">1</span>; ++currDist) &#123;</span><br><span class="line">                <span class="keyword">if</span> (currDist &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> j = <span class="built_in">lower_bound</span>(stones.<span class="built_in">begin</span>(), stones.<span class="built_in">end</span>(), currDist + stones[i]) - stones.<span class="built_in">begin</span>();</span><br><span class="line">                    <span class="keyword">if</span> (j != n &amp;&amp; stones[j] == stones[i] + currDist &amp;&amp; <span class="built_in">dfs</span>(j, currDist)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> m[i][lastDist] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> m[i][lastDist] = <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-403-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canCross</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (stones[i] - stones[i - <span class="number">1</span>] &gt; i)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// dp[i][k] stands for whether frog can jump to `i` from `j` with distance `k`,</span></span><br><span class="line">        <span class="comment">// so dp[i][k] = dp[j][k − 1] || dp[j][k] || dp[j][k + 1].</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="type">int</span> k = stones[i] - stones[j];</span><br><span class="line">                <span class="keyword">if</span> (k &gt; j + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                dp[i][k] = dp[j][k - <span class="number">1</span>] || dp[j][k] || dp[j][k + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (i == n - <span class="number">1</span> &amp;&amp; dp[i][k])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 399. Evaluate Division</title>
    <url>/LeetCode/leetcode-399-evaluate-division/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-399-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-399-solution-1">BFS</a></li><li class="tab"><a href="#leetcode-399-solution-2">Floyd</a></li><li class="tab"><a href="#leetcode-399-solution-3">Union Find</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-399-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">calcEquation</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;<span class="type">double</span>&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> varCnt = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; variables;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = equations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(equations[i][<span class="number">0</span>]) == variables.<span class="built_in">end</span>())</span><br><span class="line">                variables[equations[i][<span class="number">0</span>]] = varCnt++;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(equations[i][<span class="number">1</span>]) == variables.<span class="built_in">end</span>())</span><br><span class="line">                variables[equations[i][<span class="number">1</span>]] = varCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">double</span>&gt;&gt;&gt; <span class="built_in">edges</span>(varCnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> leftVar = variables[equations[i][<span class="number">0</span>]], rightVar = variables[equations[i][<span class="number">1</span>]];</span><br><span class="line">            edges[leftVar].<span class="built_in">emplace_back</span>(rightVar, values[i]);</span><br><span class="line">            edges[rightVar].<span class="built_in">emplace_back</span>(leftVar, <span class="number">1.0</span> / values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; q : queries) &#123;</span><br><span class="line">            <span class="type">double</span> result = <span class="number">-1.0</span>;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(q[<span class="number">0</span>]) != variables.<span class="built_in">end</span>() &amp; variables.<span class="built_in">find</span>(q[<span class="number">1</span>]) != variables.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> leftIndex = variables[q[<span class="number">0</span>]], rightIndex = variables[q[<span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">if</span> (leftIndex == rightIndex)</span><br><span class="line">                    result = <span class="number">1.0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    queue&lt;<span class="type">int</span>&gt; points;</span><br><span class="line">                    points.<span class="built_in">push</span>(leftIndex);</span><br><span class="line">                    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">ratios</span><span class="params">(varCnt, <span class="number">-1</span>)</span></span>;</span><br><span class="line">                    ratios[leftIndex] = <span class="number">1.0</span>;</span><br><span class="line">                    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(varCnt, <span class="literal">false</span>)</span></span>;</span><br><span class="line">                    <span class="keyword">while</span> (!points.<span class="built_in">empty</span>() &amp;&amp; ratios[rightIndex] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        leftIndex = points.<span class="built_in">front</span>(); points.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> [nextIndex, val] : edges[leftIndex]) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (ratios[nextIndex] == <span class="number">-1</span>) &#123;</span><br><span class="line">                                ratios[nextIndex] = ratios[leftIndex] * val;</span><br><span class="line">                                points.<span class="built_in">push</span>(nextIndex);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    result = ratios[rightIndex];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-399-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">calcEquation</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;<span class="type">double</span>&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> varCnt = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; variables;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = equations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(equations[i][<span class="number">0</span>]) == variables.<span class="built_in">end</span>())</span><br><span class="line">                variables[equations[i][<span class="number">0</span>]] = varCnt++;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(equations[i][<span class="number">1</span>]) == variables.<span class="built_in">end</span>())</span><br><span class="line">                variables[equations[i][<span class="number">1</span>]] = varCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">graph</span>(varCnt, <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(varCnt, <span class="number">-1.0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> leftVar = variables[equations[i][<span class="number">0</span>]], rightVar = variables[equations[i][<span class="number">1</span>]];</span><br><span class="line">            graph[leftVar][rightVar] = values[i];</span><br><span class="line">            graph[rightVar][leftVar] = <span class="number">1.0</span> / values[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; varCnt; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; varCnt; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; varCnt; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (graph[i][k] != <span class="number">-1</span> &amp;&amp; graph[k][j] != <span class="number">-1</span>)</span><br><span class="line">                        graph[i][j] = graph[i][k] * graph[k][j];</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; q : queries) &#123;</span><br><span class="line">            <span class="type">double</span> result = <span class="number">-1.0</span>;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(q[<span class="number">0</span>]) != variables.<span class="built_in">end</span>() &amp;&amp; variables.<span class="built_in">find</span>(q[<span class="number">1</span>]) != variables.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> leftIndex = variables[q[<span class="number">0</span>]], rightIndex = variables[q[<span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">if</span> (graph[leftIndex][rightIndex] != <span class="number">-1</span>)</span><br><span class="line">                    result = graph[leftIndex][rightIndex];</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-399-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">calcEquation</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; equations, vector&lt;<span class="type">double</span>&gt;&amp; values, vector&lt;vector&lt;string&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> varCnt = <span class="number">0</span>;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; variables;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = equations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(equations[i][<span class="number">0</span>]) == variables.<span class="built_in">end</span>())</span><br><span class="line">                variables[equations[i][<span class="number">0</span>]] = varCnt++;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(equations[i][<span class="number">1</span>]) == variables.<span class="built_in">end</span>())</span><br><span class="line">                variables[equations[i][<span class="number">1</span>]] = varCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(varCnt)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">w</span><span class="params">(varCnt, <span class="number">1.0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; varCnt; ++i)</span><br><span class="line">            f[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> leftVar = variables[equations[i][<span class="number">0</span>]], rightVar = variables[equations[i][<span class="number">1</span>]];</span><br><span class="line">            <span class="built_in">merge</span>(f, w, leftVar, rightVar, values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; q : queries) &#123;</span><br><span class="line">            <span class="type">double</span> result = <span class="number">-1.0</span>;</span><br><span class="line">            <span class="keyword">if</span> (variables.<span class="built_in">find</span>(q[<span class="number">0</span>]) != variables.<span class="built_in">end</span>() &amp;&amp; variables.<span class="built_in">find</span>(q[<span class="number">1</span>]) != variables.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> leftIndex = variables[q[<span class="number">0</span>]], rightIndex = variables[q[<span class="number">1</span>]];</span><br><span class="line">                <span class="type">int</span> fl = <span class="built_in">findf</span>(f, w, leftIndex), fr = <span class="built_in">findf</span>(f, w, rightIndex);</span><br><span class="line">                <span class="keyword">if</span> (fl == fr)</span><br><span class="line">                    result = w[leftIndex] / w[rightIndex];</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findf</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; f, vector&lt;<span class="type">double</span>&gt;&amp; w, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != f[x]) &#123;</span><br><span class="line">            <span class="type">int</span> father = <span class="built_in">findf</span>(f, w, f[x]);</span><br><span class="line">            w[x] = w[x] * w[f[x]];</span><br><span class="line">            f[x] = father;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; f, vector&lt;<span class="type">double</span>&gt;&amp; w, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">double</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">findf</span>(f, w, x);</span><br><span class="line">        <span class="type">int</span> fy = <span class="built_in">findf</span>(f, w, y);</span><br><span class="line">        f[fx] = fy;</span><br><span class="line">        w[fx] = val * w[y] / w[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 42. Trapping Rain Water</title>
    <url>/LeetCode/leetcode-42-trapping-rain-water/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-42-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-42-solution-1">DP</a></li><li class="tab active"><a href="#leetcode-42-solution-2">Monotonic Stack</a></li><li class="tab"><a href="#leetcode-42-solution-3">Two Pointers</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-42-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftMax</span><span class="params">(n)</span></span>;</span><br><span class="line">        leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            leftMax[i] = <span class="built_in">max</span>(leftMax[i - <span class="number">1</span>], height[i]);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightMax</span><span class="params">(n)</span></span>;</span><br><span class="line">        rightMax[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            rightMax[i] = <span class="built_in">max</span>(rightMax[i + <span class="number">1</span>], height[i]);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            ans += <span class="built_in">min</span>(leftMax[i], rightMax[i]) - height[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-42-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; height[i] &gt; height[stk.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="type">int</span> top = stk.<span class="built_in">top</span>(); stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> left = stk.<span class="built_in">top</span>();</span><br><span class="line">                <span class="type">int</span> currWidth = i - left - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> currHeight = <span class="built_in">min</span>(height[i], height[left]) - height[top];</span><br><span class="line">                ans += currWidth * currHeight;</span><br><span class="line">            &#125;</span><br><span class="line">            stk.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-42-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =  height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>, leftMax = <span class="number">0</span>, rightMax = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[left] &lt; leftMax)</span><br><span class="line">                    ans += leftMax - height[left];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    leftMax = height[left];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (height[right] &lt; rightMax)</span><br><span class="line">                    ans += rightMax - height[right];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rightMax = height[right];</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 424. Longest Repeating Character Replacement</title>
    <url>/LeetCode/leetcode-424-longest-repeating-character-replacement/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">characterReplacement</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, maxCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            maxCnt = <span class="built_in">max</span>(maxCnt, ++freq[s[right++] - <span class="string">&#x27;A&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (right - left &gt; maxCnt + k) &#123;</span><br><span class="line">                --freq[s[left++] - <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right - left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 421. Maximum XOR of Two Numbers in an Array</title>
    <url>/LeetCode/leetcode-421-maximum-xor-of-two-numbers-in-an-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaximumXOR</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt; seen;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums)</span><br><span class="line">                seen.<span class="built_in">insert</span>(num &gt;&gt; i);</span><br><span class="line">            <span class="type">int</span> next = (ans &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums)</span><br><span class="line">                <span class="keyword">if</span> (seen.<span class="built_in">find</span>(next ^ (num &gt;&gt; i)) != seen.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            ans = found ? next : next - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Bit Manipulation</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 435. Non-overlapping Intervals</title>
    <url>/LeetCode/leetcode-435-non-overlapping-intervals/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-435-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-435-solution-1">Cpp</a></li><li class="tab"><a href="#leetcode-435-solution-2">Java</a></li><li class="tab"><a href="#leetcode-435-solution-3">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-435-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = intervals.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> remains = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= right) &#123;</span><br><span class="line">                ++remains;</span><br><span class="line">                right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> n - remains;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-435-solution-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">remains</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= right) &#123;</span><br><span class="line">                ++remains;</span><br><span class="line">                right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> n - remains;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-435-solution-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eraseOverlapIntervals</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> intervals: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        intervals.sort(key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">        n = <span class="built_in">len</span>(intervals)</span><br><span class="line">        right = intervals[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        remains = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> intervals[i][<span class="number">0</span>] &gt;= right:</span><br><span class="line">                remains += <span class="number">1</span></span><br><span class="line">                right = intervals[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> n - remains</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 448. Find All Numbers Disappeared in an Array</title>
    <url>/LeetCode/leetcode-448-find-all-numbers-disappeared-in-an-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> idx = (num - <span class="number">1</span>) % n;</span><br><span class="line">            nums[idx] += n;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= n)</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 455. Assign Cookies</title>
    <url>/LeetCode/leetcode-455-assign-cookies/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; g.<span class="built_in">size</span>() &amp;&amp; j &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] &gt;= g[i]) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 451. Sort Characters By Frequency</title>
    <url>/LeetCode/leetcode-451-sort-characters-by-frequency/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-451-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-451-solution-1">Counting Freqency</a></li><li class="tab"><a href="#leetcode-451-solution-2">Bucket Sort</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-451-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">frequencySort</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s) ++m[c];</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : m) v.<span class="built_in">emplace_back</span>(it);</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="type">const</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &amp;a, <span class="type">const</span> pair&lt;<span class="type">char</span>, <span class="type">int</span>&gt; &amp;b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">        &#125;);</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[c, n] : v)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(c);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-451-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">frequencySort</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> maxFreq = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s) maxFreq = <span class="built_in">max</span>(maxFreq, ++m[c]);</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">buckets</span><span class="params">(maxFreq + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[c, n] : m) buckets[n].<span class="built_in">push_back</span>(c);</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = maxFreq; i; --i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : buckets[i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; ++k)</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(c);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Heap</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
        <tag>Counting</tag>
        <tag>Bucket Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 456. 132 Pattern</title>
    <url>/LeetCode/leetcode-456-132-pattern/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find132pattern</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; candidate_k;</span><br><span class="line">        candidate_k.<span class="built_in">push</span>(nums[n - <span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> max_k = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; max_k) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!candidate_k.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; candidate_k.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                max_k = candidate_k.<span class="built_in">top</span>();</span><br><span class="line">                candidate_k.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max_k) &#123;</span><br><span class="line">                candidate_k.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 467. Unique Substrings in Wraparound String</title>
    <url>/LeetCode/leetcode-467-unique-substrings-in-wraparound-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findSubstringInWraproundString</span><span class="params">(string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            cnt = i &amp;&amp; (p[i] - p[i - <span class="number">1</span>] + <span class="number">26</span>) % <span class="number">26</span> == <span class="number">1</span> ? cnt + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            f[p[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="built_in">max</span>(f[p[i] - <span class="string">&#x27;a&#x27;</span>], cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(f, f + <span class="number">26</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 480. Sliding Window Median</title>
    <url>/LeetCode/leetcode-480-sliding-window-median/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">medianSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; medians;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash_table; <span class="comment">// deleted element -&gt; frequency.</span></span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; lo;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; hi;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k)</span><br><span class="line">            lo.<span class="built_in">push</span>(nums[i++]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            hi.<span class="built_in">push</span>(lo.<span class="built_in">top</span>());</span><br><span class="line">            lo.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            medians.<span class="built_in">push_back</span>(k &amp; <span class="number">1</span> ? lo.<span class="built_in">top</span>() : ((<span class="type">double</span>) lo.<span class="built_in">top</span>() + (<span class="type">double</span>) hi.<span class="built_in">top</span>()) * <span class="number">0.5</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= nums.<span class="built_in">size</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> out_num = nums[i - k],</span><br><span class="line">                in_num = nums[i++],</span><br><span class="line">                balance = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            balance += (out_num &lt;= lo.<span class="built_in">top</span>() ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">            hash_table[out_num]++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!lo.<span class="built_in">empty</span>() &amp;&amp; in_num &lt;= lo.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                balance++;</span><br><span class="line">                lo.<span class="built_in">push</span>(in_num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                balance--;</span><br><span class="line">                hi.<span class="built_in">push</span>(in_num);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (balance &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                lo.<span class="built_in">push</span>(hi.<span class="built_in">top</span>());</span><br><span class="line">                hi.<span class="built_in">pop</span>();</span><br><span class="line">                balance++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                hi.<span class="built_in">push</span>(lo.<span class="built_in">top</span>());</span><br><span class="line">                lo.<span class="built_in">pop</span>();</span><br><span class="line">                balance--;a</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (hash_table[lo.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                hash_table[lo.<span class="built_in">top</span>()]--;</span><br><span class="line">                lo.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!hi.<span class="built_in">empty</span>() &amp;&amp; hash_table[hi.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                hash_table[hi.<span class="built_in">top</span>()]--;</span><br><span class="line">                hi.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> medians;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 485. Max Consecutive Ones</title>
    <url>/LeetCode/leetcode-485-max-consecutive-ones/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 49. Group Anagrams</title>
    <url>/LeetCode/leetcode-49-group-anagrams/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-49-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-49-solution-1">Sorting</a></li><li class="tab"><a href="#leetcode-49-solution-2">Counting Sort</a></li><li class="tab"><a href="#leetcode-49-solution-3">Counting</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-49-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (string &amp;s : strs) &#123;</span><br><span class="line">            string key = s;</span><br><span class="line">            <span class="built_in">sort</span>(key.<span class="built_in">begin</span>(), key.<span class="built_in">end</span>());</span><br><span class="line">            m[key].<span class="built_in">emplace_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">ans</span>(m.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [_, s] : m)</span><br><span class="line">            ans[i++] = <span class="built_in">move</span>(s);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-49-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (string &amp;s : strs) &#123;</span><br><span class="line">            m[<span class="built_in">strSort</span>(s)].<span class="built_in">emplace_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">ans</span>(m.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [_, s] : m)</span><br><span class="line">            ans[i++] = <span class="built_in">move</span>(s);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">strSort</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s)</span><br><span class="line">            ++cnt[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            ans += <span class="built_in">string</span>(cnt[i], i + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-49-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (string &amp;s : strs) &#123;</span><br><span class="line">            m[<span class="built_in">strCnt</span>(s)].<span class="built_in">emplace_back</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; <span class="built_in">ans</span>(m.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [_, s] : m)</span><br><span class="line">            ans[i++] = <span class="built_in">move</span>(s);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">strCnt</span><span class="params">(string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s)</span><br><span class="line">            ++cnt[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            ans += (i + <span class="string">&#x27;a&#x27;</span>) + cnt[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 503. Next Greater Element II</title>
    <url>/LeetCode/leetcode-503-next-greater-element-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> idx = i % n;</span><br><span class="line">            <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; nums[stk.<span class="built_in">top</span>()] &lt; nums[idx]) &#123;</span><br><span class="line">                ans[stk.<span class="built_in">top</span>()] = nums[idx];</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            stk.<span class="built_in">push</span>(idx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 487. Max Consecutive Ones II</title>
    <url>/LeetCode/leetcode-487-max-consecutive-ones-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-487-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-487-solution-1">Partition Counting</a></li><li class="tab"><a href="#leetcode-487-solution-2">Sliding Window</a></li><li class="tab"><a href="#leetcode-487-solution-3">Position Saving</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-487-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">0</span>, cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                cur = cnt;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            ans = <span class="built_in">max</span>(ans, cur + cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-487-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right++] == <span class="number">0</span>)</span><br><span class="line">                ++cnt;</span><br><span class="line">            <span class="keyword">while</span> (cnt &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (nums[left++] == <span class="number">0</span>)</span><br><span class="line">                    --cnt;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-487-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// solution for follow up (nums as streaming data).</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), left = <span class="number">0</span>, right = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right++] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(right);</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                left = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 494. Target Sum</title>
    <url>/LeetCode/leetcode-494-target-sum/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-494-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-494-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-494-solution-2">DFS (memorized searching)</a></li><li class="tab"><a href="#leetcode-494-solution-3">DP</a></li><li class="tab"><a href="#leetcode-494-solution-4">DP (optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-494-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums, target, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == nums.<span class="built_in">size</span>()) <span class="keyword">return</span> target == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums, target + nums[pos], pos + <span class="number">1</span>)</span><br><span class="line">            + <span class="built_in">dfs</span>(nums, target - nums[pos], pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-494-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums, target, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        string key = <span class="built_in">to_string</span>(target) + <span class="string">&quot;_&quot;</span> + <span class="built_in">to_string</span>(pos);</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">count</span>(key)) <span class="keyword">return</span> m[key];</span><br><span class="line">        <span class="keyword">if</span> (pos == nums.<span class="built_in">size</span>()) <span class="keyword">return</span> m[key] = target == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> m[key] = <span class="built_in">dfs</span>(nums, target + nums[pos], pos + <span class="number">1</span>)</span><br><span class="line">            + <span class="built_in">dfs</span>(nums, target - nums[pos], pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-494-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) sum += <span class="built_in">abs</span>(num);</span><br><span class="line">        <span class="keyword">if</span> (target &gt; sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span> * sum + <span class="number">1</span>));</span><br><span class="line">        f[<span class="number">0</span>][sum] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = -sum; j &lt;= sum; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - x + sum &gt;= <span class="number">0</span>) f[i][j + sum] += f[i - <span class="number">1</span>][j - x + sum];</span><br><span class="line">                <span class="keyword">if</span> (j + x + sum &lt;= <span class="number">2</span> * sum) f[i][j + sum] += f[i - <span class="number">1</span>][j + x + sum];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][target + sum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-494-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> num : nums) sum += <span class="built_in">abs</span>(num);</span><br><span class="line">        <span class="keyword">if</span> (target &gt; sum || (sum - target) % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m = (sum - target) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x = nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                f[j] += j &gt;= x ? f[j - x] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 53. Maximum Subarray</title>
    <url>/LeetCode/leetcode-53-maximum-subarray/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-53-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-53-solution-1">Prefix Sum</a></li><li class="tab"><a href="#leetcode-53-solution-2">Kadane (DP)</a></li><li class="tab"><a href="#leetcode-53-solution-3">Kadane (Space Optimized DP)</a></li><li class="tab"><a href="#leetcode-53-solution-4">Divide and Conquer (Segment Tree)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-53-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>, mins = <span class="number">0</span>, ans = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            s += num;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, s - mins);</span><br><span class="line">            mins = <span class="built_in">min</span>(mins, s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-53-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ans;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        ans = dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(nums[i], dp[i - <span class="number">1</span>] + nums[i]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-53-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), maxPrevSum = <span class="number">0</span>, ans = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            maxPrevSum = <span class="built_in">max</span>(num, maxPrevSum + num);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, maxPrevSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-53-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">        <span class="type">int</span> lSum, rSum, mSum, iSum;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">pushUp</span><span class="params">(Status l, Status r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> iSum = l.iSum + r.iSum;</span><br><span class="line">        <span class="type">int</span> lSum = <span class="built_in">max</span>(l.lSum, l.iSum + r.lSum);</span><br><span class="line">        <span class="type">int</span> rSum = <span class="built_in">max</span>(r.rSum, r.iSum + l.rSum);</span><br><span class="line">        <span class="type">int</span> mSum = <span class="built_in">max</span>(&#123;l.mSum, r.mSum, l.rSum + r.lSum&#125;);</span><br><span class="line">        <span class="keyword">return</span> (Status) &#123;lSum, rSum, mSum, iSum&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">get</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Status) &#123;a[l], a[l], a[l], a[l]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Status lSub = <span class="built_in">get</span>(a, l, m);</span><br><span class="line">        Status rSub = <span class="built_in">get</span>(a, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pushUp</span>(lSub, rSub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>).mSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Divide and Conquer</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 518. Coin Change 2</title>
    <url>/LeetCode/leetcode-518-coin-change-2/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-518-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-518-solution-1">DP</a></li><li class="tab"><a href="#leetcode-518-solution-2">DP (optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-518-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount + <span class="number">1</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> val = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= amount; ++j) &#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k * val &lt;= j; ++k) &#123;</span><br><span class="line">                    f[i][j] += f[i - <span class="number">1</span>][j - k * val];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-518-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">change</span><span class="params">(<span class="type">int</span> amount, vector&lt;<span class="type">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(amount + <span class="number">1</span>)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> val = coins[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = val; j &lt;= amount; ++j) &#123;</span><br><span class="line">                f[j] += f[j - val];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 509. Fibonacci Number</title>
    <url>/LeetCode/leetcode-509-fibonacci-number/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            p = q; </span><br><span class="line">            q = r; </span><br><span class="line">            r = p + q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 54. Spiral Matrix</title>
    <url>/LeetCode/leetcode-54-spiral-matrix/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bottom = matrix.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; ++i)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[top][i]);</span><br><span class="line">            <span class="keyword">if</span> (++top &gt; bottom) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = top; i &lt;= bottom; ++i)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[i][right]);</span><br><span class="line">            <span class="keyword">if</span> (--right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = right; i &gt;= left; --i)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[bottom][i]);</span><br><span class="line">            <span class="keyword">if</span> (--bottom &lt; top) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = bottom; i &gt;= top; --i)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(matrix[i][left]);</span><br><span class="line">            <span class="keyword">if</span> (++left &gt; right) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 547. Number of Provinces</title>
    <url>/LeetCode/leetcode-547-number-of-provinces/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-547-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-547-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-547-solution-2">BFS</a></li><li class="tab"><a href="#leetcode-547-solution-3">Union Find</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-547-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; M)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = M.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(N, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="built_in">dfs</span>(M, i, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; M, <span class="type">int</span> i, vector&lt;<span class="type">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M.<span class="built_in">size</span>(); ++j)</span><br><span class="line">            <span class="keyword">if</span> (M[i][j] &amp;&amp; !visited[j])</span><br><span class="line">                <span class="built_in">dfs</span>(M, j, visited);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-547-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; M)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = M.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(N, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="built_in">dfs</span>(M, i, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; M, <span class="type">int</span> i, vector&lt;<span class="type">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M.<span class="built_in">size</span>(); ++j)</span><br><span class="line">            <span class="keyword">if</span> (M[i][j] &amp;&amp; !visited[j])</span><br><span class="line">                <span class="built_in">dfs</span>(M, j, visited);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-547-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findCircleNum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; M)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = M.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            f.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; N; ++j)</span><br><span class="line">                <span class="keyword">if</span> (M[i][j])</span><br><span class="line">                    _union(i, j);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">if</span> (f[i] == i)</span><br><span class="line">                ++cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (f[i] != i)</span><br><span class="line">            i = f[i];</span><br><span class="line">        <span class="keyword">while</span> (j != i) &#123;</span><br><span class="line">            <span class="type">int</span> next = f[j];</span><br><span class="line">            f[j] = i;</span><br><span class="line">            j = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> _union(<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">        f[<span class="built_in">find</span>(i)] = <span class="built_in">find</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 561. Array Partition I</title>
    <url>/LeetCode/leetcode-561-array-partition-i/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arrayPairSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">            ans += nums[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 566. Reshape the Matrix</title>
    <url>/LeetCode/leetcode-566-reshape-the-matrix/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrixReshape</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; nums, <span class="type">int</span> r, <span class="type">int</span> c) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> prevR = nums.<span class="built_in">size</span>(), prevC = nums[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (prevR * prevC &lt; r * c) <span class="keyword">return</span> nums;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(r, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(c));</span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; prevR; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; prevC; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> currR = idx / c, currC = idx % c;</span><br><span class="line">                ans[currR][currC] = nums[i][j];</span><br><span class="line">                ++idx;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 567. Permutation in String</title>
    <url>/LeetCode/leetcode-567-permutation-in-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n1 = s1.<span class="built_in">size</span>(), n2 = s2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n1 &gt; n2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(<span class="number">26</span>)</span>, <span class="title">winFreq</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>, winCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s1)</span><br><span class="line">            <span class="keyword">if</span> (freq[c - <span class="string">&#x27;a&#x27;</span>]++ == <span class="number">0</span>)</span><br><span class="line">                ++cnt;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n2) &#123;</span><br><span class="line">            <span class="type">int</span> idx = s2[right++] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (freq[idx] &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> (++winFreq[idx] == freq[idx])</span><br><span class="line">                    ++winCnt;</span><br><span class="line">            <span class="keyword">while</span> (winCnt == cnt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (right - left == n1) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                idx = s2[left++] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (freq[idx] &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">if</span> (--winFreq[idx] &lt; freq[idx])</span><br><span class="line">                        --winCnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 59. Spiral Matrix II</title>
    <url>/LeetCode/leetcode-59-spiral-matrix-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>, x1 = <span class="number">0</span>, y1 = <span class="number">0</span>, x2 = n <span class="number">-1</span>, y2 = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x = x1, y = y1;</span><br><span class="line">            <span class="keyword">while</span> (y &lt; y2)</span><br><span class="line">                ans[x][y++] = i++;</span><br><span class="line">            <span class="keyword">while</span> (x &lt; x2)</span><br><span class="line">                ans[x++][y] = i++;</span><br><span class="line">            <span class="keyword">while</span> (y &gt; y1)</span><br><span class="line">                ans[x][y--] = i++;</span><br><span class="line">            <span class="keyword">while</span> (x &gt; x1)</span><br><span class="line">                ans[x--][y] = i++;</span><br><span class="line">            ++x1;</span><br><span class="line">            ++y1;</span><br><span class="line">            --x2;</span><br><span class="line">            --y2;</span><br><span class="line">            n -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ans[x1][y1] = i;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 605. Can Place Flowers</title>
    <url>/LeetCode/leetcode-605-can-place-flowers/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPlaceFlowers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; flowerbed, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = flowerbed.<span class="built_in">size</span>(), i = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flowerbed[i]) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((i == <span class="number">0</span> || !flowerbed[i - <span class="number">1</span>]) &amp;&amp; (i == size - <span class="number">1</span> || !flowerbed[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 61. Rotate List</title>
    <url>/LeetCode/leetcode-61-rotate-list/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> || !head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">        ListNode* old_tail = head;</span><br><span class="line">        <span class="keyword">while</span> (old_tail-&gt;next) &#123;</span><br><span class="line">            old_tail = old_tail-&gt;next;</span><br><span class="line">            ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((k %= n) == <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        old_tail-&gt;next = head;</span><br><span class="line">        ListNode* new_tail = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - k - <span class="number">1</span>; i++) new_tail = new_tail-&gt;next;</span><br><span class="line">        ListNode* new_head = new_tail-&gt;next;</span><br><span class="line">        new_tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> new_head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 62. Unique Paths</title>
    <url>/LeetCode/leetcode-62-unique-paths/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-62-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-62-solution-1">DP</a></li><li class="tab"><a href="#leetcode-62-solution-2">DP with State Compression</a></li><li class="tab"><a href="#leetcode-62-solution-3">Combinatorics</a></li><li class="tab"><a href="#leetcode-62-solution-4">Combinatorics with API</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-62-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; m; ++r)</span><br><span class="line">            dp[r][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">            dp[<span class="number">0</span>][c] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">1</span>; r &lt; m; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt; n; ++c)</span><br><span class="line">                dp[r][c] = dp[r - <span class="number">1</span>][c] + dp[r][c - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-62-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">min</span>(m, n);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(c, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">max</span>(m, n); ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; c; ++j)</span><br><span class="line">                dp[j] += dp[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp[c - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-62-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = m, y = <span class="number">1</span>; y &lt; n; ++x, ++y)</span><br><span class="line">            ans = ans * x / y;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-62-solution-4"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> comb(m + n - <span class="number">2</span>, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 628. Maximum Product of Three Numbers</title>
    <url>/LeetCode/leetcode-628-maximum-product-of-three-numbers/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumProduct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min1 = INT_MAX, min2 = INT_MAX;</span><br><span class="line">        <span class="type">int</span> max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; min1) &#123;</span><br><span class="line">                min2 = min1;</span><br><span class="line">                min1 = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; min2) &#123;</span><br><span class="line">                min2 = num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; max1) &#123;</span><br><span class="line">                max3 = max2;</span><br><span class="line">                max2 = max1;</span><br><span class="line">                max1 = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; max2) &#123;</span><br><span class="line">                max3 = max2;</span><br><span class="line">                max2 = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; max3) &#123;</span><br><span class="line">                max3 = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(min1 * min2 * max1, max1 * max2 * max3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 643. Maximum Average Subarray I</title>
    <url>/LeetCode/leetcode-643-maximum-average-subarray-i/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMaxAverage</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>() + k, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> maxSum = sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            sum += (nums[i] - nums[i - k]);</span><br><span class="line">            maxSum = <span class="built_in">max</span>(maxSum, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> * maxSum / k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 633. Sum of Square Numbers</title>
    <url>/LeetCode/leetcode-633-sum-of-square-numbers/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> a = <span class="number">0</span>; a * a &lt;= c; a++) &#123;</span><br><span class="line">            <span class="type">double</span> b = <span class="built_in">sqrt</span>(c - a * a);</span><br><span class="line">            <span class="keyword">if</span> (b == (<span class="type">int</span>) b)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 645. Set Mismatch</title>
    <url>/LeetCode/leetcode-645-set-mismatch/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-645-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-645-solution-1">Sort</a></li><li class="tab"><a href="#leetcode-645-solution-2">Hash Table</a></li><li class="tab"><a href="#leetcode-645-solution-3">Bit Manipulation</a></li><li class="tab"><a href="#leetcode-645-solution-4">Pigeonhole Principle</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-645-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findErrorNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), prev = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == prev) &#123;</span><br><span class="line">                ans[<span class="number">0</span>] = num;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num - prev &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                ans[<span class="number">1</span>] = prev + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">back</span>() != n) ans[<span class="number">1</span>] = n;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-645-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10001</span>;</span><br><span class="line"><span class="type">int</span> c[N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findErrorNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            <span class="keyword">if</span> (++c[num] == <span class="number">2</span>)</span><br><span class="line">                ans[<span class="number">0</span>] = num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (c[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                ans[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-645-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findErrorNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), mask = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (++i &lt;= n) mask ^= i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) mask ^= num;</span><br><span class="line">        i = <span class="number">0</span>, mask = mask &amp; (-mask); <span class="comment">// lowbit.</span></span><br><span class="line">        <span class="type">int</span> num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (++i &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; mask) == <span class="number">0</span>) num1 ^= i;</span><br><span class="line">            <span class="keyword">else</span> num2 ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((num &amp; mask) == <span class="number">0</span>) num1 ^= num;</span><br><span class="line">            <span class="keyword">else</span> num2 ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == num1)</span><br><span class="line">                <span class="keyword">return</span> &#123;num1, num2&#125;;</span><br><span class="line">            <span class="keyword">if</span> (num == num2)</span><br><span class="line">                <span class="keyword">return</span> &#123;num2, num1&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-645-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findErrorNums</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), idx;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            idx = (nums[i] - <span class="number">1</span>) % n;</span><br><span class="line">            nums[idx] += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">2</span> * n)</span><br><span class="line">                ans[<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt;= n)</span><br><span class="line">                ans[<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Array</tag>
        <tag>Bit Manipulation</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 665. Non-decreasing Array</title>
    <url>/LeetCode/leetcode-665-non-decreasing-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkPossibility</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt-- == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) nums[i] = INT_MIN;</span><br><span class="line">                <span class="comment">// else if (nums[i - 1] &lt;= nums[i + 1]) nums[i] = nums[i - 1];</span></span><br><span class="line">                <span class="comment">// else nums[i + 1] = nums[i];</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i - <span class="number">1</span>] &gt; nums[i + <span class="number">1</span>]) nums[i + <span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 674. Longest Continuous Increasing Subsequence</title>
    <url>/LeetCode/leetcode-674-longest-continuous-increasing-subsequence/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findLengthOfLCIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; nums.<span class="built_in">size</span>(); ++r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; <span class="number">0</span> &amp;&amp; nums[r] &lt;= nums[r - <span class="number">1</span>])</span><br><span class="line">                l = r;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 684. Redundant Connection</title>
    <url>/LeetCode/leetcode-684-redundant-connection/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findRedundantConnection</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = edges.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">size</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> find = [&amp;](<span class="type">int</span> i) &#123;</span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (i != f[i]) i = f[i];</span><br><span class="line">            <span class="keyword">while</span> (j != i) &#123;</span><br><span class="line">                <span class="type">int</span> next = f[j];</span><br><span class="line">                f[j] = i;</span><br><span class="line">                j = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!f[u]) f[u] = u;</span><br><span class="line">            <span class="keyword">if</span> (!f[v]) f[v] = v;</span><br><span class="line">            <span class="type">int</span> uf = <span class="built_in">find</span>(u), vf = <span class="built_in">find</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (uf == vf) <span class="keyword">return</span> edge;</span><br><span class="line">            <span class="keyword">if</span> (size[vf] &gt; size[uf])</span><br><span class="line">                <span class="built_in">swap</span>(vf, uf);</span><br><span class="line">            f[vf] = uf;</span><br><span class="line">            size[uf] += size[vf];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 690. Employee Importance</title>
    <url>/LeetCode/leetcode-690-employee-importance/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-690-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-690-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-690-solution-2">BFS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-690-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getImportance</span><span class="params">(vector&lt;Employee*&gt; employees, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, Employee*&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (Employee* e : employees)</span><br><span class="line">            m[e-&gt;id] = e;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> id) &#123;</span><br><span class="line">            Employee* e = m[id];</span><br><span class="line">            <span class="type">int</span> ans = e-&gt;importance;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> sub : e-&gt;subordinates)</span><br><span class="line">                ans += <span class="built_in">dfs</span>(sub);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-690-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getImportance</span><span class="params">(vector&lt;Employee*&gt; employees, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, Employee*&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; e : employees)</span><br><span class="line">            m[e-&gt;id] = e;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(id);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> curr = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            Employee* e = m[curr];</span><br><span class="line">            ans += e-&gt;importance;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> sub : e-&gt;subordinates)</span><br><span class="line">                q.<span class="built_in">push</span>(sub);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Breadth-first Search</tag>
        <tag>Hash Table</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 697. Degree of an Array</title>
    <url>/LeetCode/leetcode-697-degree-of-an-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findShortestSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>[3]&gt; m; <span class="comment">// num =&gt; [freq, left, right]</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), degree = <span class="number">1</span>, ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="type">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">find</span>(num) == m.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                m[num][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                m[num][<span class="number">1</span>] = i;</span><br><span class="line">                m[num][<span class="number">2</span>] = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> freq = ++m[num][<span class="number">0</span>];</span><br><span class="line">                m[num][<span class="number">2</span>] = i;</span><br><span class="line">                degree = <span class="built_in">max</span>(degree, freq);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [_, info] : m)</span><br><span class="line">            <span class="keyword">if</span> (degree == info[<span class="number">0</span>])</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, info[<span class="number">2</span>] - info[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 692. Top K Frequent Words</title>
    <url>/LeetCode/leetcode-692-top-k-frequent-words/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;string&gt;&amp; words, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; word : words)</span><br><span class="line">            ++m[word];</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](<span class="type">const</span> <span class="keyword">auto</span>&amp; a, <span class="type">const</span> <span class="keyword">auto</span>&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &gt; b.first || (a.first == b.first &amp;&amp; a.second &lt; b.second);</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, string&gt;, vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [word, freq] : m) &#123;</span><br><span class="line">            q.<span class="built_in">emplace</span>(freq, word);</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; k)</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">ans</span><span class="params">(k)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            ans[i] = q.<span class="built_in">top</span>().second;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
        <tag>Hash Table</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 699. Falling Squares</title>
    <url>/LeetCode/leetcode-699-falling-squares/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-699-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-699-solution-1">Brute Force</a></li><li class="tab active"><a href="#leetcode-699-solution-2">Segment Tree</a></li><li class="tab"><a href="#leetcode-699-solution-3">Ordered Set</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-699-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fallingSquares</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; positions)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = positions.<span class="built_in">size</span>(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : positions) &#123;</span><br><span class="line">            <span class="type">int</span> l = p[<span class="number">0</span>], h = p[<span class="number">1</span>], r = l + h - <span class="number">1</span>;</span><br><span class="line">            ans[i] = h;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">                <span class="keyword">if</span> (r &gt;= positions[j][<span class="number">0</span>] &amp;&amp; l &lt;= (positions[j][<span class="number">0</span>] + positions[j][<span class="number">1</span>] - <span class="number">1</span>))</span><br><span class="line">                    ans[i] = <span class="built_in">max</span>(ans[i], ans[j] + h);</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            ans[i] = <span class="built_in">max</span>(ans[i], ans[i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-699-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> val, add;</span><br><span class="line">        Node *ls, *rs;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node *root;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node-&gt;ls) node-&gt;ls = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        <span class="keyword">if</span> (!node-&gt;rs) node-&gt;rs = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;add == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        node-&gt;ls-&gt;add = node-&gt;ls-&gt;val = node-&gt;add;</span><br><span class="line">        node-&gt;rs-&gt;add = node-&gt;rs-&gt;val = node-&gt;add;</span><br><span class="line">        node-&gt;add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">        node-&gt;val = <span class="built_in">max</span>(node-&gt;ls-&gt;val, node-&gt;rs-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(Node *node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> node-&gt;val;</span><br><span class="line">        <span class="built_in">pushdown</span>(node);</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= mid) ans = <span class="built_in">query</span>(node-&gt;ls, l, mid, L, R);</span><br><span class="line">        <span class="keyword">if</span> (R &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(node-&gt;rs, mid + <span class="number">1</span>, r, L, R));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(Node *node, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) node-&gt;add = node-&gt;val = v;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">pushdown</span>(node);</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (L &lt;= mid) <span class="built_in">update</span>(node-&gt;ls, l, mid, L, R, v);</span><br><span class="line">            <span class="keyword">if</span> (R &gt; mid) <span class="built_in">update</span>(node-&gt;rs, mid + <span class="number">1</span>, r, L, R, v);</span><br><span class="line">            <span class="built_in">pushup</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fallingSquares</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; positions)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(positions.size())</span></span>;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : positions) &#123;</span><br><span class="line">            <span class="type">int</span> l = p[<span class="number">0</span>], h = p[<span class="number">1</span>], r = l + h - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> curr = <span class="built_in">query</span>(root, <span class="number">0</span>, N, l, r);</span><br><span class="line">            <span class="built_in">update</span>(root, <span class="number">0</span>, N, l, r, curr + h);</span><br><span class="line">            ans[i++] = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-699-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m; <span class="comment">// [l, h], start from l, the height is h, until the next point.</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fallingSquares</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; positions)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = positions.<span class="built_in">size</span>(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        m[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : positions) &#123;</span><br><span class="line">            <span class="type">int</span> l = p[<span class="number">0</span>], h = p[<span class="number">1</span>], r = l + h - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">auto</span> lp = m.<span class="built_in">upper_bound</span>(l), rp = m.<span class="built_in">upper_bound</span>(r);</span><br><span class="line">            <span class="type">int</span> ph = <span class="built_in">prev</span>(rp)-&gt;second;</span><br><span class="line">            <span class="type">int</span> piledHeight = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> p = <span class="built_in">prev</span>(lp); p != rp; ++p)</span><br><span class="line">                piledHeight = <span class="built_in">max</span>(piledHeight, p-&gt;second + h);</span><br><span class="line">            m.<span class="built_in">erase</span>(lp, rp);</span><br><span class="line">            m[l] = piledHeight;</span><br><span class="line">            <span class="keyword">if</span> (rp == m.<span class="built_in">end</span>() || rp-&gt;first != r + <span class="number">1</span>)</span><br><span class="line">                m[r + <span class="number">1</span>] = ph;</span><br><span class="line">            ans[i] = i ? <span class="built_in">max</span>(ans[i - <span class="number">1</span>], piledHeight) : h;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Ordered Set</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 7. Reverse Integer</title>
    <url>/LeetCode/leetcode-7-reverse-integer/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rev &lt; INT_MIN / <span class="number">10</span> || rev &gt; INT_MAX / <span class="number">10</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            rev = rev * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 703. Kth Largest Element in a Stream</title>
    <url>/LeetCode/leetcode-703-kth-largest-element-in-a-stream/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KthLargest</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KthLargest</span>(<span class="type">int</span> k, vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;k = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x: nums)</span><br><span class="line">            <span class="built_in">add</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        q.<span class="built_in">push</span>(val);</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; k)</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Heap</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 706. Design HashMap</title>
    <url>/LeetCode/leetcode-706-design-hashmap/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashMap</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; data;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> base = <span class="number">769</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % base;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyHashMap</span>(): <span class="built_in">data</span>(base) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); ++it)</span><br><span class="line">            <span class="keyword">if</span> ((*it).first == key) &#123;</span><br><span class="line">                (*it).second = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        data[h].<span class="built_in">emplace_back</span>(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); ++it)</span><br><span class="line">            <span class="keyword">if</span> ((*it).first == key)</span><br><span class="line">                <span class="keyword">return</span> (*it).second;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); ++it)</span><br><span class="line">            <span class="keyword">if</span> ((*it).first == key) &#123;</span><br><span class="line">                data[h].<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 705. Design HashSet</title>
    <url>/LeetCode/leetcode-705-design-hashset/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHashSet</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;list&lt;<span class="type">int</span>&gt;&gt; data;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> base = <span class="number">769</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % base;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyHashSet</span>(): <span class="built_in">data</span>(base) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); ++it)</span><br><span class="line">            <span class="keyword">if</span> ((*it) == key)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        data[h].<span class="built_in">push_back</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); ++it)</span><br><span class="line">            <span class="keyword">if</span> ((*it) == key) &#123;</span><br><span class="line">                data[h].<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> h = <span class="built_in">hash</span>(key);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = data[h].<span class="built_in">begin</span>(); it != data[h].<span class="built_in">end</span>(); ++it)</span><br><span class="line">            <span class="keyword">if</span> ((*it) == key)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 714. Best Time to Buy and Sell Stock with Transaction Fee</title>
    <url>/LeetCode/leetcode-714-best-time-to-buy-and-sell-stock-with-transaction-fee/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-714-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-714-solution-1">DP</a></li><li class="tab"><a href="#leetcode-714-solution-2">Greedy</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-714-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cash = <span class="number">0</span>, hold = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            cash = <span class="built_in">max</span>(cash, hold + prices[i] - fee);</span><br><span class="line">            hold = <span class="built_in">max</span>(hold, cash - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-714-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices, <span class="type">int</span> fee)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> buy = prices[<span class="number">0</span>] + fee;</span><br><span class="line">        <span class="type">int</span> profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] + fee &lt; buy) &#123;</span><br><span class="line">                buy = prices[i] + fee;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] &gt; buy) &#123;</span><br><span class="line">                profit += prices[i] - buy;</span><br><span class="line">                buy = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 713. Subarray Product Less Than K</title>
    <url>/LeetCode/leetcode-713-subarray-product-less-than-k/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, product = <span class="number">1</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            product *= nums[right];</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; product &gt;= k)</span><br><span class="line">                product /= nums[left++];</span><br><span class="line">            ans += right - left + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 715. Range Module</title>
    <url>/LeetCode/leetcode-715-range-module/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RangeModule</span> &#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RangeModule</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">lower_bound</span>(left); it != m.<span class="built_in">end</span>() &amp;&amp; it-&gt;second &lt;= right; m.<span class="built_in">erase</span>(it++)) &#123;</span><br><span class="line">            <span class="type">int</span> l = it-&gt;second, r = it-&gt;first;</span><br><span class="line">            left = <span class="built_in">min</span>(left, l), right = <span class="built_in">max</span>(right, r);</span><br><span class="line">        &#125;</span><br><span class="line">        m[right] = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">queryRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = m.<span class="built_in">lower_bound</span>(left);</span><br><span class="line">        <span class="keyword">return</span> it != m.<span class="built_in">end</span>() &amp;&amp; it-&gt;second &lt;= left &amp;&amp; it-&gt;first &gt;= right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">lower_bound</span>(left + <span class="number">1</span>); it != m.<span class="built_in">end</span>() &amp;&amp; it-&gt;second &lt;= right;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;second &lt; left) &#123;</span><br><span class="line">                m[left] = it-&gt;second;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;first &gt; right) &#123;</span><br><span class="line">                m[it-&gt;first] = right;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> m.<span class="built_in">erase</span>(it++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RangeModule object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RangeModule* obj = new RangeModule();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addRange(left,right);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;queryRange(left,right);</span></span><br><span class="line"><span class="comment"> * obj-&gt;removeRange(left,right);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Segment Tree</tag>
        <tag>Ordered Set</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 721. Accounts Merge</title>
    <url>/LeetCode/leetcode-721-accounts-merge/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-721-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-721-solution-1">Union Find</a></li><li class="tab"><a href="#leetcode-721-solution-2">DFS</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-721-solution-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">accountsMerge</span><span class="params">(List&lt;List&lt;String&gt;&gt; accounts)</span> &#123;</span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>();</span><br><span class="line">        Map&lt;String, Integer&gt; emailToId = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, String&gt; emailToName = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; account : accounts) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (String email : account) &#123;</span><br><span class="line">                <span class="keyword">if</span> (name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    name = email;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                emailToName.put(email, name);</span><br><span class="line">                <span class="keyword">if</span> (!emailToId.containsKey(email))</span><br><span class="line">                    emailToId.put(email, id++);</span><br><span class="line">                uf.union(emailToId.get(account.get(<span class="number">1</span>)), emailToId.get(email));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String email : emailToName.keySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> uf.find(emailToId.get(email));</span><br><span class="line">            ans.computeIfAbsent(i, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(email);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; l : ans.values()) &#123;</span><br><span class="line">            Collections.sort(l);</span><br><span class="line">            l.add(<span class="number">0</span>, emailToName.get(l.get(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(ans.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] f;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">()</span> &#123;</span><br><span class="line">        f = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">            f[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span> (i != f[i])</span><br><span class="line">            i = f[i];</span><br><span class="line">        <span class="keyword">while</span> (f[j] != i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> f[j];</span><br><span class="line">            f[j] = i;</span><br><span class="line">            j = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        f[find(j)] = find(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-721-solution-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">accountsMerge</span><span class="params">(List&lt;List&lt;String&gt;&gt; accounts)</span> &#123;</span><br><span class="line">        Map&lt;String, Set&lt;String&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, String&gt; emailToName = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; account : accounts) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> account.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; account.size(); i++) &#123;</span><br><span class="line">                graph.computeIfAbsent(account.get(i), k -&gt; <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line">                emailToName.put(account.get(i), name);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                graph.get(account.get(i)).add(account.get(i - <span class="number">1</span>));</span><br><span class="line">                graph.get(account.get(i - <span class="number">1</span>)).add(account.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String email : emailToName.keySet()) &#123;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (visited.add(email)) &#123;</span><br><span class="line">                dfs(graph, email, visited, list);</span><br><span class="line">                Collections.sort(list);</span><br><span class="line">                list.add(<span class="number">0</span>, emailToName.get(email));</span><br><span class="line">                ans.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Map&lt;String, Set&lt;String&gt;&gt; graph, String email, Set&lt;String&gt; visited, List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.add(email);</span><br><span class="line">        <span class="keyword">for</span> (String next : graph.get(email))</span><br><span class="line">            <span class="keyword">if</span> (visited.add(next))</span><br><span class="line">                dfs(graph, next, visited, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 726. Number of Atoms</title>
    <url>/LeetCode/leetcode-726-number-of-atoms/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-726-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-726-solution-1">Stack</a></li><li class="tab active"><a href="#leetcode-726-solution-2">DFS</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-726-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">countOfAtoms</span><span class="params">(string formula)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, n = formula.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">auto</span> parseAtom = [&amp;]() -&gt; string &#123;</span><br><span class="line">            string atom;</span><br><span class="line">            atom += formula[i++];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; <span class="built_in">islower</span>(formula[i]))</span><br><span class="line">                atom += formula[i++];</span><br><span class="line">            <span class="keyword">return</span> atom;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> parseNum = [&amp;]() -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == n || !<span class="built_in">isdigit</span>(formula[i]))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; <span class="built_in">isdigit</span>(formula[i]))</span><br><span class="line">                num = num * <span class="number">10</span> + (formula[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;;</span><br><span class="line">        stack&lt;unordered_map&lt;string, <span class="type">int</span>&gt;&gt; stk;</span><br><span class="line">        stk.<span class="built_in">push</span>(&#123;&#125;);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">char</span> ch = formula[i];</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                stk.<span class="built_in">push</span>(&#123;&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="type">int</span> num = <span class="built_in">parseNum</span>();</span><br><span class="line">                <span class="keyword">auto</span> atomNum = stk.<span class="built_in">top</span>();</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[atom, v] : atomNum)</span><br><span class="line">                    stk.<span class="built_in">top</span>()[atom] += v * num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                string atom = <span class="built_in">parseAtom</span>();</span><br><span class="line">                <span class="type">int</span> num = <span class="built_in">parseNum</span>();</span><br><span class="line">                stk.<span class="built_in">top</span>()[atom] += num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> &amp;atomNum = stk.<span class="built_in">top</span>();</span><br><span class="line">        vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; pairs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[atom, v] : atomNum)</span><br><span class="line">            pairs.<span class="built_in">emplace_back</span>(atom, v);</span><br><span class="line">        <span class="built_in">sort</span>(pairs.<span class="built_in">begin</span>(), pairs.<span class="built_in">end</span>());</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp; [atom, num] : pairs) &#123;</span><br><span class="line">            ans += atom;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">1</span>)</span><br><span class="line">                ans += <span class="built_in">to_string</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-726-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">map&lt;string, <span class="type">int</span>&gt; <span class="title">dfs</span><span class="params">(<span class="type">const</span> string &amp;formula, <span class="type">int</span> &amp;curr)</span> </span>&#123;</span><br><span class="line">        map&lt;string, <span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (curr &lt; formula.<span class="built_in">size</span>() &amp;&amp; formula[curr] != <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (formula[curr] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                ++curr;</span><br><span class="line">                <span class="keyword">auto</span> tmp = <span class="built_in">dfs</span>(formula, curr);</span><br><span class="line">                <span class="type">int</span> next = curr;</span><br><span class="line">                <span class="keyword">while</span> (next &lt; formula.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(formula[next])) ++next;</span><br><span class="line">                <span class="type">int</span> num = curr == next ? <span class="number">1</span> : <span class="built_in">stoi</span>(formula.<span class="built_in">substr</span>(curr, next - curr));</span><br><span class="line">                curr = next;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[atom, v] : tmp)</span><br><span class="line">                    ans[atom] += num * v;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> next = curr + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (next &lt; formula.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">islower</span>(formula[next])) ++next;</span><br><span class="line">                string atom = formula.<span class="built_in">substr</span>(curr, next - curr);</span><br><span class="line">                curr = next;</span><br><span class="line">                <span class="keyword">while</span> (next &lt; formula.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(formula[next])) ++next;</span><br><span class="line">                <span class="type">int</span> num = curr == next ? <span class="number">1</span> : <span class="built_in">stoi</span>(formula.<span class="built_in">substr</span>(curr, next - curr));</span><br><span class="line">                ans[atom] += num;</span><br><span class="line">                curr = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++curr;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">countOfAtoms</span><span class="params">(string formula)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> atomNum = <span class="built_in">dfs</span>(formula, curr);</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[atom, num] : atomNum)</span><br><span class="line">            ans += (num == <span class="number">1</span> ? atom : atom + <span class="built_in">to_string</span>(num));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 724. Find Pivot Index</title>
    <url>/LeetCode/leetcode-724-find-pivot-index/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> currSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * currSum + nums[i] == sum)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            currSum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 73. Set Matrix Zeroes</title>
    <url>/LeetCode/leetcode-73-set-matrix-zeroes/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-73-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-73-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-73-solution-2">Solution 2</a></li><li class="tab"><a href="#leetcode-73-solution-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-73-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">row</span><span class="params">(m)</span>, <span class="title">col</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][j])</span><br><span class="line">                    row[i] = col[j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (row[i] || col[j])</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-73-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> flag_col0 = <span class="literal">false</span>, flag_row0 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>])</span><br><span class="line">                flag_col0 = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!matrix[<span class="number">0</span>][j])</span><br><span class="line">                flag_row0 = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][j])</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>] || !matrix[<span class="number">0</span>][j])</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag_col0)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag_row0)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-73-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> flag_col0 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>])</span><br><span class="line">                flag_col0 = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][j])</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>] || !matrix[<span class="number">0</span>][j])</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag_col0)</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 74. Search a 2D Matrix</title>
    <url>/LeetCode/leetcode-74-search-a-2d-matrix/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> lo = <span class="number">0</span>, hi = m * n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">            <span class="type">int</span> mid = lo + ((hi - lo) / <span class="number">2</span>);</span><br><span class="line">            <span class="type">int</span> v = matrix[mid / n][mid % n];</span><br><span class="line">            <span class="keyword">if</span> (v == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &lt; target) &#123;</span><br><span class="line">                lo = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hi = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 740. Delete and Earn</title>
    <url>/LeetCode/leetcode-740-delete-and-earn/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-740-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-740-solution-1">DP</a></li><li class="tab active"><a href="#leetcode-740-solution-2">DP</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-740-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteAndEarn</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dp;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j, curr;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            curr = nums[i];</span><br><span class="line">            j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[i] == nums[j])</span><br><span class="line">                ++j;</span><br><span class="line">            <span class="type">int</span> curr = (j - i) * nums[i];</span><br><span class="line">            <span class="keyword">if</span> (!dp.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">                    curr += dp.<span class="built_in">back</span>();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (dp.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                    curr = <span class="built_in">max</span>(dp.<span class="built_in">back</span>(), curr);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    curr = <span class="built_in">max</span>(dp.<span class="built_in">back</span>(), curr + dp[dp.<span class="built_in">size</span>() - <span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp.<span class="built_in">emplace_back</span>(curr);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-740-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> a = nums[<span class="number">0</span>], b = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> temp = b;</span><br><span class="line">            b = <span class="built_in">max</span>(a + nums[i], b);</span><br><span class="line">            a = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteAndEarn</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; sum = &#123;nums[<span class="number">0</span>]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> val = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (val == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                sum.<span class="built_in">back</span>() += val;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val == nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                sum.<span class="built_in">push_back</span>(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += <span class="built_in">rob</span>(sum);</span><br><span class="line">                sum = &#123;val&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += <span class="built_in">rob</span>(sum);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 746. Min Cost Climbing Stairs</title>
    <url>/LeetCode/leetcode-746-min-cost-climbing-stairs/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cost.<span class="built_in">size</span>(), first = cost[<span class="number">0</span>], second = cost[<span class="number">1</span>], third, i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            third = <span class="built_in">min</span>(first, second) + cost[i++];</span><br><span class="line">            first = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(first, second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 76. Minimum Window Substring</title>
    <url>/LeetCode/leetcode-76-minimum-window-substring/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n1 = s.<span class="built_in">size</span>(), n2 = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n1 &lt; n2) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(<span class="number">128</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : t)</span><br><span class="line">            freq[c]++;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, minWinLen = INT_MAX, head = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (freq[s[right++]]-- &gt; <span class="number">0</span>)</span><br><span class="line">                --n2; <span class="comment">// char in t.</span></span><br><span class="line">            <span class="keyword">while</span> (n2 == <span class="number">0</span>) &#123; <span class="comment">// valid window.</span></span><br><span class="line">                <span class="keyword">if</span> (right - left &lt; minWinLen)</span><br><span class="line">                    minWinLen = right - (head = left); <span class="comment">// get min window length.</span></span><br><span class="line">                <span class="keyword">if</span> (freq[s[left++]]++ == <span class="number">0</span>)</span><br><span class="line">                    n2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minWinLen == INT_MAX ? <span class="string">&quot;&quot;</span> : s.<span class="built_in">substr</span>(head, minWinLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 754. Reach a Number</title>
    <url>/LeetCode/leetcode-754-reach-a-number/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-754-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-754-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-754-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-754-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (sum &lt; target || (sum - target) &amp; <span class="number">1</span>)</span><br><span class="line">            sum += ++k;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-754-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">long</span> n = <span class="built_in">ceil</span>((<span class="number">-1.0</span> + <span class="built_in">sqrt</span>(<span class="number">1</span> + <span class="number">8.0</span> * target)) / <span class="number">2</span>);</span><br><span class="line">        <span class="type">long</span> sum = n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">long</span> diff = sum - target;</span><br><span class="line">        <span class="keyword">if</span> ((diff &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> n + ((n &amp; <span class="number">1</span>) ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 765. Couples Holding Hands</title>
    <url>/LeetCode/leetcode-765-couples-holding-hands/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-765-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-765-solution-1">Union Find</a></li><li class="tab"><a href="#leetcode-765-solution-2">BFS</a></li><li class="tab"><a href="#leetcode-765-solution-3">DFS</a></li><li class="tab active"><a href="#leetcode-765-solution-4">Greedy</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-765-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">f</span>(_n), <span class="built_in">size</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size[x] &lt; size[y])</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">            f[y] = x;</span><br><span class="line">            size[x] += size[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> tot = n / <span class="number">2</span>;</span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(tot)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">            uf._union(row[i] / <span class="number">2</span>, row[i + <span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            ++m[uf.<span class="built_in">find</span>(i)];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// for each connected set with &quot;sz&quot; as size,</span></span><br><span class="line">        <span class="comment">// &quot;sz - 1&quot; would be the number of needed swaps.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [_, sz] : m)</span><br><span class="line">            ans += sz - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-765-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> tot = n / <span class="number">2</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(tot);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> l = row[i] / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> r = row[i + <span class="number">1</span>] / <span class="number">2</span>;</span><br><span class="line">            graph[l].<span class="built_in">emplace_back</span>(r);</span><br><span class="line">            graph[r].<span class="built_in">emplace_back</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(tot, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">                visited[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    <span class="type">int</span> x = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                    ++cnt;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> nx : graph[x])</span><br><span class="line">                        <span class="keyword">if</span> (!visited[nx]) &#123;</span><br><span class="line">                            q.<span class="built_in">push</span>(nx);</span><br><span class="line">                            visited[nx] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ans += cnt - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-765-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> tot = n / <span class="number">2</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(tot);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> l = row[i] / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> r = row[i + <span class="number">1</span>] / <span class="number">2</span>;</span><br><span class="line">            graph[l].<span class="built_in">emplace_back</span>(r);</span><br><span class="line">            graph[r].<span class="built_in">emplace_back</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(tot, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> nx : graph[x])</span><br><span class="line">                <span class="keyword">if</span> (!seen[nx]) &#123;</span><br><span class="line">                    seen[nx] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">dfs</span>(nx);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!seen[i]) &#123;</span><br><span class="line">                seen[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">                ans += cnt - <span class="number">1</span>;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-765-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSwapsCouples</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = row.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ptn</span><span class="params">(n)</span></span>; <span class="comment">// self label -&gt; partner label</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pos</span><span class="params">(n)</span></span>; <span class="comment">// label -&gt; seat</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ptn[i] = i ^ <span class="number">1</span>;</span><br><span class="line">            pos[row[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = ptn[pos[ptn[row[i]]]]; i != j; j = ptn[pos[ptn[row[i]]]]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(row[i], row[j]);</span><br><span class="line">                <span class="built_in">swap</span>(pos[row[i]], pos[row[j]]);</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>Reference: <a href="https://leetcode.com/problems/couples-holding-hands/discuss/113362/JavaC%2B%2B-O(N)-solution-using-cyclic-swapping">Java&#x2F;C++ O(N) solution using cyclic swapping - LeetCode Discuss</a>.</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Greedy</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 766. Toeplitz Matrix</title>
    <url>/LeetCode/leetcode-766-toeplitz-matrix/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isToeplitzMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> start_x = m - <span class="number">2</span>, start_y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start_y &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> next_x = start_x + <span class="number">1</span>, next_y = start_y + <span class="number">1</span>; next_x &lt; m &amp;&amp; next_y &lt; n; ++next_x, ++next_y)</span><br><span class="line">                <span class="keyword">if</span> (matrix[start_x][start_y] != matrix[next_x][next_y])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (--start_x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                start_x = <span class="number">0</span>;</span><br><span class="line">                ++start_y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 778. Swim in Rising Water</title>
    <url>/LeetCode/leetcode-778-swim-in-rising-water/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-778-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-778-solution-1">Union Find</a></li><li class="tab"><a href="#leetcode-778-solution-2">Binary Search</a></li><li class="tab"><a href="#leetcode-778-solution-3">Shortest Path</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-778-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">f</span>(_n), <span class="built_in">size</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size[x] &lt; size[y])</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">            f[y] = x;</span><br><span class="line">            size[x] += size[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">swimInWater</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; N; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; N; ++c) &#123;</span><br><span class="line">                <span class="type">int</span> idx = r * N + c;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; N - <span class="number">1</span>) &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(idx, idx + N, <span class="built_in">max</span>(grid[r + <span class="number">1</span>][c], grid[r][c]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; N - <span class="number">1</span>) &#123;</span><br><span class="line">                    edges.<span class="built_in">emplace_back</span>(idx, idx + <span class="number">1</span>, <span class="built_in">max</span>(grid[r][c + <span class="number">1</span>], grid[r][c]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span>&amp; e1, <span class="type">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x1, y1, w1] = e1;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x2, y2, w2] = e2;</span><br><span class="line">            <span class="keyword">return</span> w1 &lt; w2;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(N * N)</span></span>;</span><br><span class="line">        <span class="type">int</span> lastIdx = N * N - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> [x, y, w] : edges) &#123;</span><br><span class="line">            uf._union(x, y);</span><br><span class="line">            <span class="keyword">if</span> (uf.<span class="built_in">connected</span>(<span class="number">0</span>, lastIdx))</span><br><span class="line">                <span class="keyword">return</span> w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-778-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">swimInWater</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = N * N - <span class="number">1</span>, ans = <span class="number">0</span>, dirs[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> lastIdx = right;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">            q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(N * N)</span></span>;</span><br><span class="line">            seen[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="keyword">auto</span> [r, c] = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;) &#123;</span><br><span class="line">                    <span class="type">int</span> nr = r + dirs[i], nc = c + dirs[++i];</span><br><span class="line">                    <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= N || nc &lt; <span class="number">0</span> || nc &gt;= N || seen[nr * N + nc] </span><br><span class="line">                        || <span class="built_in">max</span>(grid[nr][nc], grid[r][c]) &gt; mid) <span class="keyword">continue</span>;</span><br><span class="line">                    q.<span class="built_in">emplace</span>(nr, nc);</span><br><span class="line">                    seen[nr * N + nc] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (seen[lastIdx]) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-778-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">swimInWater</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> N = grid.<span class="built_in">size</span>(), dirs[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">auto</span> tupleCmp = [](<span class="type">const</span> <span class="keyword">auto</span>&amp; e1, <span class="type">const</span> <span class="keyword">auto</span>&amp; e2) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x1, y1, h1] = e1;</span><br><span class="line">            <span class="keyword">auto</span>&amp;&amp; [x2, y2, h2] = e2;</span><br><span class="line">            <span class="keyword">return</span> h1 &gt; h2;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(tupleCmp)&gt; <span class="built_in">q</span>(tupleCmp);</span><br><span class="line">        q.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>, grid[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">height</span><span class="params">(N * N, INT_MAX)</span></span>;</span><br><span class="line">        height[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">seen</span><span class="params">(N * N)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [r, c, h] = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> idx = r * N + c;</span><br><span class="line">            <span class="keyword">if</span> (seen[idx]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (r == N - <span class="number">1</span> &amp;&amp; c == N - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            seen[idx] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;) &#123;</span><br><span class="line">                <span class="type">int</span> nr = r + dirs[i], nc = c + dirs[++i];</span><br><span class="line">                <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= N || nc &lt; <span class="number">0</span> || nc &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> nh = <span class="built_in">max</span>(h, grid[nr][nc]);</span><br><span class="line">                <span class="keyword">if</span> (nh &gt;= height[nr * N + nc]) <span class="keyword">continue</span>;</span><br><span class="line">                height[nr * N + nc] = nh;</span><br><span class="line">                q.<span class="built_in">emplace</span>(nr, nc, nh);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height[N * N - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 781. Rabbits in Forest</title>
    <url>/LeetCode/leetcode-781-rabbits-in-forest/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numRabbits</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; answers)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y : answers)</span><br><span class="line">            ++m[y];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[y, x] : m)</span><br><span class="line">            ans += (x + y) / (y + <span class="number">1</span>) * (y + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 783. Minimum Distance Between BST Nodes</title>
    <url>/LeetCode/leetcode-783-minimum-distance-between-bst-nodes/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-783-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-783-solution-1">Recursion</a></li><li class="tab"><a href="#leetcode-783-solution-2">Iteration</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-783-solution-1"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">minDiffInBST</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>, prev = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="title function_">dfs</span>(root.<span class="property">left</span>);</span><br><span class="line">            <span class="keyword">if</span> (prev != -<span class="number">1</span>)</span><br><span class="line">                ans = <span class="title class_">Math</span>.<span class="title function_">min</span>(ans, root.<span class="property">val</span> - prev);</span><br><span class="line">            prev = root.<span class="property">val</span>;</span><br><span class="line">            <span class="title function_">dfs</span>(root.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">dfs</span>(root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-783-solution-2"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">minDiffInBST</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>, prev = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> stk = [];</span><br><span class="line">    <span class="keyword">while</span> (stk.<span class="property">length</span> &gt; <span class="number">0</span> || root) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root) &#123;</span><br><span class="line">            stk.<span class="title function_">push</span>(root);</span><br><span class="line">            root = root.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = stk.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (prev != -<span class="number">1</span>)</span><br><span class="line">            ans = <span class="title class_">Math</span>.<span class="title function_">min</span>(ans, root.<span class="property">val</span> - prev);</span><br><span class="line">        prev = root.<span class="property">val</span>;</span><br><span class="line">        root = root.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-first Search</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 795. Number of Subarrays with Bounded Maximum</title>
    <url>/LeetCode/leetcode-795-number-of-subarrays-with-bounded-maximum/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayBoundedMax</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; count = [&amp;](<span class="type">int</span> lower) &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                cnt = num &lt;= lower ? cnt + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                res += cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(right) - <span class="built_in">count</span>(left - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 80. Remove Duplicates from Sorted Array II</title>
    <url>/LeetCode/leetcode-80-remove-duplicates-from-sorted-array-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">2</span>, fast = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[slow - <span class="number">2</span>] != nums[fast]) &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++slow;</span><br><span class="line">            &#125;</span><br><span class="line">            ++fast;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 803. Bricks Falling When Hit</title>
    <url>/LeetCode/leetcode-803-bricks-falling-when-hit/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f, sz;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UnionFind</span>(<span class="type">int</span> n): <span class="built_in">f</span>(n), <span class="built_in">sz</span>(n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sz[fx] &gt; sz[fy])</span><br><span class="line">                <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">            sz[fy] += sz[fx];</span><br><span class="line">            f[fx] = fy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">hitBricks</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; hits)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> R = grid.<span class="built_in">size</span>(), C = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(R * C + <span class="number">1</span>)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; status = grid;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; hits.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            status[hits[i][<span class="number">0</span>]][hits[i][<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; R; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; C; ++c)</span><br><span class="line">                <span class="keyword">if</span> (status[r][c] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r == <span class="number">0</span>)</span><br><span class="line">                        uf.<span class="built_in">merge</span>(R * C, r * C + c);</span><br><span class="line">                    <span class="keyword">if</span> (r &gt; <span class="number">0</span> &amp;&amp; status[r - <span class="number">1</span>][c] == <span class="number">1</span>)</span><br><span class="line">                        uf.<span class="built_in">merge</span>(r * C + c, (r - <span class="number">1</span>) * C + c);</span><br><span class="line">                    <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; status[r][c - <span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">                        uf.<span class="built_in">merge</span>(r * C + c, r * C + c - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; dirs&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(hits.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = hits.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> r = hits[i][<span class="number">0</span>], c = hits[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (grid[r][c] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> prev = uf.<span class="built_in">size</span>(R * C);</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="number">0</span>)</span><br><span class="line">                uf.<span class="built_in">merge</span>(c, R * C);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> nr = r + dirs[j], nc = c + dirs[j + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nr &lt; <span class="number">0</span> || nr &gt;= R || nc &lt; <span class="number">0</span> || nc&gt;= C || status[nr][nc] != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                uf.<span class="built_in">merge</span>(r * C + c, nr * C + nc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> curr = uf.<span class="built_in">size</span>(R * C);</span><br><span class="line">            ans[i] = <span class="built_in">max</span>(<span class="number">0</span>, curr - prev - <span class="number">1</span>);</span><br><span class="line">            status[r][c] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 81. Search in Rotated Sorted Array II</title>
    <url>/LeetCode/leetcode-81-search-in-rotated-sorted-array-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>] == target;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] == nums[mid]) &#123;</span><br><span class="line">                ++left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[left]) &#123; <span class="comment">// [left, mid] is sorted.</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid])</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// [mid, right] is sorted.</span></span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 810. Chalkboard XOR Game</title>
    <url>/LeetCode/leetcode-810-chalkboard-xor-game/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">xorGame</span> = (<span class="params">nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (nums.<span class="property">length</span> &amp; <span class="number">1</span>) === <span class="number">0</span> || </span><br><span class="line">        nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a ^ b, <span class="number">0</span>) === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 83. Remove Duplicates from Sorted List</title>
    <url>/LeetCode/leetcode-83-remove-duplicates-from-sorted-list/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-83-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-83-solution-1">Iteration</a></li><li class="tab"><a href="#leetcode-83-solution-2">Recursion</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-83-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr-&gt;next)</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;val == curr-&gt;next-&gt;val)</span><br><span class="line">                curr-&gt;next = curr-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-83-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">while</span> (head-&gt;next &amp;&amp; head-&gt;next-&gt;val == head-&gt;val)</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        head-&gt;next = <span class="built_in">deleteDuplicates</span>(head-&gt;next);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 82. Remove Duplicates from Sorted List II</title>
    <url>/LeetCode/leetcode-82-remove-duplicates-from-sorted-list-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-82-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-82-solution-1">Iteration</a></li><li class="tab"><a href="#leetcode-82-solution-2">Recursion</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-82-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* curr = dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (curr-&gt;next &amp;&amp; curr-&gt;next-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;next-&gt;val == curr-&gt;next-&gt;next-&gt;val) &#123;</span><br><span class="line">                <span class="type">int</span> x = curr-&gt;next-&gt;val;</span><br><span class="line">                curr-&gt;next = curr-&gt;next-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">while</span>(curr-&gt;next &amp;&amp; curr-&gt;next-&gt;val == x)</span><br><span class="line">                    curr-&gt;next = curr-&gt;next-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr = curr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-82-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;val != head-&gt;next-&gt;val) &#123;</span><br><span class="line">            head-&gt;next = <span class="built_in">deleteDuplicates</span>(head-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x = head-&gt;val;</span><br><span class="line">        head = head-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == x)</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">deleteDuplicates</span>(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 830. Positions of Large Groups</title>
    <url>/LeetCode/leetcode-830-positions-of-large-groups/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">largeGroupPositions</span>(string s) &#123;</span><br><span class="line">        <span class="type">char</span> prev = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">-1</span>, i = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != prev) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - start &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;start, i - <span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                prev = c;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i - start &gt;= <span class="number">3</span>)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(vector&lt;<span class="type">int</span>&gt;&#123;start, i - <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 832. Flipping an Image</title>
    <url>/LeetCode/leetcode-832-flipping-an-image/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">flipAndInvertImage</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; A) &#123;</span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][left] == A[i][right]) &#123;</span><br><span class="line">                    A[i][left] ^= <span class="number">1</span>;</span><br><span class="line">                    A[i][right] ^= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++left;</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left == right)</span><br><span class="line">                A[i][left] ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 839. Similar String Groups</title>
    <url>/LeetCode/leetcode-839-similar-string-groups/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> setCount; <span class="comment">// count of current connected components</span></span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> _n): <span class="built_in">n</span>(_n), <span class="built_in">setCount</span>(_n), <span class="built_in">f</span>(_n), <span class="built_in">size</span>(_n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (size[x] &lt; size[y])</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        f[y] = x;</span><br><span class="line">        size[x] += size[y];</span><br><span class="line">        --setCount;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">connected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">const</span> string &amp;a, <span class="type">const</span> string &amp;b, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != b[i])</span><br><span class="line">                <span class="keyword">if</span> (++num &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSimilarGroups</span><span class="params">(vector&lt;string&gt; &amp;strs)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = strs.<span class="built_in">size</span>(), m = strs[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uf.<span class="built_in">connected</span>(i, j)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(strs[i], strs[j], m))</span><br><span class="line">                    uf._union(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.setCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 84. Largest Rectangle in Histogram</title>
    <url>/LeetCode/leetcode-84-largest-rectangle-in-histogram/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestRectangleArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heights.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        heights.<span class="built_in">insert</span>(heights.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">        heights.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; heights.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (heights[i] &lt; heights[s.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="type">int</span> h = heights[s.<span class="built_in">top</span>()]; s.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> w = i - s.<span class="built_in">top</span>() - <span class="number">1</span>;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, h * w);</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 842. Split Array into Fibonacci Sequence</title>
    <url>/LeetCode/leetcode-842-split-array-into-fibonacci-sequence/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-842-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-842-solution-1">Java</a></li><li class="tab"><a href="#leetcode-842-solution-2">Cpp</a></li><li class="tab"><a href="#leetcode-842-solution-3">Python</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-842-solution-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">splitIntoFibonacci</span><span class="params">(String S)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtrack(S, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">0</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(String S, <span class="type">int</span> index, <span class="type">int</span> sum, <span class="type">int</span> prev, List&lt;Integer&gt; ans)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == S.length())</span><br><span class="line">            <span class="keyword">return</span> ans.size() &gt;= <span class="number">3</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currLong</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; S.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; index &amp;&amp; S.charAt(index) == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            currLong = currLong * <span class="number">10</span> + S.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (currLong &gt; Integer.MAX_VALUE) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> (<span class="type">int</span>) currLong;</span><br><span class="line">            <span class="keyword">if</span> (ans.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curr &lt; sum) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (curr &gt; sum) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(curr);</span><br><span class="line">            <span class="keyword">if</span> (backtrack(S, i + <span class="number">1</span>, prev + curr, curr, ans))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            ans.remove(ans.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-842-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">splitIntoFibonacci</span><span class="params">(string S)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> len = S.<span class="built_in">size</span>();</span><br><span class="line">        function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; backtrack = [&amp;](<span class="type">int</span> index, <span class="type">int</span> sum, <span class="type">int</span> prev) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == len) &#123;</span><br><span class="line">                <span class="keyword">return</span> ans.<span class="built_in">size</span>() &gt;= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> curr = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; index &amp;&amp; S[index] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                curr = curr * <span class="number">10</span> + S[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (curr &gt; INT_MAX) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (curr &lt; sum) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (curr &gt; sum) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(curr);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">backtrack</span>(i + <span class="number">1</span>, prev + curr, curr))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                ans.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">backtrack</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-842-solution-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">splitIntoFibonacci</span>(<span class="params">self, S: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">index: <span class="built_in">int</span></span>):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="built_in">len</span>(S):</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">len</span>(ans) &gt;= <span class="number">3</span></span><br><span class="line">            curr = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index, <span class="built_in">len</span>(S)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; index <span class="keyword">and</span> S[index] == <span class="string">&quot;0&quot;</span>: <span class="keyword">break</span></span><br><span class="line">                curr = curr * <span class="number">10</span> + <span class="built_in">ord</span>(S[i]) - <span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> curr &gt; <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(ans) &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> curr &lt; ans[-<span class="number">2</span>] + ans[-<span class="number">1</span>]: <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> curr &gt; ans[-<span class="number">2</span>] + ans[-<span class="number">1</span>]: <span class="keyword">break</span></span><br><span class="line">                ans.append(curr)</span><br><span class="line">                <span class="keyword">if</span> backtrack(i + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                ans.pop()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        backtrack(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>String</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 86. Partition List</title>
    <url>/LeetCode/leetcode-86-partition-list/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode* smallHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* smallCurr = smallHead;</span><br><span class="line">        ListNode* largeHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* largeCurr = largeHead;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;val &lt; x) &#123;</span><br><span class="line">                smallCurr-&gt;next = head;</span><br><span class="line">                smallCurr = smallCurr-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                largeCurr-&gt;next = head;</span><br><span class="line">                largeCurr = largeCurr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        smallCurr-&gt;next = largeHead-&gt;next;</span><br><span class="line">        largeCurr-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> smallHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 85. Maximal Rectangle</title>
    <url>/LeetCode/leetcode-85-maximal-rectangle/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-85-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-85-solution-1">Optimized Brute Force</a></li><li class="tab"><a href="#leetcode-85-solution-2">Stack</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-85-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalRectangle</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> rows = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (rows == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> cols = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">left</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cols, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; rows; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; cols; ++c)</span><br><span class="line">                <span class="keyword">if</span> (matrix[r][c] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                    left[r][c] = (c == <span class="number">0</span> ? <span class="number">0</span> : left[r][c - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; rows; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; cols; ++c)</span><br><span class="line">                <span class="keyword">if</span> (matrix[r][c] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> width = left[r][c];</span><br><span class="line">                    <span class="type">int</span> area = width;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = r - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k) &#123;</span><br><span class="line">                        width = <span class="built_in">min</span>(width, left[k][c]);</span><br><span class="line">                        area = <span class="built_in">max</span>(area, width * (r - k + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, area);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-85-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalRectangle</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> rows = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (rows == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> cols = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">left</span>(rows, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(cols, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; rows; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; cols; ++c)</span><br><span class="line">                <span class="keyword">if</span> (matrix[r][c] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                    left[r][c] = (c == <span class="number">0</span> ? <span class="number">0</span> : left[r][c - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; cols; ++c) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">up</span><span class="params">(rows, <span class="number">0</span>)</span>, <span class="title">down</span><span class="params">(rows, <span class="number">0</span>)</span></span>;</span><br><span class="line">            stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; rows; ++r) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; left[s.<span class="built_in">top</span>()][c] &gt;= left[r][c])</span><br><span class="line">                    s.<span class="built_in">pop</span>();</span><br><span class="line">                up[r] = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">push</span>(r);</span><br><span class="line">            &#125;</span><br><span class="line">            s = <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> r = rows - <span class="number">1</span>; r &gt;= <span class="number">0</span>; --r) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; left[s.<span class="built_in">top</span>()][c] &gt;= left[r][c])</span><br><span class="line">                    s.<span class="built_in">pop</span>();</span><br><span class="line">                down[r] = s.<span class="built_in">empty</span>() ? rows : s.<span class="built_in">top</span>();</span><br><span class="line">                s.<span class="built_in">push</span>(r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; rows; ++r) &#123;</span><br><span class="line">                <span class="type">int</span> height = down[r] - up[r] - <span class="number">1</span>;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, height * left[r][c]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 860. Lemonade Change</title>
    <url>/LeetCode/leetcode-860-lemonade-change/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lemonadeChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bills)</span> </span>&#123;\</span><br><span class="line">        <span class="type">int</span> five = <span class="number">0</span>, ten = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> bill : bills) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bill == <span class="number">5</span>) &#123;</span><br><span class="line">                ++five;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bill == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--five &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                ++ten;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (five &gt; <span class="number">0</span> &amp;&amp; ten &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    --five;</span><br><span class="line">                    --ten;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (five &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                    five -= <span class="number">3</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 867. Transpose Matrix</title>
    <url>/LeetCode/leetcode-867-transpose-matrix/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">transpose</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">int</span> R = matrix.<span class="built_in">size</span>(), C = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(C, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(R));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; R; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; C; ++c)</span><br><span class="line">                ans[c][r] = matrix[r][c];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 87. Scramble String</title>
    <url>/LeetCode/leetcode-87-scramble-string/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> memo[<span class="number">30</span>][<span class="number">30</span>][<span class="number">31</span>]; <span class="comment">// -1 as false, 1 as true, 0 as uncalculated.</span></span><br><span class="line">    string s1, s2;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkIfSimilar</span><span class="params">(<span class="type">int</span> i1, <span class="type">int</span> i2, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; freq;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = i1; i &lt; i1 + len; ++i)</span><br><span class="line">            ++freq[s1[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = i2; i &lt; i2 + len; ++i)</span><br><span class="line">            <span class="keyword">if</span> (--freq[s2[i]] &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i1, <span class="type">int</span> i2, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (memo[i1][i2][len])</span><br><span class="line">            <span class="keyword">return</span> memo[i1][i2][len] == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.<span class="built_in">substr</span>(i1, len) == s2.<span class="built_in">substr</span>(i2, len)) &#123;</span><br><span class="line">            memo[i1][i2][len] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">checkIfSimilar</span>(i1, i2, len)) &#123;</span><br><span class="line">            memo[i1][i2][len] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">dfs</span>(i1, i2, i) &amp;&amp; <span class="built_in">dfs</span>(i1 + i, i2 + i, len - i))</span><br><span class="line">                || (<span class="built_in">dfs</span>(i1, i2 + len - i, i) &amp;&amp; <span class="built_in">dfs</span>(i1 + i, i2, len - i))) &#123;</span><br><span class="line">                memo[i1][i2][len] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i1][i2][len] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isScramble</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(memo, <span class="number">0</span>, <span class="built_in">sizeof</span>(memo));</span><br><span class="line">        <span class="keyword">this</span>-&gt;s1 = s1;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s2 = s2;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, s1.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 872. Leaf-Similar Trees</title>
    <url>/LeetCode/leetcode-872-leaf-similar-trees/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">leafSimilar</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; seq1, seq2;</span><br><span class="line">        <span class="built_in">dfs</span>(root1, seq1);</span><br><span class="line">        <span class="built_in">dfs</span>(root2, seq2);</span><br><span class="line">        <span class="keyword">return</span> seq1 == seq2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; seq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                seq.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(root-&gt;left, seq);</span><br><span class="line">                <span class="built_in">dfs</span>(root-&gt;right, seq);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 88. Merge Sorted Array</title>
    <url>/LeetCode/leetcode-88-merge-sorted-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>, k = nums1.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || nums1[i] &lt; nums2[j])</span><br><span class="line">                nums1[k--] = nums2[j--];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums1[k--] = nums1[i--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 891. Sum of Subsequence Widths</title>
    <url>/LeetCode/leetcode-891-sum-of-subsequence-widths/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100010</span>, MOD = (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[] p = <span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; ++i) p[i] = p[i - <span class="number">1</span>] * <span class="number">2</span> % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumSubseqWidths</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ans += (p[i] * nums[i]) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">            ans -= (p[n - i - <span class="number">1</span>] * nums[i]) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// https://leetcode.cn/problems/sum-of-subsequence-widths/solutions/1977822/by-ac_oier-6tyk/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Array</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 888. Fair Candy Swap</title>
    <url>/LeetCode/leetcode-888-fair-candy-swap/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fairCandySwap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sumA = <span class="built_in">accumulate</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> sumB = <span class="built_in">accumulate</span>(B.<span class="built_in">begin</span>(), B.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> delta = (sumA - sumB) / <span class="number">2</span>;</span><br><span class="line">        <span class="function">unordered_set&lt;<span class="type">int</span>&gt; <span class="title">rec</span><span class="params">(A.begin(), A.end())</span></span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; y : B) &#123;</span><br><span class="line">            <span class="type">int</span> x = y + delta;</span><br><span class="line">            <span class="keyword">if</span> (rec.<span class="built_in">count</span>(x)) &#123;</span><br><span class="line">                ans = vector&lt;<span class="type">int</span>&gt;&#123;x, y&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 896. Monotonic Array</title>
    <url>/LeetCode/leetcode-896-monotonic-array/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMonotonic</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">bool</span> inc = <span class="literal">true</span>, dec = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; A[i + <span class="number">1</span>]) inc = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; A[i + <span class="number">1</span>]) dec = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inc || dec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 897. Increasing Order Search Tree</title>
    <url>/LeetCode/leetcode-897-increasing-order-search-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode *dummyHead, *curr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        dummyHead = <span class="keyword">new</span> <span class="built_in">TreeNode</span>();</span><br><span class="line">        curr = dummyHead;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(root-&gt;left);</span><br><span class="line">            curr-&gt;right = root;</span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            curr = root;</span><br><span class="line">            <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Depth-first Search</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 90. Subsets II</title>
    <url>/LeetCode/leetcode-90-subsets-ii/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; cur;</span><br><span class="line">            <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">            <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">            <span class="built_in">backtrack</span>(ans, cur, nums, <span class="number">0</span>, visited);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; ans, vector&lt;<span class="type">int</span>&gt;&amp; cur, vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, vector&lt;<span class="type">bool</span>&gt;&amp; visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">0</span> || nums[start] != nums[start - <span class="number">1</span>] || visited[start - <span class="number">1</span>]) &#123;</span><br><span class="line">            cur.<span class="built_in">emplace_back</span>(nums[start]);</span><br><span class="line">            visited[start] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">backtrack</span>(ans, cur, nums, start + <span class="number">1</span>, visited);</span><br><span class="line">            visited[start] = <span class="literal">false</span>;</span><br><span class="line">            cur.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">backtrack</span>(ans, cur, nums, start + <span class="number">1</span>, visited);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 91. Decode Ways</title>
    <url>/LeetCode/leetcode-91-decode-ways/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-91-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-91-solution-1">DP</a></li><li class="tab"><a href="#leetcode-91-solution-2">DP (Space Optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-91-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                dp[i] += dp[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; s[i - <span class="number">2</span>] != <span class="string">&#x27;0&#x27;</span> &amp;&amp; ((s[i - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) &lt;= <span class="number">26</span>))</span><br><span class="line">                dp[i] += dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-91-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// a = dp[i - 2], b = dp[i - 1], c = dp[i]</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>, c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i - <span class="number">1</span>] != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                c += b;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; s[i - <span class="number">2</span>] != <span class="string">&#x27;0&#x27;</span> &amp;&amp; ((s[i - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>) &lt;= <span class="number">26</span>))</span><br><span class="line">                c += a;</span><br><span class="line">            <span class="built_in">tie</span>(a, b) = &#123;b, c&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 904. Fruit Into Baskets</title>
    <url>/LeetCode/leetcode-904-fruit-into-baskets/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalFruit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; fruits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = fruits.<span class="built_in">size</span>(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, cnt = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++freq[fruits[right]] == <span class="number">1</span>) ++cnt;</span><br><span class="line">            <span class="keyword">while</span> (cnt &gt; <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> (--freq[fruits[left++]] == <span class="number">0</span>) --cnt;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 930. Binary Subarrays With Sum</title>
    <url>/LeetCode/leetcode-930-binary-subarrays-with-sum/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-930-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-930-solution-1">Prefix Sum</a></li><li class="tab"><a href="#leetcode-930-solution-2">Sliding Window</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-930-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> cnt[<span class="number">30001</span>];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarraysWithSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> goal)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, (nums.<span class="built_in">size</span>() + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            <span class="keyword">if</span> (sum - goal &gt;= <span class="number">0</span>) ans += cnt[sum - goal];</span><br><span class="line">            ++cnt[sum];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-930-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarraysWithSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> goal)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l1 = <span class="number">0</span>, l2 = <span class="number">0</span>, sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>, r = <span class="number">0</span>; r &lt; nums.<span class="built_in">size</span>(); ++r) &#123;</span><br><span class="line">            sum1 += nums[r];</span><br><span class="line">            sum2 += nums[r];</span><br><span class="line">            <span class="keyword">while</span> (sum1 &gt; goal) sum1 -= nums[l1++];</span><br><span class="line">            <span class="keyword">while</span> (l2 &lt;= r &amp;&amp; sum2 &gt;= goal) sum2 -= nums[l2++];</span><br><span class="line">            ans += l2 - l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
        <tag>Prefix Sum</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 92. Reverse Linked List II</title>
    <url>/LeetCode/leetcode-92-reverse-linked-list-ii/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-92-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-92-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-92-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-92-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* prev = dummyHead;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; left; ++i)</span><br><span class="line">            prev = prev-&gt;next;</span><br><span class="line">        ListNode *conn = prev, *tail = prev-&gt;next ,*curr = prev-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (i++ &lt;= right) &#123;</span><br><span class="line">            ListNode* next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn) conn-&gt;next = prev;</span><br><span class="line">        <span class="keyword">else</span> dummyHead-&gt;next = prev;</span><br><span class="line">        tail-&gt;next = curr;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-92-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* dummyHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* prev = dummyHead;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; left; ++i)</span><br><span class="line">            prev = prev-&gt;next;</span><br><span class="line">        ListNode *curr = prev-&gt;next, *next;</span><br><span class="line">        <span class="keyword">while</span> (i++ &lt; right) &#123;</span><br><span class="line">            next = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = next-&gt;next;</span><br><span class="line">            next-&gt;next = prev-&gt;next;</span><br><span class="line">            prev-&gt;next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 932. Beautiful Array</title>
    <url>/LeetCode/leetcode-932-beautiful-array/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-947-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-947-solution-1">Iteration</a></li><li class="tab"><a href="#leetcode-947-solution-2">Recursion</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-947-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">beautifulArray</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (ans.<span class="built_in">size</span>() &lt; n) &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : ans) <span class="keyword">if</span> (i * <span class="number">2</span> - <span class="number">1</span> &lt;= n) tmp.<span class="built_in">push_back</span>(i * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : ans) <span class="keyword">if</span> (i * <span class="number">2</span> &lt;= n) tmp.<span class="built_in">push_back</span>(i * <span class="number">2</span>);</span><br><span class="line">            ans = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-947-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">beautifulArray</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">count</span>(n)) <span class="keyword">return</span> m[n];</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x : <span class="built_in">beautifulArray</span>((n + <span class="number">1</span>) / <span class="number">2</span>)) <span class="comment">// odds.</span></span><br><span class="line">                ans[i++] = <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x : <span class="built_in">beautifulArray</span>(n / <span class="number">2</span>)) <span class="comment">// evens.</span></span><br><span class="line">                ans[i++] = <span class="number">2</span> * x;</span><br><span class="line">        &#125;</span><br><span class="line">        m[n] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>Reference: <a href="https://leetcode.com/problems/beautiful-array/discuss/186679/Odd-%2B-Even-Pattern-O(N)">Odd + Even Pattern, O(N) - LeetCode Discuss</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Divide and Conquer</tag>
        <tag>Array</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 947. Most Stones Removed with Same Row or Column</title>
    <url>/LeetCode/leetcode-947-most-stones-removed-with-same-row-or-column/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-947-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-947-solution-1">DFS</a></li><li class="tab"><a href="#leetcode-947-solution-2">DFS with Optimized Graph-Building</a></li><li class="tab"><a href="#leetcode-947-solution-3">Union Find with Optimized Graph-Building</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-947-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeStones</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">edges</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span> ((stones[i][<span class="number">0</span>] == stones[j][<span class="number">0</span>]) || (stones[i][<span class="number">1</span>] == stones[j][<span class="number">1</span>]))</span><br><span class="line">                    edges[i].<span class="built_in">emplace_back</span>(j);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n)</span></span>;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">            visited[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> y : edges[x])</span><br><span class="line">                <span class="keyword">if</span> (!visited[y])</span><br><span class="line">                    <span class="built_in">dfs</span>(y);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> n - cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-947-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeStones</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            m[stones[i][<span class="number">0</span>]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            m[stones[i][<span class="number">1</span>] + <span class="number">10000</span>].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">edges</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [_, vec] : m) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> k = vec.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; ++i) &#123;</span><br><span class="line">                edges[vec[i - <span class="number">1</span>]].<span class="built_in">emplace_back</span>(vec[i]);</span><br><span class="line">                edges[vec[i]].<span class="built_in">emplace_back</span>(vec[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n)</span></span>;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> x) &#123;</span><br><span class="line">            visited[x] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> y : edges[x])</span><br><span class="line">                <span class="keyword">if</span> (!visited[y])</span><br><span class="line">                    <span class="built_in">dfs</span>(y);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> n - cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-947-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DisjointSetUnion</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; f, rank;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (f.<span class="built_in">find</span>(x) == f.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            f[x] = x;</span><br><span class="line">            rank[x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unionSet</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rank[fx] &gt; rank[fy])</span><br><span class="line">                <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">            rank[fy] += rank[fx];</span><br><span class="line">            f[fx] = fy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfConnectedComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, fa] : f)</span><br><span class="line">            <span class="keyword">if</span> (x == fa)</span><br><span class="line">                ++cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeStones</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;stones)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = stones.<span class="built_in">size</span>();</span><br><span class="line">        DisjointSetUnion dsu;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            dsu.<span class="built_in">unionSet</span>(stones[i][<span class="number">0</span>], stones[i][<span class="number">1</span>] + <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> n - dsu.<span class="built_in">numberOfConnectedComponent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 959. Regions Cut By Slashes</title>
    <url>/LeetCode/leetcode-959-regions-cut-by-slashes/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line">    <span class="type">int</span> setCount; <span class="comment">// count of current connected components</span></span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> n): <span class="built_in">setCount</span>(n), <span class="built_in">f</span>(n), <span class="built_in">size</span>(n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f[x] == x ? x : f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> _union(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size[fx] &lt; size[fy])</span><br><span class="line">                <span class="built_in">swap</span>(fx, fy);</span><br><span class="line">            f[fy] = fx;</span><br><span class="line">            size[fx] += size[fy];</span><br><span class="line">            --setCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">regionsBySlashes</span><span class="params">(vector&lt;string&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(n * n * <span class="number">4</span>)</span></span>; <span class="comment">// east 0, south 1, west 2, north 3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; n; ++r)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; n; ++c) &#123;</span><br><span class="line">                <span class="type">int</span> idx = r * n + c;</span><br><span class="line">                <span class="type">int</span> easternIndex = idx * <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> bottom = idx + n;</span><br><span class="line">                    uf._union(easternIndex + <span class="number">1</span>, bottom * <span class="number">4</span> + <span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> right = idx + <span class="number">1</span>;</span><br><span class="line">                    uf._union(easternIndex, right * <span class="number">4</span> + <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    uf._union(easternIndex, easternIndex + <span class="number">1</span>);</span><br><span class="line">                    uf._union(easternIndex + <span class="number">2</span>, easternIndex + <span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grid[r][c] == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                    uf._union(easternIndex, easternIndex + <span class="number">3</span>);</span><br><span class="line">                    uf._union(easternIndex + <span class="number">1</span>, easternIndex + <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    uf._union(easternIndex, easternIndex + <span class="number">1</span>);</span><br><span class="line">                    uf._union(easternIndex + <span class="number">1</span>, easternIndex + <span class="number">2</span>);</span><br><span class="line">                    uf._union(easternIndex + <span class="number">2</span>, easternIndex + <span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> uf.setCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>Graph</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 978. Longest Turbulent Subarray</title>
    <url>/LeetCode/leetcode-978-longest-turbulent-subarray/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-978-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-978-solution-1">Sliding Window</a></li><li class="tab"><a href="#leetcode-978-solution-2">DP</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-978-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxTurbulenceSize</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> preSign = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">1</span>, ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> sign = arr[right] - arr[right - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (sign == <span class="number">0</span>) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">                left = right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((sign &gt; <span class="number">0</span> &amp;&amp; preSign &gt; <span class="number">0</span>) || (sign &lt; <span class="number">0</span> &amp;&amp; preSign &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">                left = right - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            preSign = sign;</span><br><span class="line">            ++right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(ans, right - left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-978-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxTurbulenceSize</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> up = <span class="number">1</span>, down = <span class="number">1</span>, ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i + <span class="number">1</span>] &gt; arr[i]) &#123;</span><br><span class="line">                up = down + <span class="number">1</span>;</span><br><span class="line">                down = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i + <span class="number">1</span>] &lt; arr[i]) &#123;</span><br><span class="line">                down = up + <span class="number">1</span>;</span><br><span class="line">                up = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                up = down = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(up, down));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Array</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 981. Time Based Key-Value Store</title>
    <url>/LeetCode/leetcode-981-time-based-key-value-store/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeMap</span> &#123;</span><br><span class="line">    unordered_map&lt;string, vector&lt;pair&lt;<span class="type">int</span>, string&gt;&gt;&gt; m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TimeMap</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(string key, string value, <span class="type">int</span> timestamp)</span> </span>&#123;</span><br><span class="line">        m[key].<span class="built_in">emplace_back</span>(timestamp, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">get</span><span class="params">(string key, <span class="type">int</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;v = m[key];</span><br><span class="line">        <span class="function">pair&lt;<span class="type">int</span>, string&gt; <span class="title">p</span><span class="params">(timestamp, string(&#123;<span class="number">127</span>&#125;))</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p);</span><br><span class="line">        <span class="keyword">return</span> it == v.<span class="built_in">begin</span>() ? <span class="string">&quot;&quot;</span> : (it - <span class="number">1</span>)-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>String</tag>
        <tag>Hash Table</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 989. Add to Array-Form of Integer</title>
    <url>/LeetCode/leetcode-989-add-to-array-form-of-integer/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-989-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-989-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-989-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-989-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">addToArrayForm</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> sum = A[i] + K % <span class="number">10</span>;</span><br><span class="line">            K /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                K++;</span><br><span class="line">                sum -= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; K &gt; <span class="number">0</span>; K /= <span class="number">10</span>)</span><br><span class="line">            ans.<span class="built_in">push_back</span>(K % <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-989-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">addToArrayForm</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = A.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span> || K &gt; <span class="number">0</span>; --i, K /= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">                K += A[i];</span><br><span class="line">            ans.<span class="built_in">push_back</span>(K % <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 992. Subarrays with K Different Integers</title>
    <url>/LeetCode/leetcode-992-subarrays-with-k-different-integers/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// get the count of subarrays that has at most k distinct integers.</span></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; atMostDistinct = [&amp;](<span class="type">int</span> k) &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">freq</span><span class="params">(n + <span class="number">1</span>)</span></span>; <span class="comment">// given &quot;1 &lt;= nums[i] &lt;= nums.length&quot;.</span></span><br><span class="line">            <span class="comment">// cnt is the count of distinct integers within [left, right].</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, cnt = <span class="number">0</span>; right &lt; n; ++right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (++freq[nums[right]] == <span class="number">1</span>) ++cnt;</span><br><span class="line">                <span class="keyword">while</span> (cnt &gt; k)</span><br><span class="line">                    <span class="keyword">if</span> (--freq[nums[left++]] == <span class="number">0</span>) --cnt;</span><br><span class="line">                <span class="comment">// add the count of new subarrays that ends with nums[right].</span></span><br><span class="line">                res += right - left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">atMostDistinct</span>(k) - <span class="built_in">atMostDistinct</span>(k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
        <tag>Hash Table</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 993. Cousins in Binary Tree</title>
    <url>/LeetCode/leetcode-993-cousins-in-binary-tree/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCousins</span><span class="params">(TreeNode* root, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">        <span class="built_in">preorder</span>(root, <span class="literal">nullptr</span>, y);</span><br><span class="line">        <span class="keyword">return</span> prex != prey &amp;&amp; dx == dy;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> dx = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> dy = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    TreeNode* prex;</span><br><span class="line">    TreeNode* prey;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root, TreeNode* pre, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == x) &#123;</span><br><span class="line">            prex = pre;</span><br><span class="line">            dx = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == y) &#123;</span><br><span class="line">            prey = pre;</span><br><span class="line">            dy = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dx != <span class="number">-1</span> &amp;&amp; dy != <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;left, root, d + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">preorder</span>(root-&gt;right, root, d + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Breadth-first Search</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 995. Minimum Number of K Consecutive Bit Flips</title>
    <url>/LeetCode/leetcode-995-minimum-number-of-k-consecutive-bit-flips/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-995-solution"><ul class="nav-tabs"><li class="tab active"><a href="#leetcode-995-solution-1">Solution 1</a></li><li class="tab"><a href="#leetcode-995-solution-2">Solution 2</a></li><li class="tab"><a href="#leetcode-995-solution-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="leetcode-995-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minKBitFlips</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>(), flipped = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">isFlipped</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= K)</span><br><span class="line">                flipped ^= isFlipped[i - K];</span><br><span class="line">            <span class="keyword">if</span> (flipped == A[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + K &gt; n)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                isFlipped[i] = <span class="number">1</span>;</span><br><span class="line">                flipped ^= <span class="number">1</span>;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-995-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minKBitFlips</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>(), flipped = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; isFlipped;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= K) &#123;</span><br><span class="line">                flipped ^= isFlipped.<span class="built_in">front</span>();</span><br><span class="line">                isFlipped.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flipped == A[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + K &gt; n)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                isFlipped.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">                flipped ^= <span class="number">1</span>;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                isFlipped.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="leetcode-995-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minKBitFlips</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// &quot;cur&quot; is the count of flipping times within current sliding window.</span></span><br><span class="line">        <span class="type">int</span> n = A.<span class="built_in">size</span>(), cur = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= K &amp;&amp; A[i - K] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                --cur;</span><br><span class="line">                A[i - K] += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur % <span class="number">2</span> == A[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + K &gt; n)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                A[i] += <span class="number">2</span>;</span><br><span class="line">                ++cur;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>

<p>Reference: <a href="https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/discuss/238609/JavaC%2B%2BPython-One-Pass-and-O(1)-Space">[Java&#x2F;C++&#x2F;Python] One Pass and O(1) Space - LeetCode Discuss</a>.</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Greedy</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode LCP 07. 传递信息</title>
    <url>/LeetCode/leetcode-lcp-07-%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">numWays</span> = (<span class="params">n, relation, k</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> t = n - <span class="number">1</span>,</span><br><span class="line">        g = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>());</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [u, v] <span class="keyword">of</span> relation)</span><br><span class="line">        g[u].<span class="title function_">push</span>(v);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">u, steps</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (steps == k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (u == t) ++ans;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> g[u])</span><br><span class="line">            <span class="title function_">dfs</span>(v, steps + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>Graph</tag>
        <tag>Breadth-first Search</tag>
        <tag>Depth-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 面试题 17.10. Find Majority Element LCCI</title>
    <url>/LeetCode/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%98-17-10-find-majority-element-lcci/</url>
    <content><![CDATA[<div class="tabs" id="leetcode-17-10-solution"><ul class="nav-tabs"><li class="tab"><a href="#leetcode-17-10-solution-1">Bit Manipulation</a></li><li class="tab active"><a href="#leetcode-17-10-solution-2">Boyer-Moore Majority Voting Algorithm</a></li></ul><div class="tab-content"><div class="tab-pane" id="leetcode-17-10-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.length, freq = (n + <span class="number">1</span>) / <span class="number">2</span>, cnt[] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">32</span>], ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">                <span class="keyword">if</span> ((num &gt;&gt; i &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">                    ++cnt[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (cnt[i] &gt;= freq)</span><br><span class="line">                ans ^= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            <span class="keyword">if</span> ((ans ^ num) == <span class="number">0</span>)</span><br><span class="line">                --freq;</span><br><span class="line">        <span class="keyword">return</span> freq &gt; <span class="number">0</span> ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="leetcode-17-10-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.length, freq = (n + <span class="number">1</span>) / <span class="number">2</span>, candidate = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">0</span>) candidate = num;</span><br><span class="line">            <span class="keyword">if</span> (num == candidate) ++cnt;</span><br><span class="line">            <span class="keyword">else</span> --cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums)</span><br><span class="line">            <span class="keyword">if</span> (num == candidate)</span><br><span class="line">                ++cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= freq ? candidate : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Counting</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1047 [NOIP2005 普及组] 校门外的树</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1047-noip2005-%E6%99%AE%E5%8F%8A%E7%BB%84-%E6%A0%A1%E9%97%A8%E5%A4%96%E7%9A%84%E6%A0%91/</url>
    <content><![CDATA[<div class="tabs" id="luogu-p1047-solution"><ul class="nav-tabs"><li class="tab active"><a href="#luogu-p1047-solution-1">Solution 1</a></li><li class="tab"><a href="#luogu-p1047-solution-2">Solution 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="luogu-p1047-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> l, m, u, v, tree[<span class="number">10001</span>] = &#123;<span class="number">0</span>&#125;, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="keyword">while</span> (u &lt;= v)</span><br><span class="line">            tree[u++] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= l; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tree[i] == <span class="number">0</span>)</span><br><span class="line">            ++cnt;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1047-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> l, m, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        cin &gt;&gt; v[i][<span class="number">0</span>] &gt;&gt; v[i][<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(v), <span class="built_in">end</span>(v));</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= v[j][<span class="number">1</span>]) &#123;</span><br><span class="line">            i = <span class="built_in">max</span>(i, v[j][<span class="number">0</span>]);</span><br><span class="line">            cnt += v[j][<span class="number">1</span>] - i + <span class="number">1</span>;</span><br><span class="line">            i = v[j][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l + <span class="number">1</span> - cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>Simulation</tag>
        <tag>NOIP 普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1046 [NOIP2005 普及组] 陶陶摘苹果</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1046-noip2005-%E6%99%AE%E5%8F%8A%E7%BB%84-%E9%99%B6%E9%99%B6%E6%91%98%E8%8B%B9%E6%9E%9C/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> h[<span class="number">10</span>], t, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        cin &gt;&gt; h[i];</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    t += <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (h[i] &lt;= t)</span><br><span class="line">            ++cnt;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>Simulation</tag>
        <tag>NOIP 普及组</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1273 有线电视网</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1273-%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3001</span>, M = <span class="number">3000</span>;</span><br><span class="line"><span class="type">int</span> u, x, ww, h[N], w[M], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> n, m, v[N], f[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, w[idx] = ww, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; n - m) &#123;</span><br><span class="line">        f[x][<span class="number">1</span>] = v[x];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[x]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> y = e[i];</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">dfs</span>(y);</span><br><span class="line">        sum += s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = sum; j; --j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= s; ++k)</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= k) f[x][j] = <span class="built_in">max</span>(f[x][j], f[x][j - k] + f[y][k] - w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-0x3f3f3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n - m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= x; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;ww);</span><br><span class="line">            <span class="built_in">add</span>(i, u, ww);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) f[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = m; i; --i)</span><br><span class="line">        <span class="keyword">if</span> (f[<span class="number">1</span>][i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>递归</tag>
        <tag>树形 DP</tag>
        <tag>Tree</tag>
        <tag>背包</tag>
        <tag>邻接表</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1352 没有上司的舞会</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1352-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6001</span>;</span><br><span class="line"><span class="type">int</span> u, v, r[N], h[N], e[N], ne[N], idx, d[N];</span><br><span class="line"><span class="type">int</span> n, root, f[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[u][<span class="number">1</span>] = r[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;u);</span><br><span class="line">        <span class="built_in">add</span>(u, v);</span><br><span class="line">        ++d[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!d[i]) &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Tree</tag>
        <tag>Searching</tag>
        <tag>记忆化搜索</tag>
        <tag>福建省历届夏令营</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1855 榨取kkksc03</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1855-%E6%A6%A8%E5%8F%96kkksc03/</url>
    <content><![CDATA[<p>今天吃<a href="https://www.zhihu.com/question/593371905">瓜</a>吃得很开心，却发现没什么人能分享的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">201</span>;</span><br><span class="line"><span class="type">int</span> n, m, t, f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, v, w; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v; --j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = t; k &gt;= w; --k)</span><br><span class="line">                f[j][k] = <span class="built_in">max</span>(f[j][k], f[j - v][k - w] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[m][t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1048 [NOIP2005 普及组] 采药</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1048-noip2005-%E6%99%AE%E5%8F%8A%E7%BB%84-%E9%87%87%E8%8D%AF/</url>
    <content><![CDATA[<div class="tabs" id="luogu-p1048-solution"><ul class="nav-tabs"><li class="tab active"><a href="#luogu-p1048-solution-1">DP</a></li><li class="tab"><a href="#luogu-p1048-solution-2">DP (space optimized)</a></li></ul><div class="tab-content"><div class="tab-pane active" id="luogu-p1048-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T, M;</span><br><span class="line"><span class="type">int</span> t[<span class="number">101</span>], v[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        cin &gt;&gt; t[i] &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= T; ++j) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= t[i])</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - <span class="number">1</span>][j - t[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; dp[M][T] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1048-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> T, M;</span><br><span class="line"><span class="type">int</span> t[<span class="number">101</span>], v[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; T &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        cin &gt;&gt; t[i] &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = T; j &gt;= t[i]; --j)</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - t[i]] + v[i]);</span><br><span class="line">    cout &lt;&lt; dp[T] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
        <tag>NOIP 普及组</tag>
        <tag>Knapsack Problem</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1364 医院设置</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1364-%E5%8C%BB%E9%99%A2%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<div class="tabs" id="luogu-p1364-solution"><ul class="nav-tabs"><li class="tab"><a href="#luogu-p1364-solution-1">BFS</a></li><li class="tab"><a href="#luogu-p1364-solution-2">Floyd</a></li><li class="tab"><a href="#luogu-p1364-solution-3">DFS</a></li><li class="tab active"><a href="#luogu-p1364-solution-4">DP</a></li></ul><div class="tab-content"><div class="tab-pane" id="luogu-p1364-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> n, u, v, h[N], w[M], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">bool</span> visited[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> u, s;</span><br><span class="line">    <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> idx, <span class="type">int</span> step) : <span class="built_in">u</span>(idx), <span class="built_in">s</span>(step) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node q[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[idx] = v, ne[idx] = h[u], h[u] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="literal">false</span>, n + <span class="number">1</span>);</span><br><span class="line">    visited[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    q[++tt] = <span class="built_in">node</span>(x, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">        <span class="keyword">auto</span>[u, s] = q[hh++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (visited[v]) <span class="keyword">continue</span>;</span><br><span class="line">            q[++tt] = <span class="built_in">node</span>(v, s + <span class="number">1</span>);</span><br><span class="line">            visited[v] = <span class="literal">true</span>;</span><br><span class="line">            sum += w[v] * s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (u) <span class="built_in">add</span>(i, u), <span class="built_in">add</span>(u, i);</span><br><span class="line">        <span class="keyword">if</span> (v) <span class="built_in">add</span>(i, v), <span class="built_in">add</span>(v, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans = <span class="built_in">min</span>(ans, <span class="built_in">bfs</span>(i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1364-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>, INF = INT_MAX;</span><br><span class="line"><span class="type">int</span> ans = INF;</span><br><span class="line"><span class="type">int</span> d[N][N];</span><br><span class="line"><span class="type">int</span> n, u, v, w[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">fill</span>(d[<span class="number">0</span>], d[<span class="number">0</span>] + N * N, INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (u) d[i][u] = d[u][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (v) d[i][v] = d[v][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (d[i][k] &lt; INF &amp;&amp; d[k][j] &lt; INF)</span><br><span class="line">                    d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span> (i != j)</span><br><span class="line">                sum += w[j] * d[i][j];</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1364-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> n, u, v, h[N], w[M], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">bool</span> visited[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[idx] = v, ne[idx] = h[u], h[u] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = s * w[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; ~i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (visited[v]) <span class="keyword">continue</span>;</span><br><span class="line">        visited[v] = <span class="literal">true</span>;</span><br><span class="line">        sum += <span class="built_in">dfs</span>(v, s + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, (n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (u) <span class="built_in">add</span>(i, u), <span class="built_in">add</span>(u, i);</span><br><span class="line">        <span class="keyword">if</span> (v) <span class="built_in">add</span>(i, v), <span class="built_in">add</span>(v, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visited, <span class="literal">false</span>, n + <span class="number">1</span>);</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(i, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane active" id="luogu-p1364-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> n, u, v, h[N], w[M], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> deep[N], dist[N], sum[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    deep[u] = deep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sum[u] += sum[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        dist[v] = dist[u] + sum[<span class="number">1</span>] - sum[v] - sum[v];</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, dist[v]);</span><br><span class="line">        <span class="built_in">dp</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;w[i], &amp;u, &amp;v);</span><br><span class="line">        sum[i] = w[i];</span><br><span class="line">        <span class="keyword">if</span> (u) <span class="built_in">add</span>(i, u), <span class="built_in">add</span>(u, i);</span><br><span class="line">        <span class="keyword">if</span> (v) <span class="built_in">add</span>(i, v), <span class="built_in">add</span>(v, i);</span><br><span class="line">    &#125;</span><br><span class="line">    deep[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dist[<span class="number">1</span>] += (deep[i] - <span class="number">1</span>) * w[i];</span><br><span class="line">    ans = dist[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>最短路</tag>
        <tag>Tree</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P1908 逆序对</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p1908-%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
    <content><![CDATA[<div class="tabs" id="luogu-p1908-solution"><ul class="nav-tabs"><li class="tab active"><a href="#luogu-p1908-solution-1">Merge Sort</a></li><li class="tab"><a href="#luogu-p1908-solution-2">Segment Tree</a></li><li class="tab"><a href="#luogu-p1908-solution-3">Binary Indexed Tree</a></li><li class="tab"><a href="#luogu-p1908-solution-4">Treap</a></li></ul><div class="tab-content"><div class="tab-pane active" id="luogu-p1908-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500000</span>;</span><br><span class="line"><span class="type">int</span> n, q[N], tmp[N];</span><br><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    LL ans = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[k++] = q[j++];</span><br><span class="line">            ans += mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; ++i, ++j) q[i] = tmp[j];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; q[i];</span><br><span class="line">    cout &lt;&lt; <span class="built_in">merge_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1908-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, v;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].v = tr[u &lt;&lt; <span class="number">1</span>].v + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == tr[u].r) ++tr[u].v;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, pos);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].v;</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) ret = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) ret += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i], b[i] = a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + len + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">        <span class="keyword">if</span> (pos != n) ans += <span class="built_in">query</span>(<span class="number">1</span>, pos + <span class="number">1</span>, n);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, pos);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1908-solution-3"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>;</span><br><span class="line"><span class="type">int</span> n, a[N], b[N], t[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x &lt;= n) &#123;</span><br><span class="line">        ++t[x];</span><br><span class="line">        x += <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        ret += t[x];</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i], b[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[x] == a[y] ? x &gt; y : a[x] &gt; a[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">add</span>(b[i]);</span><br><span class="line">        ans += <span class="built_in">sum</span>(b[i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p1908-solution-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500000</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> val, fix;</span><br><span class="line">    <span class="type">int</span> cnt, siz;</span><br><span class="line">    Node *ls, *rs;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> v) &#123;</span><br><span class="line">        val = v, fix = <span class="built_in">rand</span>();</span><br><span class="line">        ls = rs = <span class="literal">nullptr</span>;</span><br><span class="line">        siz = cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, s;</span><br><span class="line">LL ans;</span><br><span class="line">Node *root;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">siz</span><span class="params">(Node *&amp;k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k ? k-&gt;siz : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node *&amp;k)</span> </span>&#123;</span><br><span class="line">    k-&gt;siz = <span class="built_in">siz</span>(k-&gt;ls) + <span class="built_in">siz</span>(k-&gt;rs) + k-&gt;cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zag</span><span class="params">(Node *&amp;k2)</span> </span>&#123;</span><br><span class="line">    Node *k1 = k2-&gt;rs;</span><br><span class="line">    k2-&gt;rs = k1-&gt;ls;</span><br><span class="line">    k1-&gt;ls = k2;</span><br><span class="line">    <span class="built_in">pushup</span>(k2), <span class="built_in">pushup</span>(k1);</span><br><span class="line">    k2 = k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zig</span><span class="params">(Node *&amp;k2)</span> </span>&#123; </span><br><span class="line">    Node *k1 = k2-&gt;ls;</span><br><span class="line">    k2-&gt;ls = k1-&gt;rs;</span><br><span class="line">    k1-&gt;rs = k2;</span><br><span class="line">    <span class="built_in">pushup</span>(k2), <span class="built_in">pushup</span>(k1);</span><br><span class="line">    k2 = k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Node *&amp;node, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) node = <span class="keyword">new</span> <span class="built_in">Node</span>(x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; node-&gt;val) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(node-&gt;ls, x);</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;ls-&gt;fix &lt; node-&gt;fix) <span class="built_in">zig</span>(node);</span><br><span class="line">        <span class="keyword">else</span> ++node-&gt;siz;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; node-&gt;val) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(node-&gt;rs, x);</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;rs-&gt;fix &lt; node-&gt;fix) <span class="built_in">zag</span>(node);</span><br><span class="line">        <span class="keyword">else</span> ++node-&gt;siz;</span><br><span class="line">    &#125; <span class="keyword">else</span> ++node-&gt;cnt, ++node-&gt;siz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    Node *node = root;</span><br><span class="line">    <span class="keyword">while</span> (node &amp;&amp; node-&gt;val ^ x)</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;val &lt; x) node = node-&gt;rs;</span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            ret += <span class="built_in">siz</span>(node-&gt;rs) + node-&gt;cnt;</span><br><span class="line">            node = node-&gt;ls;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (node &amp;&amp; node-&gt;val == x) <span class="keyword">return</span> ret + <span class="built_in">siz</span>(node-&gt;rs);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        ans += <span class="built_in">query</span>(s);</span><br><span class="line">        <span class="built_in">insert</span>(root, s);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>权值线段树</tag>
        <tag>归并排序</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P2015 二叉苹果树</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p2015-%E4%BA%8C%E5%8F%89%E8%8B%B9%E6%9E%9C%E6%A0%91/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>, M = <span class="number">202</span>;</span><br><span class="line"><span class="type">int</span> u, v, ww, h[N], e[M], ne[M], w[M], idx;</span><br><span class="line"><span class="type">int</span> n, t;</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, w[idx] = ww, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sum += s + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">min</span>(sum, t); j; --j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="built_in">min</span>(s, j - <span class="number">1</span>); k &gt;= <span class="number">0</span>; --k)</span><br><span class="line">                dp[u][j] = <span class="built_in">max</span>(dp[u][j], dp[v][k] + dp[u][j - k - <span class="number">1</span>] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;ww);</span><br><span class="line">        <span class="built_in">add</span>(u, v, ww);</span><br><span class="line">        <span class="built_in">add</span>(v, u, ww);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">1</span>][t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P2014 [CTSC1997]选课</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p2014-ctsc1997-%E9%80%89%E8%AF%BE/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">301</span>, M = <span class="number">302</span>;</span><br><span class="line"><span class="type">int</span> u, v, h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dp[N][M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="type">int</span> s = <span class="built_in">dfs</span>(v);</span><br><span class="line">        sum += s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="built_in">min</span>(m, sum); j; --j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="built_in">min</span>(j, s); ++k)</span><br><span class="line">                dp[u][j] = <span class="built_in">max</span>(dp[u][j], dp[v][k] + dp[u][j - k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    ++m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;dp[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">add</span>(u, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">0</span>][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>Tree</tag>
        <tag>WC/CTSC/集训队</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P2018 消息传递</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p2018-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>, M = <span class="number">2002</span>;</span><br><span class="line"><span class="type">int</span> u, h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> n, ans = N, s[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, idx = <span class="number">0</span>, c[<span class="number">999</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        c[idx++] = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(c, c + idx, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; idx; ++i)</span><br><span class="line">        res = <span class="built_in">max</span>(res, c[i] + i);</span><br><span class="line">    <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u);</span><br><span class="line">        <span class="built_in">add</span>(u, i), <span class="built_in">add</span>(i, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        s[i] = <span class="built_in">dfs</span>(i, <span class="number">0</span>);</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == ans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P2607 [ZJOI2008]骑士</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p2607-zjoi2008-%E9%AA%91%E5%A3%AB/</url>
    <content><![CDATA[<div class="tabs" id="luogu-p2607-solution"><ul class="nav-tabs"><li class="tab active"><a href="#luogu-p2607-solution-1">Undirected Graph</a></li><li class="tab"><a href="#luogu-p2607-solution-2">Directed Graph</a></li></ul><div class="tab-content"><div class="tab-pane active" id="luogu-p2607-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000002</span>;</span><br><span class="line"><span class="type">int</span> n, root;</span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx, fa[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">LL f[N][<span class="number">2</span>], ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>, f[u][<span class="number">1</span>] = w[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v != root) &#123;</span><br><span class="line">            <span class="built_in">dp</span>(v);</span><br><span class="line">            f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">            f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f[v][<span class="number">1</span>] = -N;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    root = u;</span><br><span class="line">    <span class="keyword">while</span> (!vis[fa[root]]) &#123;</span><br><span class="line">        root = fa[root];</span><br><span class="line">        vis[root] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dp</span>(root);</span><br><span class="line">    LL tmp = <span class="built_in">max</span>(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]);</span><br><span class="line">    vis[root] = <span class="literal">true</span>;</span><br><span class="line">    root = fa[root];</span><br><span class="line">    <span class="built_in">dp</span>(root);</span><br><span class="line">    ans += <span class="built_in">max</span>(tmp, <span class="built_in">max</span>(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>, u; v &lt;= n; ++v) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w[v], &amp;u);</span><br><span class="line">        <span class="built_in">add</span>(u, v);</span><br><span class="line">        fa[v] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p2607-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000002</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n, c, p[N];</span><br><span class="line">PII root[N / <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> h[N], w[N], e[M], ne[M], idx;</span><br><span class="line">LL f[N][<span class="number">2</span>], ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? x : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dp</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">0</span>] = <span class="number">0</span>, f[u][<span class="number">1</span>] = w[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i];</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dp</span>(v, u);</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[v][<span class="number">0</span>], f[v][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">1</span>] += f[v][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>, v; u &lt;= n; ++u) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w[u], &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(u) != <span class="built_in">find</span>(v)) &#123;</span><br><span class="line">            p[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">            <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root[c++] = &#123;u, v&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [u, v] = root[i];</span><br><span class="line">        ans += <span class="built_in">max</span>(<span class="built_in">dp</span>(u, <span class="number">0</span>), <span class="built_in">dp</span>(v, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>树形 DP</tag>
        <tag>基环树</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3045 [USACO12FEB]Cow Coupons G</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3045-usaco12feb-cow-coupons-g/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50000</span>;</span><br><span class="line"><span class="type">int</span> n, k, ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125; cow[N];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; dq; <span class="comment">// 折扣小根堆</span></span><br><span class="line">priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; cq, pq; <span class="comment">// [折后价,坐标]小根堆，[原价,坐标]小根堆</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m, cost;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;cow[i].p, &amp;cow[i].c);</span><br><span class="line">    <span class="built_in">sort</span>(cow, cow + n, [](Node a, Node b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.c &lt; b.c; <span class="comment">// 按折后价排序</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123; <span class="comment">// 尽可能将 k 个优惠券用掉</span></span><br><span class="line">        cost += cow[i].c;</span><br><span class="line">        <span class="keyword">if</span> (cost &gt; m) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dq.<span class="built_in">push</span>(cow[i].p - cow[i].c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == n) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">        cq.<span class="built_in">emplace</span>(cow[i].c, i);</span><br><span class="line">        pq.<span class="built_in">emplace</span>(cow[i].p, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = k;</span><br><span class="line">    <span class="comment">// 将剩下的钱花掉，要保持每一笔花费尽可能小，以此买更多的牛</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 已买过的不再考虑购买</span></span><br><span class="line">        <span class="keyword">while</span> (st[cq.<span class="built_in">top</span>().second]) cq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span> (st[pq.<span class="built_in">top</span>().second]) pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">auto</span> [c, ci] = cq.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">auto</span> [p, pi] = pq.<span class="built_in">top</span>();</span><br><span class="line">        <span class="comment">// 要么用优惠券买 cow[ci]，花费 c，还需要原价购买 dp.top() 对应的牛</span></span><br><span class="line">        <span class="type">int</span> t1 = c + dq.<span class="built_in">top</span>();</span><br><span class="line">        <span class="comment">// 要么买价格最小的，花费 p</span></span><br><span class="line">        <span class="type">int</span> t2 = p;</span><br><span class="line">        <span class="keyword">if</span> (t1 &lt; t2) &#123; <span class="comment">// 前者花费更少</span></span><br><span class="line">            cost += t1;</span><br><span class="line">            dq.<span class="built_in">pop</span>();</span><br><span class="line">            dq.<span class="built_in">push</span>(cow[ci].p - cow[ci].c);</span><br><span class="line">            st[ci] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 后者花费更少</span></span><br><span class="line">            cost += t2;</span><br><span class="line">            st[pi] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">if</span> (cost &gt; m) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>堆</tag>
        <tag>UASACO</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P2986 [USACO10MAR]Great Cow Gathering G</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p2986-usaco10mar-great-cow-gathering-g/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">1</span>, M = <span class="number">2</span> * N;</span><br><span class="line"><span class="type">int</span> n, u, v, ww;</span><br><span class="line"><span class="type">int</span> c[N], h[N], w[M], e[M], ne[M], idx;</span><br><span class="line">LL dist[N], sz[N], ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> ww)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, w[idx] = ww, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;ww);</span><br><span class="line">        <span class="built_in">add</span>(u, v, ww), <span class="built_in">add</span>(v, u, ww);</span><br><span class="line">    &#125;</span><br><span class="line">    function&lt;LL(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">        LL cnt = c[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                LL s = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">                dist[u] += dist[v] + w[i] * s;</span><br><span class="line">                cnt += s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sz[u] = cnt;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    ans = dist[<span class="number">1</span>];</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dp = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="comment">// dist[v] = dist[u] + (sz[1] - sz[v]) * w[i] - sz[v] * w[i];</span></span><br><span class="line">                dist[v] = dist[u] + (sz[<span class="number">1</span>] - sz[v] - sz[v]) * w[i];</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, dist[v]);</span><br><span class="line">                <span class="built_in">dp</span>(v, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
        <tag>Tree</tag>
        <tag>USACO</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3047 [USACO12FEB]Nearby Cows G</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3047-usaco12feb-nearby-cows-g/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">1</span>, M = <span class="number">2</span> * N, K = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> n, k, u, v;</span><br><span class="line"><span class="type">int</span> c[N], h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> dp[N][K];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">        dp[u][<span class="number">0</span>] = c[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                    dp[u][j] += dp[v][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; reroot = [&amp;](<span class="type">int</span> u, <span class="type">int</span> f) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = k; j &gt;= <span class="number">2</span>; --j)</span><br><span class="line">                    dp[v][j] -= dp[v][j - <span class="number">2</span>]; <span class="comment">// 容斥定理</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">                    dp[v][j] += dp[u][j - <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">reroot</span>(v, u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">reroot</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">accumulate</span>(dp[i], dp[i] + k + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
        <tag>Tree</tag>
        <tag>USACO</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3368 【模板】树状数组 2</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3368-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500001</span>;</span><br><span class="line"><span class="type">int</span> n, m, x, y, k, a[N], c[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        c[i] += k;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s += c[i];</span><br><span class="line">        i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="built_in">update</span>(i, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;k);</span><br><span class="line">            <span class="built_in">update</span>(x, k);</span><br><span class="line">            <span class="built_in">update</span>(y + <span class="number">1</span>, -k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sum</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3369 【模板】普通平衡树</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3369-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    <content><![CDATA[<div class="tabs" id="luogu-p3369-solution"><ul class="nav-tabs"><li class="tab active"><a href="#luogu-p3369-solution-1">Treap</a></li><li class="tab"><a href="#luogu-p3369-solution-2">Splay</a></li></ul><div class="tab-content"><div class="tab-pane active" id="luogu-p3369-solution-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"><span class="type">int</span> n, op, x, root, idx;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> key, fix;</span><br><span class="line">    <span class="type">int</span> cnt, size;</span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    tr[p].size = tr[tr[p].l].size + tr[tr[p].r].size + tr[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_node</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    tr[++idx].key = key;</span><br><span class="line">    tr[idx].fix = <span class="built_in">rand</span>();</span><br><span class="line">    tr[idx].cnt = tr[idx].size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">get_node</span>(-INF), <span class="built_in">get_node</span>(INF);</span><br><span class="line">    root = <span class="number">1</span>, tr[<span class="number">1</span>].r = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">pushup</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zig</span><span class="params">(<span class="type">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q = tr[p].l;</span><br><span class="line">    tr[p].l = tr[q].r, tr[q].r = p, p = q;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].r), <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zag</span><span class="params">(<span class="type">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q = tr[p].r;</span><br><span class="line">    tr[p].r = tr[q].l, tr[q].l = p, p = q;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].l), <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) p = <span class="built_in">get_node</span>(key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key == key) ++tr[p].cnt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key &gt; key) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].l, key);</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[p].l].fix &gt; tr[p].fix) <span class="built_in">zig</span>(p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].r, key);</span><br><span class="line">        <span class="keyword">if</span> (tr[tr[p].r].fix &gt; tr[p].fix) <span class="built_in">zag</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> &amp;p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key == key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tr[p].cnt &gt; <span class="number">1</span>) --tr[p].cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].l || tr[p].r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tr[p].r || tr[tr[p].l].fix &gt; tr[tr[p].r].fix) &#123;</span><br><span class="line">                <span class="built_in">zig</span>(p);</span><br><span class="line">                <span class="built_in">remove</span>(tr[p].r, key);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">zag</span>(p);</span><br><span class="line">                <span class="built_in">remove</span>(tr[p].l, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key &gt; key) <span class="built_in">remove</span>(tr[p].l, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">remove</span>(tr[p].r, key);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_rank_by_key</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key == key) <span class="keyword">return</span> tr[tr[p].l].size + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key &gt; key) <span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(tr[p].l, key);</span><br><span class="line">    <span class="keyword">return</span> tr[tr[p].l].size + tr[p].cnt + <span class="built_in">get_rank_by_key</span>(tr[p].r, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_key_by_rank</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (tr[tr[p].l].size &gt;= rank) <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].l, rank);</span><br><span class="line">    <span class="keyword">if</span> (tr[tr[p].l].size + tr[p].cnt &gt;= rank) <span class="keyword">return</span> tr[p].key;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].r, rank - tr[tr[p].l].size - tr[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_prev</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key &gt;= key) <span class="keyword">return</span> <span class="built_in">get_prev</span>(tr[p].l, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key, <span class="built_in">get_prev</span>(tr[p].r, key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key &lt;= key) <span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key, <span class="built_in">get_next</span>(tr[p].l, key));</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) <span class="built_in">insert</span>(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) <span class="built_in">remove</span>(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) cout &lt;&lt; <span class="built_in">get_rank_by_key</span>(root, x) - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) cout &lt;&lt; <span class="built_in">get_key_by_rank</span>(root, x + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) cout &lt;&lt; <span class="built_in">get_prev</span>(root, x) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">get_next</span>(root, x) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="luogu-p3369-solution-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, op, x;</span><br><span class="line"><span class="type">int</span> rt, tot, fa[N], ch[N][<span class="number">2</span>], val[N], cnt[N], sz[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Splay</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; sz[x] = sz[ch[x][<span class="number">0</span>]] + sz[ch[x][<span class="number">1</span>]] + cnt[x]; &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == ch[fa[x]][<span class="number">1</span>]; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; ch[x][<span class="number">0</span>] = ch[x][<span class="number">1</span>] = fa[x] = val[x] = sz[x] = cnt[x] = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> y = fa[x], z = fa[y], chk = <span class="built_in">get</span>(x);</span><br><span class="line">        ch[y][chk] = ch[x][chk ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (ch[x][chk ^ <span class="number">1</span>]) fa[ch[x][chk ^ <span class="number">1</span>]] = y;</span><br><span class="line">        ch[x][chk ^ <span class="number">1</span>] = y;</span><br><span class="line">        fa[y] = x;</span><br><span class="line">        fa[x] = z;</span><br><span class="line">        <span class="keyword">if</span> (z) ch[z][y == ch[z][<span class="number">1</span>]] = x;</span><br><span class="line">        <span class="built_in">maintain</span>(x);</span><br><span class="line">        <span class="built_in">maintain</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f = fa[x]; f = fa[x], f; <span class="built_in">rotate</span>(x))</span><br><span class="line">            <span class="keyword">if</span> (fa[f]) <span class="built_in">rotate</span>(<span class="built_in">get</span>(x) == <span class="built_in">get</span>(f) ? f : x);</span><br><span class="line">        rt = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ins</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!rt) &#123;</span><br><span class="line">            val[++tot] = k;</span><br><span class="line">            cnt[tot]++;</span><br><span class="line">            rt = tot;</span><br><span class="line">            <span class="built_in">maintain</span>(rt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = rt, f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val[cur] == k) &#123;</span><br><span class="line">                cnt[cur]++;</span><br><span class="line">                <span class="built_in">maintain</span>(cur);</span><br><span class="line">                <span class="built_in">maintain</span>(f);</span><br><span class="line">                <span class="built_in">splay</span>(cur);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f = cur;</span><br><span class="line">            cur = ch[cur][val[cur] &lt; k];</span><br><span class="line">            <span class="keyword">if</span> (!cur) &#123;</span><br><span class="line">                val[++tot] = k;</span><br><span class="line">                cnt[tot]++;</span><br><span class="line">                fa[tot] = f;</span><br><span class="line">                ch[f][val[f] &lt; k] = tot;</span><br><span class="line">                <span class="built_in">maintain</span>(tot);</span><br><span class="line">                <span class="built_in">maintain</span>(f);</span><br><span class="line">                <span class="built_in">splay</span>(tot);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rk</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, cur = rt;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; val[cur]) cur = ch[cur][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res += sz[ch[cur][<span class="number">0</span>]];</span><br><span class="line">                <span class="keyword">if</span> (k == val[cur]) &#123;</span><br><span class="line">                    <span class="built_in">splay</span>(cur);</span><br><span class="line">                    <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res += cnt[cur];</span><br><span class="line">                cur = ch[cur][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = rt;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[cur][<span class="number">0</span>] &amp;&amp; k &lt;= sz[ch[cur][<span class="number">0</span>]]) &#123;</span><br><span class="line">                cur = ch[cur][<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k -= cnt[cur] + sz[ch[cur][<span class="number">0</span>]];</span><br><span class="line">                <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">splay</span>(cur);</span><br><span class="line">                    <span class="keyword">return</span> val[cur];</span><br><span class="line">                &#125;</span><br><span class="line">                cur = ch[cur][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = ch[rt][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (!cur) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (ch[cur][<span class="number">1</span>]) cur = ch[cur][<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">splay</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = ch[rt][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!cur) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (ch[cur][<span class="number">0</span>]) cur = ch[cur][<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">splay</span>(cur);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">rk</span>(k);</span><br><span class="line">        <span class="keyword">if</span> (cnt[rt] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            cnt[rt]--;</span><br><span class="line">            <span class="built_in">maintain</span>(rt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ch[rt][<span class="number">0</span>] &amp;&amp; !ch[rt][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">clear</span>(rt);</span><br><span class="line">            rt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ch[rt][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> cur = rt;</span><br><span class="line">            rt = ch[rt][<span class="number">1</span>];</span><br><span class="line">            fa[rt] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ch[rt][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="type">int</span> cur = rt;</span><br><span class="line">            rt = ch[rt][<span class="number">0</span>];</span><br><span class="line">            fa[rt] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">clear</span>(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cur = rt;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">pre</span>();</span><br><span class="line">        fa[ch[cur][<span class="number">1</span>]] = x;</span><br><span class="line">        ch[x][<span class="number">1</span>] = ch[cur][<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">clear</span>(cur);</span><br><span class="line">        <span class="built_in">maintain</span>(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tree;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) tree.<span class="built_in">ins</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) tree.<span class="built_in">del</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) cout &lt;&lt; tree.<span class="built_in">rk</span>(x) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) cout &lt;&lt; tree.<span class="built_in">kth</span>(x) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) tree.<span class="built_in">ins</span>(x), cout &lt;&lt; val[tree.<span class="built_in">pre</span>()] &lt;&lt; endl, tree.<span class="built_in">del</span>(x);</span><br><span class="line">        <span class="keyword">else</span> tree.<span class="built_in">ins</span>(x), cout &lt;&lt; val[tree.<span class="built_in">nxt</span>()] &lt;&lt; endl, tree.<span class="built_in">del</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3373 【模板】线段树 2</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3373-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91-2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> n, p, m, op, l, r, d, w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, sum, mul, add;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(Node &amp;t, LL mul, LL add)</span> </span>&#123;</span><br><span class="line">    t.sum = (t.sum * mul + (t.r - t.l + <span class="number">1</span>) * add) % p;</span><br><span class="line">    t.mul = (t.mul * mul) % p;</span><br><span class="line">    t.add = (t.add * mul + add) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].sum = (tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].mul == <span class="number">1</span> &amp;&amp; tr[u].add == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">eval</span>(tr[u &lt;&lt; <span class="number">1</span>], tr[u].mul, tr[u].add);</span><br><span class="line">    <span class="built_in">eval</span>(tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tr[u].mul, tr[u].add);</span><br><span class="line">    tr[u].mul = <span class="number">1</span>, tr[u].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) tr[u] = &#123;l, r, w[l], <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[u] = &#123;l, r, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> mul, <span class="type">int</span> add)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="built_in">eval</span>(tr[u], mul, add);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, l, r, mul, add);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, mul, add);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) sum = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) sum = (sum + <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r)) % p;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, l, r));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) <span class="built_in">update</span>(<span class="number">1</span>, l, r, d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">update</span>(<span class="number">1</span>, l, r, <span class="number">1</span>, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3647 [APIO2014] 连珠线</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3647-apio2014-%E8%BF%9E%E7%8F%A0%E7%BA%BF/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
        <tag>Tree</tag>
        <tag>APIO</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3478 [POI2008] STA-Station</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3478-poi2008-sta-station/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">1</span>, M = N * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n, u, v;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx, sz[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[++idx] = v, ne[idx] = h[u], h[u] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(u, v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> f, <span class="type">int</span> u, <span class="type">int</span> d) &#123;</span><br><span class="line">        sz[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                sum += d + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(u, v, d + <span class="number">1</span>);</span><br><span class="line">                sz[u] += sz[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    LL maxsum = sum;</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, LL)&gt; reroot = [&amp;](<span class="type">int</span> f, <span class="type">int</span> u, LL us) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> v = e[i];</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                LL vs = us - sz[v] + (n - sz[v]);</span><br><span class="line">                <span class="keyword">if</span> (maxsum &lt; vs) maxsum = vs, ans = v;</span><br><span class="line">                <span class="built_in">reroot</span>(u, v, vs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">reroot</span>(<span class="number">0</span>, <span class="number">1</span>, sum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
        <tag>Tree</tag>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P3834 【模板】可持久化线段树 2</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p3834-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-2/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[N], nums[N], root[N], idx, l, r, k, len;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, cnt;</span><br><span class="line">&#125; tr[N * <span class="number">4</span> + N * <span class="number">18</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums + <span class="number">1</span>, nums + <span class="number">1</span> + len, x) - nums;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++idx;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid), tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> q = ++idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ++tr[q].cnt;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[p].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> q, <span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="type">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt, mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        nums[i]= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums + <span class="number">1</span>, nums + <span class="number">1</span> + n);</span><br><span class="line">    len = <span class="built_in">unique</span>(nums + <span class="number">1</span>, nums + <span class="number">1</span> + n) - nums - <span class="number">1</span>;</span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">1</span>, len, <span class="built_in">find</span>(a[i]));</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">1</span>, len, k)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>离散化</tag>
        <tag>线段树</tag>
        <tag>主席树</tag>
        <tag>可持久化</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P6419 [COCI2014-2015#1] Kamp</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p6419-coci2014-2015-1-kamp/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树形 DP</tag>
        <tag>换根 DP</tag>
        <tag>Tree</tag>
        <tag>COCI</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷 P4513 小白逛公园</title>
    <url>/%E6%B4%9B%E8%B0%B7/%E6%B4%9B%E8%B0%B7-p4513-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>, INF = <span class="number">-5e8</span> - <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, k, a, b;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> lmax, rmax, sum, tmax;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(Node &amp;rt, Node &amp;left, Node &amp;right)</span> </span>&#123;</span><br><span class="line">    rt.tmax = <span class="built_in">max</span>(left.rmax + right.lmax, <span class="built_in">max</span>(left.tmax, right.tmax));</span><br><span class="line">    rt.lmax = <span class="built_in">max</span>(left.lmax, left.sum + right.lmax);</span><br><span class="line">    rt.rmax = <span class="built_in">max</span>(right.rmax, left.rmax + right.sum);</span><br><span class="line">    rt.sum = left.sum + right.sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> &amp;rt = tr[u], &amp;left = tr[u &lt;&lt; <span class="number">1</span>], &amp;right = tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">pushup</span>(rt, left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[u] = &#123;l, r&#125;;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        tr[u].lmax = tr[u].rmax = tr[u].sum = tr[u].tmax = a;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span> (l &gt; mid) <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    Node ans, ln = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r), rn = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="built_in">pushup</span>(ans, ln, rn);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> i, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == i &amp;&amp; tr[u].r == i) &#123;</span><br><span class="line">        tr[u].lmax = tr[u].rmax = tr[u].sum = tr[u].tmax = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= mid) <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span>, i, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, i, v);</span><br><span class="line">    <span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt; b) <span class="built_in">swap</span>(a, b);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, a, b).tmax);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>递归</tag>
      </tags>
  </entry>
</search>
